@using MediatR;
@using Microsoft.Extensions.Logging;
@using Polkanalysis.Domain.Contracts.Primary.Notification;
@using Polkanalysis.Domain.Contracts.Secondary;

@inherits LayoutComponentBase
@inject ISubstrateRepository _substrateService;
@inject IMediator _mediator;
@inject ILogger<MainLayout> logger;


<!-- Start wrapper-->
<div id="wrapper">

    <!--Start sidebar-wrapper-->
    <div id="sidebar-wrapper" data-simplebar="" data-simplebar-auto-hide="true">
        <div class="brand-logo">
            <a href="index.html">
                <img src="_content/Polkanalysis.Components/assets/images/logo-icon.png" class="logo-icon" alt="logo icon">
                <h5 class="logo-text">Polkanalysis</h5>
            </a>
        </div>
        <SideMenu></SideMenu>
    </div>
    <!--End sidebar-wrapper-->
    <HeaderMenu></HeaderMenu>

    <div class="clearfix"></div>

    <div class="content-wrapper">
        <div class="container-fluid">
            @if (_substrateService.IsConnected())
            {
                @Body

                <div class="overlay toggle-menu"></div>
            } else
            {
                <div class="row row-group m-0 text-center">
                    <div class="col-12 border-light">
                        <Loader />
                        <div class="mt-2">Waiting blockchain connexion...</div>
                    </div>
                </div>
            }
        </div>

    </div>
    <!--Start Back To Top Button-->
    <a href="javaScript:void();" class="back-to-top"><i class="fa fa-angle-double-up"></i> </a>
    <!--End Back To Top Button-->
    <Footer />
    <!--start color switcher-->
    @*<div class="right-sidebar">
        <div class="switcher-icon">
            <i class="zmdi zmdi-settings zmdi-hc-spin"></i>
        </div>
        <div class="right-sidebar-content">

            <p class="mb-0">Gaussion Texture</p>
            <hr>

            <ul class="switcher">
                <li id="theme1"></li>
                <li id="theme2"></li>
                <li id="theme3"></li>
                <li id="theme4"></li>
                <li id="theme5"></li>
                <li id="theme6"></li>
            </ul>

            <p class="mb-0">Gradient Background</p>
            <hr>

            <ul class="switcher">
                <li id="theme7"></li>
                <li id="theme8"></li>
                <li id="theme9"></li>
                <li id="theme10"></li>
                <li id="theme11"></li>
                <li id="theme12"></li>
                <li id="theme13"></li>
                <li id="theme14"></li>
                <li id="theme15"></li>
            </ul>

        </div>
    </div>*@
    <!--end color switcher-->
</div>

@code {
    protected bool isCurrentlyConnected = false;

    protected override async Task OnInitializedAsync()
    {
        await _substrateService.CheckBlockchainStateAsync(async (bool isConnected) =>
        {
            if (isCurrentlyConnected != isConnected)
            {
                logger.LogInformation($"Is connected : {isConnected}");
                isCurrentlyConnected = isConnected;

                await _mediator.Send(new SubscribeBlockCommand());

                StateHasChanged();
            }

        }, CancellationToken.None);
    }
}