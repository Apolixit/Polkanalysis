@using MediatR;
@using Microsoft.Extensions.Logging;
@using Polkanalysis.Domain.Contracts.Primary.Notification;
@using Polkanalysis.Domain.Contracts.Secondary;

@inherits LayoutComponentBase
@inject ISubstrateRepository substrateService;
@inject IMediator _mediator;
@inject ILogger<MainLayout> logger;


<!-- Start wrapper-->
<div id="wrapper">

    <!--Start sidebar-wrapper-->
    <div id="sidebar-wrapper" data-simplebar="" data-simplebar-auto-hide="true">
        <div class="brand-logo">
            <a href="index.html">
                <img src="assets/images/logo-icon.png" class="logo-icon" alt="logo icon">
                <h5 class="logo-text">Dashtreme Admin</h5>
            </a>
        </div>
        <SideMenu></SideMenu>
    </div>
    <!--End sidebar-wrapper-->
    <HeaderMenu></HeaderMenu>

    <div class="clearfix"></div>

    <div class="content-wrapper">
        <div class="container-fluid">

            <!--Start Dashboard Content-->
            <div class="row row-group m-0">
                <div class="col-12 col-xl-6 border-light">
                    <BlockchainIdentity />
                </div>
                <div class="col-12 col-xl-6 border-light">
                    <BlockchainStats />
                </div>
            </div>

            <div class="row">
                <div class="col-12 col-xl-6">
                    <LatestBlock></LatestBlock>
                </div>

                <div class="col-12 col-xl-6">
                    <LatestExtrinsics></LatestExtrinsics>
                </div>
            </div>

            <div class="row">
                <div class="col-12 col-xl-12">
                    <Polkanalysis.Components.Substrate.Modules.ModuleList></Polkanalysis.Components.Substrate.Modules.ModuleList>
                </div>
            </div>

            <!--start overlay-->
            <div class="overlay toggle-menu"></div>
            <!--end overlay-->

        </div>
        <!-- End container-fluid-->

    </div><!--End content-wrapper-->
    <!--Start Back To Top Button-->
    <a href="javaScript:void();" class="back-to-top"><i class="fa fa-angle-double-up"></i> </a>
    <!--End Back To Top Button-->
    <!--Start footer-->
    <Footer />
    <!--End footer-->
    <!--start color switcher-->
    <div class="right-sidebar">
        <div class="switcher-icon">
            <i class="zmdi zmdi-settings zmdi-hc-spin"></i>
        </div>
        <div class="right-sidebar-content">

            <p class="mb-0">Gaussion Texture</p>
            <hr>

            <ul class="switcher">
                <li id="theme1"></li>
                <li id="theme2"></li>
                <li id="theme3"></li>
                <li id="theme4"></li>
                <li id="theme5"></li>
                <li id="theme6"></li>
            </ul>

            <p class="mb-0">Gradient Background</p>
            <hr>

            <ul class="switcher">
                <li id="theme7"></li>
                <li id="theme8"></li>
                <li id="theme9"></li>
                <li id="theme10"></li>
                <li id="theme11"></li>
                <li id="theme12"></li>
                <li id="theme13"></li>
                <li id="theme14"></li>
                <li id="theme15"></li>
            </ul>

        </div>
    </div>
    <!--end color switcher-->

</div><!--End wrapper-->
@*<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>*@

@code {
    protected bool isCurrentlyConnected = false;

    protected override async Task OnInitializedAsync()
    {
        await substrateService.CheckBlockchainStateAsync(async (bool isConnected) =>
        {
            if (isCurrentlyConnected != isConnected)
            {
                logger.LogInformation($"Is connected : {isConnected}");
                isCurrentlyConnected = isConnected;

                StateHasChanged();

                await _mediator.Send(new SubscribeBlockCommand());
            }

        }, CancellationToken.None);
    }
}