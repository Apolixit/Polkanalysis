@using OperationResult;
@using Polkanalysis.Components.Services.Http;
@using Polkanalysis.Domain.Contracts.Dto.Informations;
@using Polkanalysis.Domain.Contracts.Dto.Price;
@using Polkanalysis.Domain.Contracts.Primary.Informations;
@using Polkanalysis.Domain.Contracts.Primary.Price;
@inject IApiService apiService;
@inject IMediator _mediator;


<div class="row">
    <DataMediator Request="requestDetails">
        <div class="col-sm-4 col-md-3 text-center my-auto">
            <img src="@context.BlockchainInformationDetail.LogoUrl"
                 class="img-fluid rounded-start" alt="Logo" width="100">
        </div>
        <div class="col-sm-6 col-md-6">
            <div class="card-body">
                <h5 class="card-title">
                    @if (context.IsRelayChain)
                    {
                        <i class="bi bi-bank"></i>
                    }
                    @context.BlockchainInformationDetail.Name <small><em>(@context.FullName)</em></small>
                </h5>
                <div class="card-text">
                    <p>Token : @context.TokenSymbol</p>
                    <p>Version : @context.Version</p>
                </div>
                <p class="card-text mt-3">
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Website))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Website"><i class="bi bi-browser-chrome"></i></a>
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Whitepaper))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Whitepaper"><i class="bi bi-book"></i></a>
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Github))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Github"><i class="bi bi-github"></i></a>
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Twitter))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Twitter"><i class="bi bi-twitter"></i></a>
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Twitter))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Discord"><i class="bi bi-discord"></i></a>
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Medium))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Medium"><i class="bi bi-medium"></i></a>
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Telegram))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Telegram"><i class="bi bi-telegram"></i></a>
                        </span>
                    }
                </p>
            </div>
        </div>
    </DataMediator>
    <DataMediator Request="requestPrice">
        <div class="col-sm-12 col-md-3 my-auto">
            <div class="card-body text-center">
                <div>Current price</div>
                <div class="fs-4">
                    @context.Price.ToString("N2") @context.CompareToCurrency.ToString()
                </div>
            </div>
        </div>
    </DataMediator>
</div>


@code {
    private Task<Result<BlockchainDetailsDto, ErrorResult>>? requestDetails;
    private Task<Result<TokenPriceDto, ErrorResult>>? requestPrice;
    private BlockchainDetailsDto? blockchainDetail;

    protected override void OnInitialized()
    {
        requestDetails = _mediator.Send(new BlockchainDetailsQuery(), CancellationToken.None);
        requestPrice = _mediator.Send(new TokenPriceQuery()
            {
                CoinId = "polkadot",
                Date = DateTime.Now
            }, CancellationToken.None);
        //request = new ApiRequest<BlockchainDetailsDto>("/api/polkadot/information");
    }
}
