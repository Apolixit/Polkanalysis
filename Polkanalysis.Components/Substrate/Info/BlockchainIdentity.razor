@using OperationResult;
@using Polkanalysis.Components.Services.Http;
@using Polkanalysis.Domain.Contracts.Dto.Informations;
@using Polkanalysis.Domain.Contracts.Primary.Informations;
@inject IApiService apiService;
@inject IMediator _mediator;

<DataMediator Request="request">
    <div class="row">
        <div class="col-sm-4 col-md-3 text-center">
            <img src="@context.BlockchainInformationDetail.LogoUrl" class="img-fluid rounded-start" alt="Logo" width="80">
        </div>
        <div class="col-sm-8 col-md-9">
            <div class="card-body">
                <h5 class="card-title">
                    @if(context.IsRelayChain)
                    {
                        <i class="bi bi-bank mr-2"></i>
                        <div class="mr-2"></div>
                    }
                    @context.BlockchainInformationDetail.Name <small><em>(@context.FullName)</em></small>
                </h5>
                <div class="card-text">
                    <p>Token : @context.TokenSymbol</p>
                    <p>Version : @context.Version</p>
                </div>
                <p class="card-text">
                    @if(!string.IsNullOrEmpty(context.BlockchainInformationDetail.Website))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Website"><i class="bi bi-browser-chrome"></i></a>
                        </span>
                    }
                    @if(!string.IsNullOrEmpty(context.BlockchainInformationDetail.Whitepaper))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Whitepaper"><i class="bi bi-book"></i></a>
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Github))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Github"><i class="bi bi-github"></i></a>
                        </span>
                    }
                    @if(!string.IsNullOrEmpty(context.BlockchainInformationDetail.Twitter))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Twitter"><i class="bi bi-twitter"></i></a>
                        </span>
                    }
                    @if(!string.IsNullOrEmpty(context.BlockchainInformationDetail.Twitter))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Discord"><i class="bi bi-discord"></i></a>
                        </span>
                    }
                    @if(!string.IsNullOrEmpty(context.BlockchainInformationDetail.Medium))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Medium"><i class="bi bi-medium"></i></a>
                        </span>
                    }
                    @if(!string.IsNullOrEmpty(context.BlockchainInformationDetail.Telegram))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Telegram"><i class="bi bi-telegram"></i></a>
                        </span>
                    }
                </p>
            </div>
        </div>
    </div>
</DataMediator>

@code {
    private Task<Result<BlockchainDetailsDto, ErrorResult>> request;
    private BlockchainDetailsDto? blockchainDetail;

    protected async override Task OnInitializedAsync()
    {
        request = _mediator.Send(new BlockchainDetailsQuery(), CancellationToken.None);
        //request = new ApiRequest<BlockchainDetailsDto>("/api/polkadot/information");
    }
}
