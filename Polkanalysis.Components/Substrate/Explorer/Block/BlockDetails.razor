@page "/block/{blockId:int}"
@page "/block/{blockHash?}"

@using Polkanalysis.Components.Services.Http;
@using Polkanalysis.Domain.Contracts.Dto.Block;
@using Polkanalysis.Domain.Contracts.Primary;
@using Polkanalysis.Domain.Contracts.Primary.Result;
@using Polkanalysis.Domain.Contracts.Secondary.Repository;
@using Polkanalysis.Domain.Contracts.Primary.Explorer.Block;

@inject IApiService apiService;
@inject IMediator _mediator;

<DataMediator Request="request">
    <Polkanalysis.Components.Shared.Breadcrumb Elements="breadcrumbDtos" />
    
    <div class="card">
        <div class="card-header">
            Details block n°@blockId
            <div class="card-action">
                <div class="dropdown">
                    <a href="javascript:void();" class="dropdown-toggle dropdown-toggle-nocaret" data-toggle="dropdown">
                        <i class="icon-options"></i>
                    </a>
                    <div class="dropdown-menu dropdown-menu-right">
                        <a class="dropdown-item" href="javascript:void();">Export PDF</a>
                        <a class="dropdown-item" href="javascript:void();">Export Excel</a>
                    </div>
                </div>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table align-items-center">
                <tbody>
                    <tr>
                        <td>
                            <i class="bi bi-hash"></i> Block hash
                        </td>
                        <td>@context.Hash</td>
                    </tr>
                    <tr>
                        <td><i class="bi bi-hourglass-split"></i> Timestamp</td>
                        <td>@context.Date.Date</td>
                    </tr>
                    <tr>
                        <td><i class="bi bi-clock"></i> Block time</td>
                        <td>@context.Date.Date</td>
                    </tr>
                    <tr>
                        <td><i class="bi bi-battery-full"></i> Status</td>
                        <td>@context.Status</td>
                    </tr>
                    <tr>
                        <td><i class="bi bi-box-arrow-up"></i> Parent hash</td>
                        <td>@context.ParentHash</td>
                    </tr>
                    <tr>
                        <td><i class="fa-solid fa-signal-bars"></i> State root</td>
                        <td>@context.StateRoot</td>
                    </tr>
                    <tr>
                        <td><i class="bi bi-houses"></i> Extrinsic root</td>
                        <td>@context.ExtrinsicsRoot</td>
                    </tr>
                    <tr>
                        <td><i class="bi bi-person-fill-check"></i> Validator</td>
                        <td>@context.Validator</td>
                    </tr>
                    <tr>
                        <td><i class="bi bi-file-diff"></i> Spec version</td>
                        <td>@context.SpecVersion</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</DataMediator>



@code {
    [Parameter] public int? blockId { get; set; }
    [Parameter] public string? blockHash { get; set; }
    private Task<Result<BlockDto, ErrorResult>>? request;
    private IEnumerable<BreadcrumbDto> breadcrumbDtos = default!;

    protected override async Task OnInitializedAsync()
    {
        //blockDetail = await apiService.GetHelperAsync<BlockDetailsQuery, BlockDto>("/api/polkadot/block", new BlockDetailsQuery((uint)blockId));
        if(blockId != null)
        {
            request = _mediator.Send(new BlockDetailsQuery((uint)blockId), CancellationToken.None);
        } else if(!string.IsNullOrEmpty(blockHash))
        {
            request = _mediator.Send(new BlockDetailsQuery(blockHash), CancellationToken.None);
        }
        //    StateHasChanged();

        breadcrumbDtos = new List<BreadcrumbDto>()
        {
            new BreadcrumbDto("Block", "/block"),
            new BreadcrumbDto("Block detail", $"/block/{(blockId != null ? blockId : blockHash)}")
        };
    }
}
