@using Polkanalysis.Domain.Contracts.Dto.Block;
@using Polkanalysis.Domain.Contracts.Primary.Explorer.Block;
@using Polkanalysis.Domain.Contracts.Secondary.Repository;
@inject IExplorerRepository _blockRepository;
@inject IMediator _mediator;
@inject NavigationManager _navigationManager;

@foreach (var block in Blocks)
{
    var cssBorder = block.Status switch
    {
        GlobalStatusDto.BlockStatusDto.Finalized => "border-success",
        GlobalStatusDto.BlockStatusDto.Broadcasted => "border-warning",
        _ => "border-error"
    };

    <div class="col">
        <div class="card border @cssBorder h-100 pointer-event" @onclick="(() => GoToBlockDetails(block.Number))">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="bi bi-hash"></i>
                    @block.Number
                </h5>
                <p class="card-text text-end">
                    <i class="bi bi-journal-album"></i> @block.NbExtrinsics
                    <i class="bi bi-calendar2-event"></i> @block.NbEvents
                    <i class="bi bi-book-half"></i> @block.NbLogs
                </p>
                <p class="card-text">
                    <Polkanalysis.Components.Substrate.Account.AccountSumUp User="@block.Validator" />
                </p>
            </div>
            <div class="card-footer">
                <small class="text-body-secondary">@block.When</small>
            </div>
        </div>
    </div>
}


@*<Table Elems="Blocks" Context="block">
    <TbodyContent>
        <tr @onclick="(() => GoToBlockDetails(block.Number))">
            <td>
                <PolkadotIcons IconName="Block Number.svg" />
                @block.Number
            </td>
            <td>
                @block.When
            </td>
            <td>
                @block.Status
            </td>
        </tr>
    </TbodyContent>
</Table>*@

@code {
    [Parameter] public int NbBlockMax { get; set; } = 10;
    [Parameter] public int NbPreviousBlockToFetch { get; set; } = 10;
    [Parameter] public List<BlockLightDto> Blocks { get; set; } = new List<BlockLightDto>();

    protected async override Task OnInitializedAsync()
    {
        //var blocks = await _mediator.Send(new BlocksQuery() { NbLastBlocksToFetch = NbBlockMax }, CancellationToken.None);
        //Blocks.AddRange(blocks.Value);

        await _blockRepository.SubscribeNewBlocksAsync(async (_) =>
        {
            var blocks = await _mediator.Send(new BlocksQuery() { NbLastBlocksToFetch = NbBlockMax }, CancellationToken.None);
            Blocks.Clear();
            Blocks.AddRange(blocks.Value.OrderByDescending(x => x.Number));
            InvokeAsync(() => StateHasChanged());
        }, CancellationToken.None);
    }

    protected void GoToBlockDetails(ulong blockId)
    {
        _navigationManager.NavigateTo($"block/{blockId}");
    }
}
