@using Polkanalysis.Domain.Contracts.Dto.Block;
@using Polkanalysis.Domain.Contracts.Primary.Explorer.Block;
@using Polkanalysis.Domain.Contracts.Secondary.Repository;
@inject IExplorerRepository _blockRepository;
@inject IMediator _mediator;
@inject NavigationManager _navigationManager;

@foreach (var block in Blocks)
{
    var (cssBorder, cssColor, cssIcon) = block.Status switch
    {
        GlobalStatusDto.BlockStatusDto.Finalized => ("border-success", "text-success", "bi bi-hourglass - bottom"),
        GlobalStatusDto.BlockStatusDto.Broadcasted => ("border-warning", "text-warning", "bi bi-hourglass-top"),
        _ => ("border-error", "text-error", "bi bi-hourglass")
    };

    <div class="col">
        <div class="card card-hoverable h-100 border @cssBorder" @onclick="(() => GoToBlockDetails(block.Number))" style="cursor:pointer;">
            <div class="card-body mb-2">
                <div>
                    <i class="@cssColor @cssIcon float-start"></i>

                    <h5 class="card-title text-center">
                        <i class="bi bi-hash"></i>
                        @block.Number
                    </h5>
                    
                </div>

                <p class="card-text text-end mb-1">
                    <span class="mr-1"><i class="bi bi-journal-album"></i> @block.NbExtrinsics</span>
                    <span class="mr-1"><i class="bi bi-calendar2-event"></i> @block.NbEvents</span>
                    <span><i class="bi bi-book-half"></i> @block.NbLogs</span>
                </p>
                <p class="card-text mb-1">
                    <Polkanalysis.Components.Substrate.Account.AccountSumUp User="@block.Validator" />
                </p>
            </div>
            <div class="card-footer">
                <small class="text-end">@block.When</small>
            </div>
        </div>
    </div>
}


@*<Table Elems="Blocks" Context="block">
    <TbodyContent>
        <tr @onclick="(() => GoToBlockDetails(block.Number))">
            <td>
                <PolkadotIcons IconName="Block Number.svg" />
                @block.Number
            </td>
            <td>
                @block.When
            </td>
            <td>
                @block.Status
            </td>
        </tr>
    </TbodyContent>
</Table>*@

@code {
    [Parameter] public int NbBlockMax { get; set; } = 10;
    [Parameter] public int NbPreviousBlockToFetch { get; set; } = 10;
    [Parameter] public List<BlockLightDto> Blocks { get; set; } = new List<BlockLightDto>();

    protected async override Task OnInitializedAsync()
    {
        //var blocks = await _mediator.Send(new BlocksQuery() { NbLastBlocksToFetch = NbBlockMax }, CancellationToken.None);
        //Blocks.AddRange(blocks.Value);

        var blocks = await _mediator.Send(new BlocksQuery() { NbLastBlocksToFetch = NbBlockMax }, CancellationToken.None);
        Blocks.Clear();
        Blocks.AddRange(blocks.Value.OrderByDescending(x => x.Number));
        //await _blockRepository.SubscribeNewBlocksAsync(async (_) =>
        //{
        //    var blocks = await _mediator.Send(new BlocksQuery() { NbLastBlocksToFetch = NbBlockMax }, CancellationToken.None);
        //    Blocks.Clear();
        //    Blocks.AddRange(blocks.Value.OrderByDescending(x => x.Number));

        //    InvokeAsync(() => StateHasChanged());
        //}, CancellationToken.None);
    }

    protected void GoToBlockDetails(ulong blockId)
    {
        _navigationManager.NavigateTo($"block/{blockId}");
    }
}
