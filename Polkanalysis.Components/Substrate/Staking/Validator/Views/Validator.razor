@page "/validator/{ValidatorAddress}"
@using OperationResult;
@using Polkanalysis.Components.Dto;
@using Polkanalysis.Domain.Contracts.Dto.Staking.Validator;
@using Polkanalysis.Domain.Contracts.Primary.Staking.Validators;

@inject IMediator _mediator;

<div class="row">
    <div class="col-12 col-md-8 offset-md-2">
        <Alert Title="What is a validator ?">
            Todo wiki
            https://wiki.polkadot.network/docs/learn-nominator
        </Alert>
    </div>
</div>

<DataMediator Request="request">
    <Polkanalysis.Components.Shared.Breadcrumb Elements="breadcrumbDtos" />

    <div>Stash address : @context.StashAddress</div>
    <div>Controller address : @context.ControllerAddress</div>
    <div>Reward address : @context.RewardAddress</div>
    <div>Self bonded : @context.SelfBonded</div>
    <div>Total bounded : @context.TotalBonded</div>
    <div>: @context.SelfBonded</div>
    <div>Commission : @context.Commission</div>

    @if(context.SessionKey is not null)
    {
        <ul>
            @foreach(var sessionKey in context.SessionKey)
            {
                <li>[@sessionKey.KeyType] @sessionKey.Name = @sessionKey.Data</li>
            }
        </ul>
    }
    <div>Session Key: @context.SessionKey</div>
</DataMediator>

@code {
    [Parameter] public required string ValidatorAddress { get; set; }
    private Task<Result<ValidatorDto, ErrorResult>> request;
    private IEnumerable<BreadcrumbDto> breadcrumbDtos;

    protected async override Task OnInitializedAsync()
    {
        request = _mediator.Send(new ValidatorDetailQuery()
        {
            ValidatorAddress = ValidatorAddress
        }, CancellationToken.None);

        breadcrumbDtos = new List<BreadcrumbDto>()
        {
            new BreadcrumbDto("Validators", $"/validators"),
            new BreadcrumbDto("Validator detail", $"/validators/{ValidatorAddress}")
        };
    }
}
