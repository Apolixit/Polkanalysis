@using Polkanalysis.Domain.Contracts.Dto.Parachain;
@using Polkanalysis.Domain.Contracts.Dto.Staking.Pool;
@using Polkanalysis.Domain.Contracts.Primary.Staking.Pools;

@inject IMediator _mediator;
@inject NavigationManager _navigationManager;

@if (Parachains.Count() == 0)
{
    <div class="text-center">No data yet</div>
}
else
{
    @foreach (var parachain in Parachains)
    {
        <div class="col">
            <div class="card border h-100" @onclick="(() => GoToDetails(parachain.ParachainId))">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="bi bi-hash"></i>
                        @parachain.Name
                    </h5>
                    <p class="card-text text-end">
                        RegisterStatus = @parachain.RegisterStatus
                        ValidatorCount = @parachain.ValidatorCount
                        Lease = @parachain.Lease
                        CrowdloanId = @parachain.CrowdloanId
                    </p>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public IEnumerable<ParachainLightDto> Parachains { get; set; } = Enumerable.Empty<ParachainLightDto>();

    protected async override Task OnInitializedAsync()
    {

    }

    protected void GoToDetails(uint parachainId)
    {
        _navigationManager.NavigateTo($"parachains/{parachainId}");
    }
}
