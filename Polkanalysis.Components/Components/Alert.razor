<div class="alert alert-@TypeAlert.ToString().ToLower() text-white" role="alert">
    @if (!string.IsNullOrEmpty(Title))
    {
        <div class="row">
            <div class="col-12">
                <button type="button" class="btn btn-light btn-sm w-100" @onclick="(() => isVisible = !isVisible)">
                    <h5>
                        @if (DislayIcon)
                        {
                            <i class="@displayIcon() me-2"></i>
                        }
                        @Title
                    </h5>
                </button>
            </div>
        </div>
    }

    @if (isVisible)
    {
        <div class="row p-4" id="@Id">
            <div class="col-12">
                @ChildContent
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public AlertType TypeAlert { get; set; } = AlertType.Primary;
    [Parameter] public bool DislayIcon { get; set; } = true;
    [Parameter] public required RenderFragment ChildContent { get; set; }
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public bool OpenDefault { get; set; } = false;

    private bool isVisible { get; set; } = false;
    private Guid Id = Guid.NewGuid();

    protected override void OnInitialized()
    {
        isVisible = OpenDefault || string.IsNullOrEmpty(Title);
    }

    public enum AlertType
    {
        Primary,
        Success,
        Warning,
        Error
    }

    private string displayIcon()
    {
        return TypeAlert switch
        {
            AlertType.Primary => "bi bi-info-circle",
            AlertType.Success => "bi bi-hand-thumbs-up",
            AlertType.Warning => "bi bi-exclamation-triangle",
            _ => "bi bi-emoji-frown"
        };
    }
}
