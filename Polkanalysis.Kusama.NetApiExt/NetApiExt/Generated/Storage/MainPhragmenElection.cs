//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Polkanalysis.Kusama.NetApiExt.Generated.Storage
{
    
    
    public sealed class PhragmenElectionStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public PhragmenElectionStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PhragmenElection", "Members"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Polkanalysis.Kusama.NetApiExt.Generated.Model.pallet_elections_phragmen.SeatHolder>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PhragmenElection", "RunnersUp"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Polkanalysis.Kusama.NetApiExt.Generated.Model.pallet_elections_phragmen.SeatHolder>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PhragmenElection", "Candidates"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PhragmenElection", "ElectionRounds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("PhragmenElection", "Voting"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Polkanalysis.Kusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Polkanalysis.Kusama.NetApiExt.Generated.Model.pallet_elections_phragmen.Voter)));
        }
        
        /// <summary>
        /// >> MembersParams
        ///  The current elected members.
        /// 
        ///  Invariant: Always sorted based on account id.
        /// </summary>
        public static string MembersParams()
        {
            return RequestGenerator.GetStorage("PhragmenElection", "Members", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Members
        ///  The current elected members.
        /// 
        ///  Invariant: Always sorted based on account id.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Polkanalysis.Kusama.NetApiExt.Generated.Model.pallet_elections_phragmen.SeatHolder>> Members(CancellationToken token)
        {
            string parameters = PhragmenElectionStorage.MembersParams();
            return await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Polkanalysis.Kusama.NetApiExt.Generated.Model.pallet_elections_phragmen.SeatHolder>>(parameters, token);
        }
        
        /// <summary>
        /// >> RunnersUpParams
        ///  The current reserved runners-up.
        /// 
        ///  Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the
        ///  last (i.e. _best_) runner-up will be replaced.
        /// </summary>
        public static string RunnersUpParams()
        {
            return RequestGenerator.GetStorage("PhragmenElection", "RunnersUp", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RunnersUp
        ///  The current reserved runners-up.
        /// 
        ///  Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the
        ///  last (i.e. _best_) runner-up will be replaced.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Polkanalysis.Kusama.NetApiExt.Generated.Model.pallet_elections_phragmen.SeatHolder>> RunnersUp(CancellationToken token)
        {
            string parameters = PhragmenElectionStorage.RunnersUpParams();
            return await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Polkanalysis.Kusama.NetApiExt.Generated.Model.pallet_elections_phragmen.SeatHolder>>(parameters, token);
        }
        
        /// <summary>
        /// >> CandidatesParams
        ///  The present candidate list. A current member or runner-up can never enter this vector
        ///  and is always implicitly assumed to be a candidate.
        /// 
        ///  Second element is the deposit.
        /// 
        ///  Invariant: Always sorted based on account id.
        /// </summary>
        public static string CandidatesParams()
        {
            return RequestGenerator.GetStorage("PhragmenElection", "Candidates", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Candidates
        ///  The present candidate list. A current member or runner-up can never enter this vector
        ///  and is always implicitly assumed to be a candidate.
        /// 
        ///  Second element is the deposit.
        /// 
        ///  Invariant: Always sorted based on account id.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>> Candidates(CancellationToken token)
        {
            string parameters = PhragmenElectionStorage.CandidatesParams();
            return await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U128>>>(parameters, token);
        }
        
        /// <summary>
        /// >> ElectionRoundsParams
        ///  The total number of vote rounds that have happened, excluding the upcoming one.
        /// </summary>
        public static string ElectionRoundsParams()
        {
            return RequestGenerator.GetStorage("PhragmenElection", "ElectionRounds", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ElectionRounds
        ///  The total number of vote rounds that have happened, excluding the upcoming one.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ElectionRounds(CancellationToken token)
        {
            string parameters = PhragmenElectionStorage.ElectionRoundsParams();
            return await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> VotingParams
        ///  Votes and locked stake of a particular voter.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
        /// </summary>
        public static string VotingParams(Polkanalysis.Kusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("PhragmenElection", "Voting", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Voting
        ///  Votes and locked stake of a particular voter.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
        /// </summary>
        public async Task<Polkanalysis.Kusama.NetApiExt.Generated.Model.pallet_elections_phragmen.Voter> Voting(Polkanalysis.Kusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = PhragmenElectionStorage.VotingParams(key);
            return await _client.GetStorageAsync<Polkanalysis.Kusama.NetApiExt.Generated.Model.pallet_elections_phragmen.Voter>(parameters, token);
        }
    }
    
    public sealed class PhragmenElectionCalls
    {
        
        /// <summary>
        /// >> vote
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Vote(Substrate.NetApi.Model.Types.Base.BaseVec<Polkanalysis.Kusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> votes, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(votes.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(16, "PhragmenElection", 0, "vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_voter
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveVoter()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(16, "PhragmenElection", 1, "remove_voter", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> submit_candidacy
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SubmitCandidacy(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> candidate_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate_count.Encode());
            return new Method(16, "PhragmenElection", 2, "submit_candidacy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> renounce_candidacy
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RenounceCandidacy(Polkanalysis.Kusama.NetApiExt.Generated.Model.pallet_elections_phragmen.EnumRenouncing renouncing)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(renouncing.Encode());
            return new Method(16, "PhragmenElection", 3, "renounce_candidacy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_member
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveMember(Polkanalysis.Kusama.NetApiExt.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress who, Substrate.NetApi.Model.Types.Primitive.Bool slash_bond, Substrate.NetApi.Model.Types.Primitive.Bool rerun_election)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(slash_bond.Encode());
            byteArray.AddRange(rerun_election.Encode());
            return new Method(16, "PhragmenElection", 4, "remove_member", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clean_defunct_voters
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CleanDefunctVoters(Substrate.NetApi.Model.Types.Primitive.U32 num_voters, Substrate.NetApi.Model.Types.Primitive.U32 num_defunct)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(num_voters.Encode());
            byteArray.AddRange(num_defunct.Encode());
            return new Method(16, "PhragmenElection", 5, "clean_defunct_voters", byteArray.ToArray());
        }
    }
    
    public enum PhragmenElectionErrors
    {
        
        /// <summary>
        /// >> UnableToVote
        /// Cannot vote when no candidates or members exist.
        /// </summary>
        UnableToVote,
        
        /// <summary>
        /// >> NoVotes
        /// Must vote for at least one candidate.
        /// </summary>
        NoVotes,
        
        /// <summary>
        /// >> TooManyVotes
        /// Cannot vote more than candidates.
        /// </summary>
        TooManyVotes,
        
        /// <summary>
        /// >> MaximumVotesExceeded
        /// Cannot vote more than maximum allowed.
        /// </summary>
        MaximumVotesExceeded,
        
        /// <summary>
        /// >> LowBalance
        /// Cannot vote with stake less than minimum balance.
        /// </summary>
        LowBalance,
        
        /// <summary>
        /// >> UnableToPayBond
        /// Voter can not pay voting bond.
        /// </summary>
        UnableToPayBond,
        
        /// <summary>
        /// >> MustBeVoter
        /// Must be a voter.
        /// </summary>
        MustBeVoter,
        
        /// <summary>
        /// >> DuplicatedCandidate
        /// Duplicated candidate submission.
        /// </summary>
        DuplicatedCandidate,
        
        /// <summary>
        /// >> TooManyCandidates
        /// Too many candidates have been created.
        /// </summary>
        TooManyCandidates,
        
        /// <summary>
        /// >> MemberSubmit
        /// Member cannot re-submit candidacy.
        /// </summary>
        MemberSubmit,
        
        /// <summary>
        /// >> RunnerUpSubmit
        /// Runner cannot re-submit candidacy.
        /// </summary>
        RunnerUpSubmit,
        
        /// <summary>
        /// >> InsufficientCandidateFunds
        /// Candidate does not have enough funds.
        /// </summary>
        InsufficientCandidateFunds,
        
        /// <summary>
        /// >> NotMember
        /// Not a member.
        /// </summary>
        NotMember,
        
        /// <summary>
        /// >> InvalidWitnessData
        /// The provided count of number of candidates is incorrect.
        /// </summary>
        InvalidWitnessData,
        
        /// <summary>
        /// >> InvalidVoteCount
        /// The provided count of number of votes is incorrect.
        /// </summary>
        InvalidVoteCount,
        
        /// <summary>
        /// >> InvalidRenouncing
        /// The renouncing origin presented a wrong `Renouncing` parameter.
        /// </summary>
        InvalidRenouncing,
        
        /// <summary>
        /// >> InvalidReplacement
        /// Prediction regarding replacement after member removal is wrong.
        /// </summary>
        InvalidReplacement,
    }
}
