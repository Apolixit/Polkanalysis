using Microsoft.Extensions.Logging;
using NSubstitute;
using Polkanalysis.Domain.Contracts.Service;
using Polkanalysis.Domain.Runtime;
using Polkanalysis.Domain.Service;
using Polkanalysis.Domain.Tests.Abstract;
using Polkanalysis.Infrastructure.Blockchain.Contracts;
using Polkanalysis.Infrastructure.Blockchain.Contracts.Core.ExtrinsicTmp;
using Polkanalysis.Infrastructure.Blockchain.Contracts.Pallet.System.Enums;
using Polkanalysis.Infrastructure.Blockchain.Contracts.Runtime;
using Polkanalysis.Infrastructure.Blockchain.Contracts.Runtime.Mapping;
using Polkanalysis.Infrastructure.Blockchain.Contracts.Runtime.Module;
using Polkanalysis.Infrastructure.Blockchain.Runtime;
using Substrate.NET.Metadata.Service;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Primitive;

namespace Polkanalysis.Domain.Tests.Service.Block
{
    public class ExplorerEventsTests : DomainTestAbstract
    {
        protected IExplorerService _explorerService;
        protected ISubstrateService _substrateService;
        protected ISubstrateDecoding _substrateDecoding;
        public ExplorerEventsTests() {
            _substrateService = Substitute.For<ISubstrateService>();
            _substrateDecoding = new SubstrateDecoding(Substitute.For<INodeMapping>(),
                                                       _substrateService,
                                                       Substitute.For<IPalletBuilder>(),
                                                       Substitute.For<ILogger<SubstrateDecoding>>());

            _explorerService = new ExplorerService(_substrateService,
                                                   _substrateDecoding,
                                                   Substitute.For<IAccountService>(),
                                                   Substitute.For<ILogger<ExplorerService>>(), 
                                                   Substitute.For<ICoreService>());
        }

        /// <summary>
        /// Polkadot, block number = 14000000 (hash : 0xca4fd82b8c8aa20def36a4d895b2ceb245532e3be4324a8fddef676596cabc8e)
        /// Events.TakeAndEncode(3)
        /// </summary>
        /// <param name="eventHex"></param>
        /// <returns></returns>
        [Test]
        //[TestCase("0x080210082DF3BC5411EFA7040000000000000000C2CA026411EFA70400000000000000000000000000000000620B433D5517020000")]
        [TestCase("0x
        public async Task ValidEvent_ShouldReturnDtoAsync(string eventHex)
        {
            var blockHash = "0xca4fd82b8c8aa20def36a4d895b2ceb245532e3be4324a8fddef676596cabc8e";

            var eventMock = new BaseVec<EventRecord>();
            eventMock.Create(eventHex);
            _substrateService.At(Arg.Any<Hash>()).Storage.System.EventsAsync(CancellationToken.None).Returns(eventMock);

            _substrateService.At(Arg.Any<Hash>()).GetMetadataAsync(CancellationToken.None).Returns(Substrate.NET.Utils.Core.MetadataHelper.GetMetadataFromHex(MockMetadata1));

            _substrateService.Rpc.Chain.GetBlockAsync(Arg.Any<Hash>(), CancellationToken.None).Returns(
                new TempOldBlockData(
                    new TempOldBlock() { 
                        Header = new Substrate.NetApi.Model.Rpc.Header() { 
                            Number = new U64(1_000_000) 
                        } 
                    }, null)
                );

            var dto = await _explorerService.GetEventsAsync(blockHash, CancellationToken.None);

            Assert.That(dto.Count, Is.EqualTo(3));
        }
    }
}
