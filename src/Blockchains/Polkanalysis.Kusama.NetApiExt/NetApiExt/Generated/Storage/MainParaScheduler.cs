//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading.Tasks;
using Substrate.NetApi.Model.Meta;
using System.Threading;
using Substrate.NetApi;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Extrinsics;

namespace Polkanalysis.Kusama.NetApiExt.Generated.Storage
{
    public sealed class ParaSchedulerStorage
    {
        /// <summary>
        /// Substrate client for the storage calls.
        /// </summary>
        private SubstrateClientExt _client;
        public string blockHash { get; set; } = null;

        public async Task<uint> GetVersionAsync(CancellationToken token)
        {
            var result = await _client.State.GetRuntimeVersionAtAsync(blockHash, token);
            return result.SpecVersion;
        }

        /// <summary>
        /// Storage for SpecVersion 9430
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage _paraSchedulerStorageV9430;
        /// <summary>
        /// Storage for SpecVersion 9420
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage _paraSchedulerStorageV9420;
        /// <summary>
        /// Storage for SpecVersion 9381
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage _paraSchedulerStorageV9381;
        /// <summary>
        /// Storage for SpecVersion 9370
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage _paraSchedulerStorageV9370;
        /// <summary>
        /// Storage for SpecVersion 9360
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage _paraSchedulerStorageV9360;
        /// <summary>
        /// Storage for SpecVersion 9350
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage _paraSchedulerStorageV9350;
        /// <summary>
        /// Storage for SpecVersion 9340
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage _paraSchedulerStorageV9340;
        /// <summary>
        /// Storage for SpecVersion 9320
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage _paraSchedulerStorageV9320;
        /// <summary>
        /// Storage for SpecVersion 9300
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage _paraSchedulerStorageV9300;
        /// <summary>
        /// Storage for SpecVersion 9291
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage _paraSchedulerStorageV9291;
        /// <summary>
        /// Storage for SpecVersion 9280
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage _paraSchedulerStorageV9280;
        /// <summary>
        /// Storage for SpecVersion 9271
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage _paraSchedulerStorageV9271;
        /// <summary>
        /// Storage for SpecVersion 9260
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage _paraSchedulerStorageV9260;
        /// <summary>
        /// Storage for SpecVersion 9250
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage _paraSchedulerStorageV9250;
        /// <summary>
        /// Storage for SpecVersion 9230
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage _paraSchedulerStorageV9230;
        /// <summary>
        /// Storage for SpecVersion 9220
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage _paraSchedulerStorageV9220;
        /// <summary>
        /// Storage for SpecVersion 9200
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage _paraSchedulerStorageV9200;
        /// <summary>
        /// Storage for SpecVersion 9190
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage _paraSchedulerStorageV9190;
        /// <summary>
        /// Storage for SpecVersion 9180
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage _paraSchedulerStorageV9180;
        /// <summary>
        /// Storage for SpecVersion 9170
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage _paraSchedulerStorageV9170;
        /// <summary>
        /// Storage for SpecVersion 9160
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage _paraSchedulerStorageV9160;
        /// <summary>
        /// Storage for SpecVersion 9151
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage _paraSchedulerStorageV9151;
        /// <summary>
        /// Storage for SpecVersion 9150
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage _paraSchedulerStorageV9150;
        /// <summary>
        /// Storage for SpecVersion 9130
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage _paraSchedulerStorageV9130;
        /// <summary>
        /// Storage for SpecVersion 9122
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage _paraSchedulerStorageV9122;
        /// <summary>
        /// Storage for SpecVersion 9111
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage _paraSchedulerStorageV9111;
        /// <summary>
        /// >> ValidatorGroupsParams
        ///  All the validator groups. One for each core. Indices are into `ActiveValidators` - not the
        ///  broader set of Polkadot validators, but instead just the subset used for parachains during
        ///  this session.
        /// 
        ///  Bound: The number of cores is the sum of the numbers of parachains and parathread multiplexers.
        ///  Reasonably, 100-1000. The dominant factor is the number of validators: safe upper bound at 10k.
        /// </summary>
        public static string ValidatorGroupsParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage.ValidatorGroupsParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage.ValidatorGroupsParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ValidatorGroupsDefault
        /// Default value as hex string
        /// </summary>
        public static string ValidatorGroupsDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage.ValidatorGroupsDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ValidatorGroups
        ///  All the validator groups. One for each core. Indices are into `ActiveValidators` - not the
        ///  broader set of Polkadot validators, but instead just the subset used for parachains during
        ///  this session.
        /// 
        ///  Bound: The number of cores is the sum of the numbers of parachains and parathread multiplexers.
        ///  Reasonably, 100-1000. The dominant factor is the number of validators: safe upper bound at 10k.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> ValidatorGroupsAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9430U)
            {
                _paraSchedulerStorageV9430.blockHash = blockHash;
                param = await _paraSchedulerStorageV9430.ValidatorGroups(token);
            }

            if (version == 9420U)
            {
                _paraSchedulerStorageV9420.blockHash = blockHash;
                param = await _paraSchedulerStorageV9420.ValidatorGroups(token);
            }

            if (version == 9381U)
            {
                _paraSchedulerStorageV9381.blockHash = blockHash;
                param = await _paraSchedulerStorageV9381.ValidatorGroups(token);
            }

            if (version == 9370U)
            {
                _paraSchedulerStorageV9370.blockHash = blockHash;
                param = await _paraSchedulerStorageV9370.ValidatorGroups(token);
            }

            if (version == 9360U)
            {
                _paraSchedulerStorageV9360.blockHash = blockHash;
                param = await _paraSchedulerStorageV9360.ValidatorGroups(token);
            }

            if (version == 9350U)
            {
                _paraSchedulerStorageV9350.blockHash = blockHash;
                param = await _paraSchedulerStorageV9350.ValidatorGroups(token);
            }

            if (version == 9340U)
            {
                _paraSchedulerStorageV9340.blockHash = blockHash;
                param = await _paraSchedulerStorageV9340.ValidatorGroups(token);
            }

            if (version == 9320U)
            {
                _paraSchedulerStorageV9320.blockHash = blockHash;
                param = await _paraSchedulerStorageV9320.ValidatorGroups(token);
            }

            if (version == 9300U)
            {
                _paraSchedulerStorageV9300.blockHash = blockHash;
                param = await _paraSchedulerStorageV9300.ValidatorGroups(token);
            }

            if (version == 9291U)
            {
                _paraSchedulerStorageV9291.blockHash = blockHash;
                param = await _paraSchedulerStorageV9291.ValidatorGroups(token);
            }

            if (version == 9280U)
            {
                _paraSchedulerStorageV9280.blockHash = blockHash;
                param = await _paraSchedulerStorageV9280.ValidatorGroups(token);
            }

            if (version == 9271U)
            {
                _paraSchedulerStorageV9271.blockHash = blockHash;
                param = await _paraSchedulerStorageV9271.ValidatorGroups(token);
            }

            if (version == 9260U)
            {
                _paraSchedulerStorageV9260.blockHash = blockHash;
                param = await _paraSchedulerStorageV9260.ValidatorGroups(token);
            }

            if (version == 9250U)
            {
                _paraSchedulerStorageV9250.blockHash = blockHash;
                param = await _paraSchedulerStorageV9250.ValidatorGroups(token);
            }

            if (version == 9230U)
            {
                _paraSchedulerStorageV9230.blockHash = blockHash;
                param = await _paraSchedulerStorageV9230.ValidatorGroups(token);
            }

            if (version == 9220U)
            {
                _paraSchedulerStorageV9220.blockHash = blockHash;
                param = await _paraSchedulerStorageV9220.ValidatorGroups(token);
            }

            if (version == 9200U)
            {
                _paraSchedulerStorageV9200.blockHash = blockHash;
                param = await _paraSchedulerStorageV9200.ValidatorGroups(token);
            }

            if (version == 9190U)
            {
                _paraSchedulerStorageV9190.blockHash = blockHash;
                param = await _paraSchedulerStorageV9190.ValidatorGroups(token);
            }

            if (version == 9180U)
            {
                _paraSchedulerStorageV9180.blockHash = blockHash;
                param = await _paraSchedulerStorageV9180.ValidatorGroups(token);
            }

            if (version == 9170U)
            {
                _paraSchedulerStorageV9170.blockHash = blockHash;
                param = await _paraSchedulerStorageV9170.ValidatorGroups(token);
            }

            if (version == 9160U)
            {
                _paraSchedulerStorageV9160.blockHash = blockHash;
                param = await _paraSchedulerStorageV9160.ValidatorGroups(token);
            }

            if (version == 9151U)
            {
                _paraSchedulerStorageV9151.blockHash = blockHash;
                param = await _paraSchedulerStorageV9151.ValidatorGroups(token);
            }

            if (version == 9150U)
            {
                _paraSchedulerStorageV9150.blockHash = blockHash;
                param = await _paraSchedulerStorageV9150.ValidatorGroups(token);
            }

            if (version == 9130U)
            {
                _paraSchedulerStorageV9130.blockHash = blockHash;
                param = await _paraSchedulerStorageV9130.ValidatorGroups(token);
            }

            if (version == 9122U)
            {
                _paraSchedulerStorageV9122.blockHash = blockHash;
                param = await _paraSchedulerStorageV9122.ValidatorGroups(token);
            }

            if (version == 9111U)
            {
                _paraSchedulerStorageV9111.blockHash = blockHash;
                param = await _paraSchedulerStorageV9111.ValidatorGroups(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ParathreadQueueParams
        ///  A queue of upcoming claims and which core they should be mapped onto.
        /// 
        ///  The number of queued claims is bounded at the `scheduling_lookahead`
        ///  multiplied by the number of parathread multiplexer cores. Reasonably, 10 * 50 = 500.
        /// </summary>
        public static string ParathreadQueueParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage.ParathreadQueueParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage.ParathreadQueueParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ParathreadQueueDefault
        /// Default value as hex string
        /// </summary>
        public static string ParathreadQueueDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage.ParathreadQueueDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage.ParathreadQueueDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ParathreadQueue
        ///  A queue of upcoming claims and which core they should be mapped onto.
        /// 
        ///  The number of queued claims is bounded at the `scheduling_lookahead`
        ///  multiplied by the number of parathread multiplexer cores. Reasonably, 10 * 50 = 500.
        /// </summary>
        public async Task<Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.polkadot_runtime_parachains.scheduler.ParathreadClaimQueueBase> ParathreadQueueAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.polkadot_runtime_parachains.scheduler.ParathreadClaimQueueBase param = null;
            if (version == 9430U)
            {
                _paraSchedulerStorageV9430.blockHash = blockHash;
                param = await _paraSchedulerStorageV9430.ParathreadQueue(token);
            }

            if (version == 9420U)
            {
                _paraSchedulerStorageV9420.blockHash = blockHash;
                param = await _paraSchedulerStorageV9420.ParathreadQueue(token);
            }

            if (version == 9381U)
            {
                _paraSchedulerStorageV9381.blockHash = blockHash;
                param = await _paraSchedulerStorageV9381.ParathreadQueue(token);
            }

            if (version == 9370U)
            {
                _paraSchedulerStorageV9370.blockHash = blockHash;
                param = await _paraSchedulerStorageV9370.ParathreadQueue(token);
            }

            if (version == 9360U)
            {
                _paraSchedulerStorageV9360.blockHash = blockHash;
                param = await _paraSchedulerStorageV9360.ParathreadQueue(token);
            }

            if (version == 9350U)
            {
                _paraSchedulerStorageV9350.blockHash = blockHash;
                param = await _paraSchedulerStorageV9350.ParathreadQueue(token);
            }

            if (version == 9340U)
            {
                _paraSchedulerStorageV9340.blockHash = blockHash;
                param = await _paraSchedulerStorageV9340.ParathreadQueue(token);
            }

            if (version == 9320U)
            {
                _paraSchedulerStorageV9320.blockHash = blockHash;
                param = await _paraSchedulerStorageV9320.ParathreadQueue(token);
            }

            if (version == 9300U)
            {
                _paraSchedulerStorageV9300.blockHash = blockHash;
                param = await _paraSchedulerStorageV9300.ParathreadQueue(token);
            }

            if (version == 9291U)
            {
                _paraSchedulerStorageV9291.blockHash = blockHash;
                param = await _paraSchedulerStorageV9291.ParathreadQueue(token);
            }

            if (version == 9280U)
            {
                _paraSchedulerStorageV9280.blockHash = blockHash;
                param = await _paraSchedulerStorageV9280.ParathreadQueue(token);
            }

            if (version == 9271U)
            {
                _paraSchedulerStorageV9271.blockHash = blockHash;
                param = await _paraSchedulerStorageV9271.ParathreadQueue(token);
            }

            if (version == 9260U)
            {
                _paraSchedulerStorageV9260.blockHash = blockHash;
                param = await _paraSchedulerStorageV9260.ParathreadQueue(token);
            }

            if (version == 9250U)
            {
                _paraSchedulerStorageV9250.blockHash = blockHash;
                param = await _paraSchedulerStorageV9250.ParathreadQueue(token);
            }

            if (version == 9230U)
            {
                _paraSchedulerStorageV9230.blockHash = blockHash;
                param = await _paraSchedulerStorageV9230.ParathreadQueue(token);
            }

            if (version == 9220U)
            {
                _paraSchedulerStorageV9220.blockHash = blockHash;
                param = await _paraSchedulerStorageV9220.ParathreadQueue(token);
            }

            if (version == 9200U)
            {
                _paraSchedulerStorageV9200.blockHash = blockHash;
                param = await _paraSchedulerStorageV9200.ParathreadQueue(token);
            }

            if (version == 9190U)
            {
                _paraSchedulerStorageV9190.blockHash = blockHash;
                param = await _paraSchedulerStorageV9190.ParathreadQueue(token);
            }

            if (version == 9180U)
            {
                _paraSchedulerStorageV9180.blockHash = blockHash;
                param = await _paraSchedulerStorageV9180.ParathreadQueue(token);
            }

            if (version == 9170U)
            {
                _paraSchedulerStorageV9170.blockHash = blockHash;
                param = await _paraSchedulerStorageV9170.ParathreadQueue(token);
            }

            if (version == 9160U)
            {
                _paraSchedulerStorageV9160.blockHash = blockHash;
                param = await _paraSchedulerStorageV9160.ParathreadQueue(token);
            }

            if (version == 9151U)
            {
                _paraSchedulerStorageV9151.blockHash = blockHash;
                param = await _paraSchedulerStorageV9151.ParathreadQueue(token);
            }

            if (version == 9150U)
            {
                _paraSchedulerStorageV9150.blockHash = blockHash;
                param = await _paraSchedulerStorageV9150.ParathreadQueue(token);
            }

            if (version == 9130U)
            {
                _paraSchedulerStorageV9130.blockHash = blockHash;
                param = await _paraSchedulerStorageV9130.ParathreadQueue(token);
            }

            if (version == 9122U)
            {
                _paraSchedulerStorageV9122.blockHash = blockHash;
                param = await _paraSchedulerStorageV9122.ParathreadQueue(token);
            }

            if (version == 9111U)
            {
                _paraSchedulerStorageV9111.blockHash = blockHash;
                param = await _paraSchedulerStorageV9111.ParathreadQueue(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> AvailabilityCoresParams
        ///  One entry for each availability core. Entries are `None` if the core is not currently occupied. Can be
        ///  temporarily `Some` if scheduled but not occupied.
        ///  The i'th parachain belongs to the i'th core, with the remaining cores all being
        ///  parathread-multiplexers.
        /// 
        ///  Bounded by the maximum of either of these two values:
        ///    * The number of parachains and parathread multiplexers
        ///    * The number of validators divided by `configuration.max_validators_per_core`.
        /// </summary>
        public static string AvailabilityCoresParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage.AvailabilityCoresParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage.AvailabilityCoresParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> AvailabilityCoresDefault
        /// Default value as hex string
        /// </summary>
        public static string AvailabilityCoresDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage.AvailabilityCoresDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> AvailabilityCores
        ///  One entry for each availability core. Entries are `None` if the core is not currently occupied. Can be
        ///  temporarily `Some` if scheduled but not occupied.
        ///  The i'th parachain belongs to the i'th core, with the remaining cores all being
        ///  parathread-multiplexers.
        /// 
        ///  Bounded by the maximum of either of these two values:
        ///    * The number of parachains and parathread multiplexers
        ///    * The number of validators divided by `configuration.max_validators_per_core`.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> AvailabilityCoresAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9430U)
            {
                _paraSchedulerStorageV9430.blockHash = blockHash;
                param = await _paraSchedulerStorageV9430.AvailabilityCores(token);
            }

            if (version == 9420U)
            {
                _paraSchedulerStorageV9420.blockHash = blockHash;
                param = await _paraSchedulerStorageV9420.AvailabilityCores(token);
            }

            if (version == 9381U)
            {
                _paraSchedulerStorageV9381.blockHash = blockHash;
                param = await _paraSchedulerStorageV9381.AvailabilityCores(token);
            }

            if (version == 9370U)
            {
                _paraSchedulerStorageV9370.blockHash = blockHash;
                param = await _paraSchedulerStorageV9370.AvailabilityCores(token);
            }

            if (version == 9360U)
            {
                _paraSchedulerStorageV9360.blockHash = blockHash;
                param = await _paraSchedulerStorageV9360.AvailabilityCores(token);
            }

            if (version == 9350U)
            {
                _paraSchedulerStorageV9350.blockHash = blockHash;
                param = await _paraSchedulerStorageV9350.AvailabilityCores(token);
            }

            if (version == 9340U)
            {
                _paraSchedulerStorageV9340.blockHash = blockHash;
                param = await _paraSchedulerStorageV9340.AvailabilityCores(token);
            }

            if (version == 9320U)
            {
                _paraSchedulerStorageV9320.blockHash = blockHash;
                param = await _paraSchedulerStorageV9320.AvailabilityCores(token);
            }

            if (version == 9300U)
            {
                _paraSchedulerStorageV9300.blockHash = blockHash;
                param = await _paraSchedulerStorageV9300.AvailabilityCores(token);
            }

            if (version == 9291U)
            {
                _paraSchedulerStorageV9291.blockHash = blockHash;
                param = await _paraSchedulerStorageV9291.AvailabilityCores(token);
            }

            if (version == 9280U)
            {
                _paraSchedulerStorageV9280.blockHash = blockHash;
                param = await _paraSchedulerStorageV9280.AvailabilityCores(token);
            }

            if (version == 9271U)
            {
                _paraSchedulerStorageV9271.blockHash = blockHash;
                param = await _paraSchedulerStorageV9271.AvailabilityCores(token);
            }

            if (version == 9260U)
            {
                _paraSchedulerStorageV9260.blockHash = blockHash;
                param = await _paraSchedulerStorageV9260.AvailabilityCores(token);
            }

            if (version == 9250U)
            {
                _paraSchedulerStorageV9250.blockHash = blockHash;
                param = await _paraSchedulerStorageV9250.AvailabilityCores(token);
            }

            if (version == 9230U)
            {
                _paraSchedulerStorageV9230.blockHash = blockHash;
                param = await _paraSchedulerStorageV9230.AvailabilityCores(token);
            }

            if (version == 9220U)
            {
                _paraSchedulerStorageV9220.blockHash = blockHash;
                param = await _paraSchedulerStorageV9220.AvailabilityCores(token);
            }

            if (version == 9200U)
            {
                _paraSchedulerStorageV9200.blockHash = blockHash;
                param = await _paraSchedulerStorageV9200.AvailabilityCores(token);
            }

            if (version == 9190U)
            {
                _paraSchedulerStorageV9190.blockHash = blockHash;
                param = await _paraSchedulerStorageV9190.AvailabilityCores(token);
            }

            if (version == 9180U)
            {
                _paraSchedulerStorageV9180.blockHash = blockHash;
                param = await _paraSchedulerStorageV9180.AvailabilityCores(token);
            }

            if (version == 9170U)
            {
                _paraSchedulerStorageV9170.blockHash = blockHash;
                param = await _paraSchedulerStorageV9170.AvailabilityCores(token);
            }

            if (version == 9160U)
            {
                _paraSchedulerStorageV9160.blockHash = blockHash;
                param = await _paraSchedulerStorageV9160.AvailabilityCores(token);
            }

            if (version == 9151U)
            {
                _paraSchedulerStorageV9151.blockHash = blockHash;
                param = await _paraSchedulerStorageV9151.AvailabilityCores(token);
            }

            if (version == 9150U)
            {
                _paraSchedulerStorageV9150.blockHash = blockHash;
                param = await _paraSchedulerStorageV9150.AvailabilityCores(token);
            }

            if (version == 9130U)
            {
                _paraSchedulerStorageV9130.blockHash = blockHash;
                param = await _paraSchedulerStorageV9130.AvailabilityCores(token);
            }

            if (version == 9122U)
            {
                _paraSchedulerStorageV9122.blockHash = blockHash;
                param = await _paraSchedulerStorageV9122.AvailabilityCores(token);
            }

            if (version == 9111U)
            {
                _paraSchedulerStorageV9111.blockHash = blockHash;
                param = await _paraSchedulerStorageV9111.AvailabilityCores(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ParathreadClaimIndexParams
        ///  An index used to ensure that only one claim on a parathread exists in the queue or is
        ///  currently being handled by an occupied core.
        /// 
        ///  Bounded by the number of parathread cores and scheduling lookahead. Reasonably, 10 * 50 = 500.
        /// </summary>
        public static string ParathreadClaimIndexParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage.ParathreadClaimIndexParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ParathreadClaimIndexDefault
        /// Default value as hex string
        /// </summary>
        public static string ParathreadClaimIndexDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage.ParathreadClaimIndexDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ParathreadClaimIndex
        ///  An index used to ensure that only one claim on a parathread exists in the queue or is
        ///  currently being handled by an occupied core.
        /// 
        ///  Bounded by the number of parathread cores and scheduling lookahead. Reasonably, 10 * 50 = 500.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> ParathreadClaimIndexAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9430U)
            {
                _paraSchedulerStorageV9430.blockHash = blockHash;
                param = await _paraSchedulerStorageV9430.ParathreadClaimIndex(token);
            }

            if (version == 9420U)
            {
                _paraSchedulerStorageV9420.blockHash = blockHash;
                param = await _paraSchedulerStorageV9420.ParathreadClaimIndex(token);
            }

            if (version == 9381U)
            {
                _paraSchedulerStorageV9381.blockHash = blockHash;
                param = await _paraSchedulerStorageV9381.ParathreadClaimIndex(token);
            }

            if (version == 9370U)
            {
                _paraSchedulerStorageV9370.blockHash = blockHash;
                param = await _paraSchedulerStorageV9370.ParathreadClaimIndex(token);
            }

            if (version == 9360U)
            {
                _paraSchedulerStorageV9360.blockHash = blockHash;
                param = await _paraSchedulerStorageV9360.ParathreadClaimIndex(token);
            }

            if (version == 9350U)
            {
                _paraSchedulerStorageV9350.blockHash = blockHash;
                param = await _paraSchedulerStorageV9350.ParathreadClaimIndex(token);
            }

            if (version == 9340U)
            {
                _paraSchedulerStorageV9340.blockHash = blockHash;
                param = await _paraSchedulerStorageV9340.ParathreadClaimIndex(token);
            }

            if (version == 9320U)
            {
                _paraSchedulerStorageV9320.blockHash = blockHash;
                param = await _paraSchedulerStorageV9320.ParathreadClaimIndex(token);
            }

            if (version == 9300U)
            {
                _paraSchedulerStorageV9300.blockHash = blockHash;
                param = await _paraSchedulerStorageV9300.ParathreadClaimIndex(token);
            }

            if (version == 9291U)
            {
                _paraSchedulerStorageV9291.blockHash = blockHash;
                param = await _paraSchedulerStorageV9291.ParathreadClaimIndex(token);
            }

            if (version == 9280U)
            {
                _paraSchedulerStorageV9280.blockHash = blockHash;
                param = await _paraSchedulerStorageV9280.ParathreadClaimIndex(token);
            }

            if (version == 9271U)
            {
                _paraSchedulerStorageV9271.blockHash = blockHash;
                param = await _paraSchedulerStorageV9271.ParathreadClaimIndex(token);
            }

            if (version == 9260U)
            {
                _paraSchedulerStorageV9260.blockHash = blockHash;
                param = await _paraSchedulerStorageV9260.ParathreadClaimIndex(token);
            }

            if (version == 9250U)
            {
                _paraSchedulerStorageV9250.blockHash = blockHash;
                param = await _paraSchedulerStorageV9250.ParathreadClaimIndex(token);
            }

            if (version == 9230U)
            {
                _paraSchedulerStorageV9230.blockHash = blockHash;
                param = await _paraSchedulerStorageV9230.ParathreadClaimIndex(token);
            }

            if (version == 9220U)
            {
                _paraSchedulerStorageV9220.blockHash = blockHash;
                param = await _paraSchedulerStorageV9220.ParathreadClaimIndex(token);
            }

            if (version == 9200U)
            {
                _paraSchedulerStorageV9200.blockHash = blockHash;
                param = await _paraSchedulerStorageV9200.ParathreadClaimIndex(token);
            }

            if (version == 9190U)
            {
                _paraSchedulerStorageV9190.blockHash = blockHash;
                param = await _paraSchedulerStorageV9190.ParathreadClaimIndex(token);
            }

            if (version == 9180U)
            {
                _paraSchedulerStorageV9180.blockHash = blockHash;
                param = await _paraSchedulerStorageV9180.ParathreadClaimIndex(token);
            }

            if (version == 9170U)
            {
                _paraSchedulerStorageV9170.blockHash = blockHash;
                param = await _paraSchedulerStorageV9170.ParathreadClaimIndex(token);
            }

            if (version == 9160U)
            {
                _paraSchedulerStorageV9160.blockHash = blockHash;
                param = await _paraSchedulerStorageV9160.ParathreadClaimIndex(token);
            }

            if (version == 9151U)
            {
                _paraSchedulerStorageV9151.blockHash = blockHash;
                param = await _paraSchedulerStorageV9151.ParathreadClaimIndex(token);
            }

            if (version == 9150U)
            {
                _paraSchedulerStorageV9150.blockHash = blockHash;
                param = await _paraSchedulerStorageV9150.ParathreadClaimIndex(token);
            }

            if (version == 9130U)
            {
                _paraSchedulerStorageV9130.blockHash = blockHash;
                param = await _paraSchedulerStorageV9130.ParathreadClaimIndex(token);
            }

            if (version == 9122U)
            {
                _paraSchedulerStorageV9122.blockHash = blockHash;
                param = await _paraSchedulerStorageV9122.ParathreadClaimIndex(token);
            }

            if (version == 9111U)
            {
                _paraSchedulerStorageV9111.blockHash = blockHash;
                param = await _paraSchedulerStorageV9111.ParathreadClaimIndex(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SessionStartBlockParams
        ///  The block number where the session start occurred. Used to track how many group rotations have occurred.
        /// 
        ///  Note that in the context of parachains modules the session change is signaled during
        ///  the block and enacted at the end of the block (at the finalization stage, to be exact).
        ///  Thus for all intents and purposes the effect of the session change is observed at the
        ///  block following the session change, block number of which we save in this storage value.
        /// </summary>
        public static string SessionStartBlockParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage.SessionStartBlockParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage.SessionStartBlockParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SessionStartBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string SessionStartBlockDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage.SessionStartBlockDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage.SessionStartBlockDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SessionStartBlock
        ///  The block number where the session start occurred. Used to track how many group rotations have occurred.
        /// 
        ///  Note that in the context of parachains modules the session change is signaled during
        ///  the block and enacted at the end of the block (at the finalization stage, to be exact).
        ///  Thus for all intents and purposes the effect of the session change is observed at the
        ///  block following the session change, block number of which we save in this storage value.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> SessionStartBlockAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9430U)
            {
                _paraSchedulerStorageV9430.blockHash = blockHash;
                param = await _paraSchedulerStorageV9430.SessionStartBlock(token);
            }

            if (version == 9420U)
            {
                _paraSchedulerStorageV9420.blockHash = blockHash;
                param = await _paraSchedulerStorageV9420.SessionStartBlock(token);
            }

            if (version == 9381U)
            {
                _paraSchedulerStorageV9381.blockHash = blockHash;
                param = await _paraSchedulerStorageV9381.SessionStartBlock(token);
            }

            if (version == 9370U)
            {
                _paraSchedulerStorageV9370.blockHash = blockHash;
                param = await _paraSchedulerStorageV9370.SessionStartBlock(token);
            }

            if (version == 9360U)
            {
                _paraSchedulerStorageV9360.blockHash = blockHash;
                param = await _paraSchedulerStorageV9360.SessionStartBlock(token);
            }

            if (version == 9350U)
            {
                _paraSchedulerStorageV9350.blockHash = blockHash;
                param = await _paraSchedulerStorageV9350.SessionStartBlock(token);
            }

            if (version == 9340U)
            {
                _paraSchedulerStorageV9340.blockHash = blockHash;
                param = await _paraSchedulerStorageV9340.SessionStartBlock(token);
            }

            if (version == 9320U)
            {
                _paraSchedulerStorageV9320.blockHash = blockHash;
                param = await _paraSchedulerStorageV9320.SessionStartBlock(token);
            }

            if (version == 9300U)
            {
                _paraSchedulerStorageV9300.blockHash = blockHash;
                param = await _paraSchedulerStorageV9300.SessionStartBlock(token);
            }

            if (version == 9291U)
            {
                _paraSchedulerStorageV9291.blockHash = blockHash;
                param = await _paraSchedulerStorageV9291.SessionStartBlock(token);
            }

            if (version == 9280U)
            {
                _paraSchedulerStorageV9280.blockHash = blockHash;
                param = await _paraSchedulerStorageV9280.SessionStartBlock(token);
            }

            if (version == 9271U)
            {
                _paraSchedulerStorageV9271.blockHash = blockHash;
                param = await _paraSchedulerStorageV9271.SessionStartBlock(token);
            }

            if (version == 9260U)
            {
                _paraSchedulerStorageV9260.blockHash = blockHash;
                param = await _paraSchedulerStorageV9260.SessionStartBlock(token);
            }

            if (version == 9250U)
            {
                _paraSchedulerStorageV9250.blockHash = blockHash;
                param = await _paraSchedulerStorageV9250.SessionStartBlock(token);
            }

            if (version == 9230U)
            {
                _paraSchedulerStorageV9230.blockHash = blockHash;
                param = await _paraSchedulerStorageV9230.SessionStartBlock(token);
            }

            if (version == 9220U)
            {
                _paraSchedulerStorageV9220.blockHash = blockHash;
                param = await _paraSchedulerStorageV9220.SessionStartBlock(token);
            }

            if (version == 9200U)
            {
                _paraSchedulerStorageV9200.blockHash = blockHash;
                param = await _paraSchedulerStorageV9200.SessionStartBlock(token);
            }

            if (version == 9190U)
            {
                _paraSchedulerStorageV9190.blockHash = blockHash;
                param = await _paraSchedulerStorageV9190.SessionStartBlock(token);
            }

            if (version == 9180U)
            {
                _paraSchedulerStorageV9180.blockHash = blockHash;
                param = await _paraSchedulerStorageV9180.SessionStartBlock(token);
            }

            if (version == 9170U)
            {
                _paraSchedulerStorageV9170.blockHash = blockHash;
                param = await _paraSchedulerStorageV9170.SessionStartBlock(token);
            }

            if (version == 9160U)
            {
                _paraSchedulerStorageV9160.blockHash = blockHash;
                param = await _paraSchedulerStorageV9160.SessionStartBlock(token);
            }

            if (version == 9151U)
            {
                _paraSchedulerStorageV9151.blockHash = blockHash;
                param = await _paraSchedulerStorageV9151.SessionStartBlock(token);
            }

            if (version == 9150U)
            {
                _paraSchedulerStorageV9150.blockHash = blockHash;
                param = await _paraSchedulerStorageV9150.SessionStartBlock(token);
            }

            if (version == 9130U)
            {
                _paraSchedulerStorageV9130.blockHash = blockHash;
                param = await _paraSchedulerStorageV9130.SessionStartBlock(token);
            }

            if (version == 9122U)
            {
                _paraSchedulerStorageV9122.blockHash = blockHash;
                param = await _paraSchedulerStorageV9122.SessionStartBlock(token);
            }

            if (version == 9111U)
            {
                _paraSchedulerStorageV9111.blockHash = blockHash;
                param = await _paraSchedulerStorageV9111.SessionStartBlock(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ScheduledParams
        ///  Currently scheduled cores - free but up to be occupied.
        /// 
        ///  Bounded by the number of cores: one for each parachain and parathread multiplexer.
        /// 
        ///  The value contained here will not be valid after the end of a block. Runtime APIs should be used to determine scheduled cores/
        ///  for the upcoming block.
        /// </summary>
        public static string ScheduledParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage.ScheduledParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage.ScheduledParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage.ScheduledParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage.ScheduledParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage.ScheduledParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage.ScheduledParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage.ScheduledParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage.ScheduledParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage.ScheduledParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage.ScheduledParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage.ScheduledParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage.ScheduledParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage.ScheduledParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage.ScheduledParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage.ScheduledParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage.ScheduledParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage.ScheduledParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage.ScheduledParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage.ScheduledParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage.ScheduledParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage.ScheduledParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage.ScheduledParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage.ScheduledParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage.ScheduledParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage.ScheduledParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage.ScheduledParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ScheduledDefault
        /// Default value as hex string
        /// </summary>
        public static string ScheduledDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage.ScheduledDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage.ScheduledDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Scheduled
        ///  Currently scheduled cores - free but up to be occupied.
        /// 
        ///  Bounded by the number of cores: one for each parachain and parathread multiplexer.
        /// 
        ///  The value contained here will not be valid after the end of a block. Runtime APIs should be used to determine scheduled cores/
        ///  for the upcoming block.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> ScheduledAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9430U)
            {
                _paraSchedulerStorageV9430.blockHash = blockHash;
                param = await _paraSchedulerStorageV9430.Scheduled(token);
            }

            if (version == 9420U)
            {
                _paraSchedulerStorageV9420.blockHash = blockHash;
                param = await _paraSchedulerStorageV9420.Scheduled(token);
            }

            if (version == 9381U)
            {
                _paraSchedulerStorageV9381.blockHash = blockHash;
                param = await _paraSchedulerStorageV9381.Scheduled(token);
            }

            if (version == 9370U)
            {
                _paraSchedulerStorageV9370.blockHash = blockHash;
                param = await _paraSchedulerStorageV9370.Scheduled(token);
            }

            if (version == 9360U)
            {
                _paraSchedulerStorageV9360.blockHash = blockHash;
                param = await _paraSchedulerStorageV9360.Scheduled(token);
            }

            if (version == 9350U)
            {
                _paraSchedulerStorageV9350.blockHash = blockHash;
                param = await _paraSchedulerStorageV9350.Scheduled(token);
            }

            if (version == 9340U)
            {
                _paraSchedulerStorageV9340.blockHash = blockHash;
                param = await _paraSchedulerStorageV9340.Scheduled(token);
            }

            if (version == 9320U)
            {
                _paraSchedulerStorageV9320.blockHash = blockHash;
                param = await _paraSchedulerStorageV9320.Scheduled(token);
            }

            if (version == 9300U)
            {
                _paraSchedulerStorageV9300.blockHash = blockHash;
                param = await _paraSchedulerStorageV9300.Scheduled(token);
            }

            if (version == 9291U)
            {
                _paraSchedulerStorageV9291.blockHash = blockHash;
                param = await _paraSchedulerStorageV9291.Scheduled(token);
            }

            if (version == 9280U)
            {
                _paraSchedulerStorageV9280.blockHash = blockHash;
                param = await _paraSchedulerStorageV9280.Scheduled(token);
            }

            if (version == 9271U)
            {
                _paraSchedulerStorageV9271.blockHash = blockHash;
                param = await _paraSchedulerStorageV9271.Scheduled(token);
            }

            if (version == 9260U)
            {
                _paraSchedulerStorageV9260.blockHash = blockHash;
                param = await _paraSchedulerStorageV9260.Scheduled(token);
            }

            if (version == 9250U)
            {
                _paraSchedulerStorageV9250.blockHash = blockHash;
                param = await _paraSchedulerStorageV9250.Scheduled(token);
            }

            if (version == 9230U)
            {
                _paraSchedulerStorageV9230.blockHash = blockHash;
                param = await _paraSchedulerStorageV9230.Scheduled(token);
            }

            if (version == 9220U)
            {
                _paraSchedulerStorageV9220.blockHash = blockHash;
                param = await _paraSchedulerStorageV9220.Scheduled(token);
            }

            if (version == 9200U)
            {
                _paraSchedulerStorageV9200.blockHash = blockHash;
                param = await _paraSchedulerStorageV9200.Scheduled(token);
            }

            if (version == 9190U)
            {
                _paraSchedulerStorageV9190.blockHash = blockHash;
                param = await _paraSchedulerStorageV9190.Scheduled(token);
            }

            if (version == 9180U)
            {
                _paraSchedulerStorageV9180.blockHash = blockHash;
                param = await _paraSchedulerStorageV9180.Scheduled(token);
            }

            if (version == 9170U)
            {
                _paraSchedulerStorageV9170.blockHash = blockHash;
                param = await _paraSchedulerStorageV9170.Scheduled(token);
            }

            if (version == 9160U)
            {
                _paraSchedulerStorageV9160.blockHash = blockHash;
                param = await _paraSchedulerStorageV9160.Scheduled(token);
            }

            if (version == 9151U)
            {
                _paraSchedulerStorageV9151.blockHash = blockHash;
                param = await _paraSchedulerStorageV9151.Scheduled(token);
            }

            if (version == 9150U)
            {
                _paraSchedulerStorageV9150.blockHash = blockHash;
                param = await _paraSchedulerStorageV9150.Scheduled(token);
            }

            if (version == 9130U)
            {
                _paraSchedulerStorageV9130.blockHash = blockHash;
                param = await _paraSchedulerStorageV9130.Scheduled(token);
            }

            if (version == 9122U)
            {
                _paraSchedulerStorageV9122.blockHash = blockHash;
                param = await _paraSchedulerStorageV9122.Scheduled(token);
            }

            if (version == 9111U)
            {
                _paraSchedulerStorageV9111.blockHash = blockHash;
                param = await _paraSchedulerStorageV9111.Scheduled(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        public ParaSchedulerStorage(SubstrateClientExt client)
        {
            _client = client;
            _paraSchedulerStorageV9430 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9420 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9381 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9370 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9360 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9350 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9340 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9320 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9300 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9291 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9280 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9271 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9260 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9250 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9230 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9220 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9200 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9190 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9180 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9170 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9160 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9151 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9150 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9130 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9122 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ParaSchedulerStorage(_client);
            _paraSchedulerStorageV9111 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ParaSchedulerStorage(_client);
        }
    }

    public sealed class ParaSchedulerConstants
    {
    }
}