//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading.Tasks;
using Substrate.NetApi.Model.Meta;
using System.Threading;
using Substrate.NetApi;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Extrinsics;

namespace Polkanalysis.Kusama.NetApiExt.Generated.Storage
{
    public sealed class ElectionProviderMultiPhaseStorage
    {
        /// <summary>
        /// Substrate client for the storage calls.
        /// </summary>
        private SubstrateClientExt _client;
        public string blockHash { get; set; } = null;

        public async Task<uint> GetVersionAsync(CancellationToken token)
        {
            var result = await _client.State.GetRuntimeVersionAtAsync(blockHash, token);
            return result.SpecVersion;
        }

        /// <summary>
        /// Storage for SpecVersion 9430
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9430;
        /// <summary>
        /// Storage for SpecVersion 9420
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9420;
        /// <summary>
        /// Storage for SpecVersion 9381
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9381;
        /// <summary>
        /// Storage for SpecVersion 9370
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9370;
        /// <summary>
        /// Storage for SpecVersion 9360
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9360;
        /// <summary>
        /// Storage for SpecVersion 9350
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9350;
        /// <summary>
        /// Storage for SpecVersion 9340
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9340;
        /// <summary>
        /// Storage for SpecVersion 9320
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9320;
        /// <summary>
        /// Storage for SpecVersion 9300
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9300;
        /// <summary>
        /// Storage for SpecVersion 9291
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9291;
        /// <summary>
        /// Storage for SpecVersion 9280
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9280;
        /// <summary>
        /// Storage for SpecVersion 9271
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9271;
        /// <summary>
        /// Storage for SpecVersion 9260
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9260;
        /// <summary>
        /// Storage for SpecVersion 9250
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9250;
        /// <summary>
        /// Storage for SpecVersion 9230
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9230;
        /// <summary>
        /// Storage for SpecVersion 9220
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9220;
        /// <summary>
        /// Storage for SpecVersion 9200
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9200;
        /// <summary>
        /// Storage for SpecVersion 9190
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9190;
        /// <summary>
        /// Storage for SpecVersion 9180
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9180;
        /// <summary>
        /// Storage for SpecVersion 9170
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9170;
        /// <summary>
        /// Storage for SpecVersion 9160
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9160;
        /// <summary>
        /// Storage for SpecVersion 9151
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9151;
        /// <summary>
        /// Storage for SpecVersion 9150
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9150;
        /// <summary>
        /// Storage for SpecVersion 9130
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9130;
        /// <summary>
        /// Storage for SpecVersion 9122
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9122;
        /// <summary>
        /// Storage for SpecVersion 9111
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage _electionProviderMultiPhaseStorageV9111;
        /// <summary>
        /// >> RoundParams
        ///  Internal counter for the number of rounds.
        /// 
        ///  This is useful for de-duplication of transactions submitted to the pool, and general
        ///  diagnostics of the pallet.
        /// 
        ///  This is merely incremented once per every time that an upstream `elect` is called.
        /// </summary>
        public static string RoundParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.RoundParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.RoundParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> RoundDefault
        /// Default value as hex string
        /// </summary>
        public static string RoundDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.RoundDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Round
        ///  Internal counter for the number of rounds.
        /// 
        ///  This is useful for de-duplication of transactions submitted to the pool, and general
        ///  diagnostics of the pallet.
        /// 
        ///  This is merely incremented once per every time that an upstream `elect` is called.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> RoundAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9430U)
            {
                _electionProviderMultiPhaseStorageV9430.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9430.Round(token);
            }

            if (version == 9420U)
            {
                _electionProviderMultiPhaseStorageV9420.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9420.Round(token);
            }

            if (version == 9381U)
            {
                _electionProviderMultiPhaseStorageV9381.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9381.Round(token);
            }

            if (version == 9370U)
            {
                _electionProviderMultiPhaseStorageV9370.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9370.Round(token);
            }

            if (version == 9360U)
            {
                _electionProviderMultiPhaseStorageV9360.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9360.Round(token);
            }

            if (version == 9350U)
            {
                _electionProviderMultiPhaseStorageV9350.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9350.Round(token);
            }

            if (version == 9340U)
            {
                _electionProviderMultiPhaseStorageV9340.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9340.Round(token);
            }

            if (version == 9320U)
            {
                _electionProviderMultiPhaseStorageV9320.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9320.Round(token);
            }

            if (version == 9300U)
            {
                _electionProviderMultiPhaseStorageV9300.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9300.Round(token);
            }

            if (version == 9291U)
            {
                _electionProviderMultiPhaseStorageV9291.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9291.Round(token);
            }

            if (version == 9280U)
            {
                _electionProviderMultiPhaseStorageV9280.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9280.Round(token);
            }

            if (version == 9271U)
            {
                _electionProviderMultiPhaseStorageV9271.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9271.Round(token);
            }

            if (version == 9260U)
            {
                _electionProviderMultiPhaseStorageV9260.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9260.Round(token);
            }

            if (version == 9250U)
            {
                _electionProviderMultiPhaseStorageV9250.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9250.Round(token);
            }

            if (version == 9230U)
            {
                _electionProviderMultiPhaseStorageV9230.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9230.Round(token);
            }

            if (version == 9220U)
            {
                _electionProviderMultiPhaseStorageV9220.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9220.Round(token);
            }

            if (version == 9200U)
            {
                _electionProviderMultiPhaseStorageV9200.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9200.Round(token);
            }

            if (version == 9190U)
            {
                _electionProviderMultiPhaseStorageV9190.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9190.Round(token);
            }

            if (version == 9180U)
            {
                _electionProviderMultiPhaseStorageV9180.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9180.Round(token);
            }

            if (version == 9170U)
            {
                _electionProviderMultiPhaseStorageV9170.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9170.Round(token);
            }

            if (version == 9160U)
            {
                _electionProviderMultiPhaseStorageV9160.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9160.Round(token);
            }

            if (version == 9151U)
            {
                _electionProviderMultiPhaseStorageV9151.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9151.Round(token);
            }

            if (version == 9150U)
            {
                _electionProviderMultiPhaseStorageV9150.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9150.Round(token);
            }

            if (version == 9130U)
            {
                _electionProviderMultiPhaseStorageV9130.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9130.Round(token);
            }

            if (version == 9122U)
            {
                _electionProviderMultiPhaseStorageV9122.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9122.Round(token);
            }

            if (version == 9111U)
            {
                _electionProviderMultiPhaseStorageV9111.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9111.Round(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CurrentPhaseParams
        ///  Current phase.
        /// </summary>
        public static string CurrentPhaseParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.CurrentPhaseParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CurrentPhaseDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentPhaseDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.CurrentPhaseDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CurrentPhase
        ///  Current phase.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum> CurrentPhaseAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum param = null;
            if (version == 9430U)
            {
                _electionProviderMultiPhaseStorageV9430.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9430.CurrentPhase(token);
            }

            if (version == 9420U)
            {
                _electionProviderMultiPhaseStorageV9420.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9420.CurrentPhase(token);
            }

            if (version == 9381U)
            {
                _electionProviderMultiPhaseStorageV9381.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9381.CurrentPhase(token);
            }

            if (version == 9370U)
            {
                _electionProviderMultiPhaseStorageV9370.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9370.CurrentPhase(token);
            }

            if (version == 9360U)
            {
                _electionProviderMultiPhaseStorageV9360.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9360.CurrentPhase(token);
            }

            if (version == 9350U)
            {
                _electionProviderMultiPhaseStorageV9350.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9350.CurrentPhase(token);
            }

            if (version == 9340U)
            {
                _electionProviderMultiPhaseStorageV9340.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9340.CurrentPhase(token);
            }

            if (version == 9320U)
            {
                _electionProviderMultiPhaseStorageV9320.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9320.CurrentPhase(token);
            }

            if (version == 9300U)
            {
                _electionProviderMultiPhaseStorageV9300.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9300.CurrentPhase(token);
            }

            if (version == 9291U)
            {
                _electionProviderMultiPhaseStorageV9291.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9291.CurrentPhase(token);
            }

            if (version == 9280U)
            {
                _electionProviderMultiPhaseStorageV9280.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9280.CurrentPhase(token);
            }

            if (version == 9271U)
            {
                _electionProviderMultiPhaseStorageV9271.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9271.CurrentPhase(token);
            }

            if (version == 9260U)
            {
                _electionProviderMultiPhaseStorageV9260.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9260.CurrentPhase(token);
            }

            if (version == 9250U)
            {
                _electionProviderMultiPhaseStorageV9250.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9250.CurrentPhase(token);
            }

            if (version == 9230U)
            {
                _electionProviderMultiPhaseStorageV9230.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9230.CurrentPhase(token);
            }

            if (version == 9220U)
            {
                _electionProviderMultiPhaseStorageV9220.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9220.CurrentPhase(token);
            }

            if (version == 9200U)
            {
                _electionProviderMultiPhaseStorageV9200.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9200.CurrentPhase(token);
            }

            if (version == 9190U)
            {
                _electionProviderMultiPhaseStorageV9190.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9190.CurrentPhase(token);
            }

            if (version == 9180U)
            {
                _electionProviderMultiPhaseStorageV9180.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9180.CurrentPhase(token);
            }

            if (version == 9170U)
            {
                _electionProviderMultiPhaseStorageV9170.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9170.CurrentPhase(token);
            }

            if (version == 9160U)
            {
                _electionProviderMultiPhaseStorageV9160.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9160.CurrentPhase(token);
            }

            if (version == 9151U)
            {
                _electionProviderMultiPhaseStorageV9151.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9151.CurrentPhase(token);
            }

            if (version == 9150U)
            {
                _electionProviderMultiPhaseStorageV9150.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9150.CurrentPhase(token);
            }

            if (version == 9130U)
            {
                _electionProviderMultiPhaseStorageV9130.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9130.CurrentPhase(token);
            }

            if (version == 9122U)
            {
                _electionProviderMultiPhaseStorageV9122.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9122.CurrentPhase(token);
            }

            if (version == 9111U)
            {
                _electionProviderMultiPhaseStorageV9111.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9111.CurrentPhase(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> QueuedSolutionParams
        ///  Current best solution, signed or unsigned, queued to be returned upon `elect`.
        /// 
        ///  Always sorted by score.
        /// </summary>
        public static string QueuedSolutionParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.QueuedSolutionParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> QueuedSolutionDefault
        /// Default value as hex string
        /// </summary>
        public static string QueuedSolutionDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.QueuedSolutionDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> QueuedSolution
        ///  Current best solution, signed or unsigned, queued to be returned upon `elect`.
        /// 
        ///  Always sorted by score.
        /// </summary>
        public async Task<Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_election_provider_multi_phase.ReadySolutionBase> QueuedSolutionAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_election_provider_multi_phase.ReadySolutionBase param = null;
            if (version == 9430U)
            {
                _electionProviderMultiPhaseStorageV9430.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9430.QueuedSolution(token);
            }

            if (version == 9420U)
            {
                _electionProviderMultiPhaseStorageV9420.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9420.QueuedSolution(token);
            }

            if (version == 9381U)
            {
                _electionProviderMultiPhaseStorageV9381.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9381.QueuedSolution(token);
            }

            if (version == 9370U)
            {
                _electionProviderMultiPhaseStorageV9370.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9370.QueuedSolution(token);
            }

            if (version == 9360U)
            {
                _electionProviderMultiPhaseStorageV9360.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9360.QueuedSolution(token);
            }

            if (version == 9350U)
            {
                _electionProviderMultiPhaseStorageV9350.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9350.QueuedSolution(token);
            }

            if (version == 9340U)
            {
                _electionProviderMultiPhaseStorageV9340.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9340.QueuedSolution(token);
            }

            if (version == 9320U)
            {
                _electionProviderMultiPhaseStorageV9320.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9320.QueuedSolution(token);
            }

            if (version == 9300U)
            {
                _electionProviderMultiPhaseStorageV9300.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9300.QueuedSolution(token);
            }

            if (version == 9291U)
            {
                _electionProviderMultiPhaseStorageV9291.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9291.QueuedSolution(token);
            }

            if (version == 9280U)
            {
                _electionProviderMultiPhaseStorageV9280.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9280.QueuedSolution(token);
            }

            if (version == 9271U)
            {
                _electionProviderMultiPhaseStorageV9271.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9271.QueuedSolution(token);
            }

            if (version == 9260U)
            {
                _electionProviderMultiPhaseStorageV9260.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9260.QueuedSolution(token);
            }

            if (version == 9250U)
            {
                _electionProviderMultiPhaseStorageV9250.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9250.QueuedSolution(token);
            }

            if (version == 9230U)
            {
                _electionProviderMultiPhaseStorageV9230.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9230.QueuedSolution(token);
            }

            if (version == 9220U)
            {
                _electionProviderMultiPhaseStorageV9220.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9220.QueuedSolution(token);
            }

            if (version == 9200U)
            {
                _electionProviderMultiPhaseStorageV9200.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9200.QueuedSolution(token);
            }

            if (version == 9190U)
            {
                _electionProviderMultiPhaseStorageV9190.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9190.QueuedSolution(token);
            }

            if (version == 9180U)
            {
                _electionProviderMultiPhaseStorageV9180.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9180.QueuedSolution(token);
            }

            if (version == 9170U)
            {
                _electionProviderMultiPhaseStorageV9170.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9170.QueuedSolution(token);
            }

            if (version == 9160U)
            {
                _electionProviderMultiPhaseStorageV9160.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9160.QueuedSolution(token);
            }

            if (version == 9151U)
            {
                _electionProviderMultiPhaseStorageV9151.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9151.QueuedSolution(token);
            }

            if (version == 9150U)
            {
                _electionProviderMultiPhaseStorageV9150.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9150.QueuedSolution(token);
            }

            if (version == 9130U)
            {
                _electionProviderMultiPhaseStorageV9130.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9130.QueuedSolution(token);
            }

            if (version == 9122U)
            {
                _electionProviderMultiPhaseStorageV9122.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9122.QueuedSolution(token);
            }

            if (version == 9111U)
            {
                _electionProviderMultiPhaseStorageV9111.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9111.QueuedSolution(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SnapshotParams
        ///  Snapshot data of the round.
        /// 
        ///  This is created at the beginning of the signed phase and cleared upon calling `elect`.
        /// </summary>
        public static string SnapshotParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.SnapshotParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SnapshotDefault
        /// Default value as hex string
        /// </summary>
        public static string SnapshotDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.SnapshotDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Snapshot
        ///  Snapshot data of the round.
        /// 
        ///  This is created at the beginning of the signed phase and cleared upon calling `elect`.
        /// </summary>
        public async Task<Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_election_provider_multi_phase.RoundSnapshotBase> SnapshotAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_election_provider_multi_phase.RoundSnapshotBase param = null;
            if (version == 9430U)
            {
                _electionProviderMultiPhaseStorageV9430.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9430.Snapshot(token);
            }

            if (version == 9420U)
            {
                _electionProviderMultiPhaseStorageV9420.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9420.Snapshot(token);
            }

            if (version == 9381U)
            {
                _electionProviderMultiPhaseStorageV9381.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9381.Snapshot(token);
            }

            if (version == 9370U)
            {
                _electionProviderMultiPhaseStorageV9370.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9370.Snapshot(token);
            }

            if (version == 9360U)
            {
                _electionProviderMultiPhaseStorageV9360.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9360.Snapshot(token);
            }

            if (version == 9350U)
            {
                _electionProviderMultiPhaseStorageV9350.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9350.Snapshot(token);
            }

            if (version == 9340U)
            {
                _electionProviderMultiPhaseStorageV9340.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9340.Snapshot(token);
            }

            if (version == 9320U)
            {
                _electionProviderMultiPhaseStorageV9320.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9320.Snapshot(token);
            }

            if (version == 9300U)
            {
                _electionProviderMultiPhaseStorageV9300.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9300.Snapshot(token);
            }

            if (version == 9291U)
            {
                _electionProviderMultiPhaseStorageV9291.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9291.Snapshot(token);
            }

            if (version == 9280U)
            {
                _electionProviderMultiPhaseStorageV9280.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9280.Snapshot(token);
            }

            if (version == 9271U)
            {
                _electionProviderMultiPhaseStorageV9271.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9271.Snapshot(token);
            }

            if (version == 9260U)
            {
                _electionProviderMultiPhaseStorageV9260.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9260.Snapshot(token);
            }

            if (version == 9250U)
            {
                _electionProviderMultiPhaseStorageV9250.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9250.Snapshot(token);
            }

            if (version == 9230U)
            {
                _electionProviderMultiPhaseStorageV9230.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9230.Snapshot(token);
            }

            if (version == 9220U)
            {
                _electionProviderMultiPhaseStorageV9220.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9220.Snapshot(token);
            }

            if (version == 9200U)
            {
                _electionProviderMultiPhaseStorageV9200.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9200.Snapshot(token);
            }

            if (version == 9190U)
            {
                _electionProviderMultiPhaseStorageV9190.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9190.Snapshot(token);
            }

            if (version == 9180U)
            {
                _electionProviderMultiPhaseStorageV9180.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9180.Snapshot(token);
            }

            if (version == 9170U)
            {
                _electionProviderMultiPhaseStorageV9170.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9170.Snapshot(token);
            }

            if (version == 9160U)
            {
                _electionProviderMultiPhaseStorageV9160.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9160.Snapshot(token);
            }

            if (version == 9151U)
            {
                _electionProviderMultiPhaseStorageV9151.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9151.Snapshot(token);
            }

            if (version == 9150U)
            {
                _electionProviderMultiPhaseStorageV9150.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9150.Snapshot(token);
            }

            if (version == 9130U)
            {
                _electionProviderMultiPhaseStorageV9130.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9130.Snapshot(token);
            }

            if (version == 9122U)
            {
                _electionProviderMultiPhaseStorageV9122.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9122.Snapshot(token);
            }

            if (version == 9111U)
            {
                _electionProviderMultiPhaseStorageV9111.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9111.Snapshot(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> DesiredTargetsParams
        ///  Desired number of targets to elect for this round.
        /// 
        ///  Only exists when [`Snapshot`] is present.
        /// </summary>
        public static string DesiredTargetsParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.DesiredTargetsParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> DesiredTargetsDefault
        /// Default value as hex string
        /// </summary>
        public static string DesiredTargetsDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.DesiredTargetsDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> DesiredTargets
        ///  Desired number of targets to elect for this round.
        /// 
        ///  Only exists when [`Snapshot`] is present.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> DesiredTargetsAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9430U)
            {
                _electionProviderMultiPhaseStorageV9430.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9430.DesiredTargets(token);
            }

            if (version == 9420U)
            {
                _electionProviderMultiPhaseStorageV9420.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9420.DesiredTargets(token);
            }

            if (version == 9381U)
            {
                _electionProviderMultiPhaseStorageV9381.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9381.DesiredTargets(token);
            }

            if (version == 9370U)
            {
                _electionProviderMultiPhaseStorageV9370.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9370.DesiredTargets(token);
            }

            if (version == 9360U)
            {
                _electionProviderMultiPhaseStorageV9360.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9360.DesiredTargets(token);
            }

            if (version == 9350U)
            {
                _electionProviderMultiPhaseStorageV9350.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9350.DesiredTargets(token);
            }

            if (version == 9340U)
            {
                _electionProviderMultiPhaseStorageV9340.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9340.DesiredTargets(token);
            }

            if (version == 9320U)
            {
                _electionProviderMultiPhaseStorageV9320.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9320.DesiredTargets(token);
            }

            if (version == 9300U)
            {
                _electionProviderMultiPhaseStorageV9300.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9300.DesiredTargets(token);
            }

            if (version == 9291U)
            {
                _electionProviderMultiPhaseStorageV9291.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9291.DesiredTargets(token);
            }

            if (version == 9280U)
            {
                _electionProviderMultiPhaseStorageV9280.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9280.DesiredTargets(token);
            }

            if (version == 9271U)
            {
                _electionProviderMultiPhaseStorageV9271.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9271.DesiredTargets(token);
            }

            if (version == 9260U)
            {
                _electionProviderMultiPhaseStorageV9260.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9260.DesiredTargets(token);
            }

            if (version == 9250U)
            {
                _electionProviderMultiPhaseStorageV9250.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9250.DesiredTargets(token);
            }

            if (version == 9230U)
            {
                _electionProviderMultiPhaseStorageV9230.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9230.DesiredTargets(token);
            }

            if (version == 9220U)
            {
                _electionProviderMultiPhaseStorageV9220.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9220.DesiredTargets(token);
            }

            if (version == 9200U)
            {
                _electionProviderMultiPhaseStorageV9200.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9200.DesiredTargets(token);
            }

            if (version == 9190U)
            {
                _electionProviderMultiPhaseStorageV9190.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9190.DesiredTargets(token);
            }

            if (version == 9180U)
            {
                _electionProviderMultiPhaseStorageV9180.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9180.DesiredTargets(token);
            }

            if (version == 9170U)
            {
                _electionProviderMultiPhaseStorageV9170.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9170.DesiredTargets(token);
            }

            if (version == 9160U)
            {
                _electionProviderMultiPhaseStorageV9160.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9160.DesiredTargets(token);
            }

            if (version == 9151U)
            {
                _electionProviderMultiPhaseStorageV9151.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9151.DesiredTargets(token);
            }

            if (version == 9150U)
            {
                _electionProviderMultiPhaseStorageV9150.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9150.DesiredTargets(token);
            }

            if (version == 9130U)
            {
                _electionProviderMultiPhaseStorageV9130.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9130.DesiredTargets(token);
            }

            if (version == 9122U)
            {
                _electionProviderMultiPhaseStorageV9122.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9122.DesiredTargets(token);
            }

            if (version == 9111U)
            {
                _electionProviderMultiPhaseStorageV9111.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9111.DesiredTargets(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SnapshotMetadataParams
        ///  The metadata of the [`RoundSnapshot`]
        /// 
        ///  Only exists when [`Snapshot`] is present.
        /// </summary>
        public static string SnapshotMetadataParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.SnapshotMetadataParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SnapshotMetadataDefault
        /// Default value as hex string
        /// </summary>
        public static string SnapshotMetadataDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.SnapshotMetadataDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SnapshotMetadata
        ///  The metadata of the [`RoundSnapshot`]
        /// 
        ///  Only exists when [`Snapshot`] is present.
        /// </summary>
        public async Task<Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_election_provider_multi_phase.SolutionOrSnapshotSizeBase> SnapshotMetadataAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_election_provider_multi_phase.SolutionOrSnapshotSizeBase param = null;
            if (version == 9430U)
            {
                _electionProviderMultiPhaseStorageV9430.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9430.SnapshotMetadata(token);
            }

            if (version == 9420U)
            {
                _electionProviderMultiPhaseStorageV9420.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9420.SnapshotMetadata(token);
            }

            if (version == 9381U)
            {
                _electionProviderMultiPhaseStorageV9381.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9381.SnapshotMetadata(token);
            }

            if (version == 9370U)
            {
                _electionProviderMultiPhaseStorageV9370.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9370.SnapshotMetadata(token);
            }

            if (version == 9360U)
            {
                _electionProviderMultiPhaseStorageV9360.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9360.SnapshotMetadata(token);
            }

            if (version == 9350U)
            {
                _electionProviderMultiPhaseStorageV9350.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9350.SnapshotMetadata(token);
            }

            if (version == 9340U)
            {
                _electionProviderMultiPhaseStorageV9340.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9340.SnapshotMetadata(token);
            }

            if (version == 9320U)
            {
                _electionProviderMultiPhaseStorageV9320.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9320.SnapshotMetadata(token);
            }

            if (version == 9300U)
            {
                _electionProviderMultiPhaseStorageV9300.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9300.SnapshotMetadata(token);
            }

            if (version == 9291U)
            {
                _electionProviderMultiPhaseStorageV9291.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9291.SnapshotMetadata(token);
            }

            if (version == 9280U)
            {
                _electionProviderMultiPhaseStorageV9280.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9280.SnapshotMetadata(token);
            }

            if (version == 9271U)
            {
                _electionProviderMultiPhaseStorageV9271.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9271.SnapshotMetadata(token);
            }

            if (version == 9260U)
            {
                _electionProviderMultiPhaseStorageV9260.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9260.SnapshotMetadata(token);
            }

            if (version == 9250U)
            {
                _electionProviderMultiPhaseStorageV9250.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9250.SnapshotMetadata(token);
            }

            if (version == 9230U)
            {
                _electionProviderMultiPhaseStorageV9230.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9230.SnapshotMetadata(token);
            }

            if (version == 9220U)
            {
                _electionProviderMultiPhaseStorageV9220.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9220.SnapshotMetadata(token);
            }

            if (version == 9200U)
            {
                _electionProviderMultiPhaseStorageV9200.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9200.SnapshotMetadata(token);
            }

            if (version == 9190U)
            {
                _electionProviderMultiPhaseStorageV9190.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9190.SnapshotMetadata(token);
            }

            if (version == 9180U)
            {
                _electionProviderMultiPhaseStorageV9180.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9180.SnapshotMetadata(token);
            }

            if (version == 9170U)
            {
                _electionProviderMultiPhaseStorageV9170.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9170.SnapshotMetadata(token);
            }

            if (version == 9160U)
            {
                _electionProviderMultiPhaseStorageV9160.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9160.SnapshotMetadata(token);
            }

            if (version == 9151U)
            {
                _electionProviderMultiPhaseStorageV9151.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9151.SnapshotMetadata(token);
            }

            if (version == 9150U)
            {
                _electionProviderMultiPhaseStorageV9150.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9150.SnapshotMetadata(token);
            }

            if (version == 9130U)
            {
                _electionProviderMultiPhaseStorageV9130.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9130.SnapshotMetadata(token);
            }

            if (version == 9122U)
            {
                _electionProviderMultiPhaseStorageV9122.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9122.SnapshotMetadata(token);
            }

            if (version == 9111U)
            {
                _electionProviderMultiPhaseStorageV9111.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9111.SnapshotMetadata(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SignedSubmissionNextIndexParams
        ///  The next index to be assigned to an incoming signed submission.
        /// 
        ///  Every accepted submission is assigned a unique index; that index is bound to that particular
        ///  submission for the duration of the election. On election finalization, the next index is
        ///  reset to 0.
        /// 
        ///  We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its
        ///  capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,
        ///  because iteration is slow. Instead, we store the value here.
        /// </summary>
        public static string SignedSubmissionNextIndexParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SignedSubmissionNextIndexDefault
        /// Default value as hex string
        /// </summary>
        public static string SignedSubmissionNextIndexDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.SignedSubmissionNextIndexDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SignedSubmissionNextIndex
        ///  The next index to be assigned to an incoming signed submission.
        /// 
        ///  Every accepted submission is assigned a unique index; that index is bound to that particular
        ///  submission for the duration of the election. On election finalization, the next index is
        ///  reset to 0.
        /// 
        ///  We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its
        ///  capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,
        ///  because iteration is slow. Instead, we store the value here.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> SignedSubmissionNextIndexAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9430U)
            {
                _electionProviderMultiPhaseStorageV9430.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9430.SignedSubmissionNextIndex(token);
            }

            if (version == 9420U)
            {
                _electionProviderMultiPhaseStorageV9420.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9420.SignedSubmissionNextIndex(token);
            }

            if (version == 9381U)
            {
                _electionProviderMultiPhaseStorageV9381.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9381.SignedSubmissionNextIndex(token);
            }

            if (version == 9370U)
            {
                _electionProviderMultiPhaseStorageV9370.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9370.SignedSubmissionNextIndex(token);
            }

            if (version == 9360U)
            {
                _electionProviderMultiPhaseStorageV9360.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9360.SignedSubmissionNextIndex(token);
            }

            if (version == 9350U)
            {
                _electionProviderMultiPhaseStorageV9350.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9350.SignedSubmissionNextIndex(token);
            }

            if (version == 9340U)
            {
                _electionProviderMultiPhaseStorageV9340.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9340.SignedSubmissionNextIndex(token);
            }

            if (version == 9320U)
            {
                _electionProviderMultiPhaseStorageV9320.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9320.SignedSubmissionNextIndex(token);
            }

            if (version == 9300U)
            {
                _electionProviderMultiPhaseStorageV9300.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9300.SignedSubmissionNextIndex(token);
            }

            if (version == 9291U)
            {
                _electionProviderMultiPhaseStorageV9291.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9291.SignedSubmissionNextIndex(token);
            }

            if (version == 9280U)
            {
                _electionProviderMultiPhaseStorageV9280.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9280.SignedSubmissionNextIndex(token);
            }

            if (version == 9271U)
            {
                _electionProviderMultiPhaseStorageV9271.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9271.SignedSubmissionNextIndex(token);
            }

            if (version == 9260U)
            {
                _electionProviderMultiPhaseStorageV9260.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9260.SignedSubmissionNextIndex(token);
            }

            if (version == 9250U)
            {
                _electionProviderMultiPhaseStorageV9250.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9250.SignedSubmissionNextIndex(token);
            }

            if (version == 9230U)
            {
                _electionProviderMultiPhaseStorageV9230.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9230.SignedSubmissionNextIndex(token);
            }

            if (version == 9220U)
            {
                _electionProviderMultiPhaseStorageV9220.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9220.SignedSubmissionNextIndex(token);
            }

            if (version == 9200U)
            {
                _electionProviderMultiPhaseStorageV9200.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9200.SignedSubmissionNextIndex(token);
            }

            if (version == 9190U)
            {
                _electionProviderMultiPhaseStorageV9190.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9190.SignedSubmissionNextIndex(token);
            }

            if (version == 9180U)
            {
                _electionProviderMultiPhaseStorageV9180.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9180.SignedSubmissionNextIndex(token);
            }

            if (version == 9170U)
            {
                _electionProviderMultiPhaseStorageV9170.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9170.SignedSubmissionNextIndex(token);
            }

            if (version == 9160U)
            {
                _electionProviderMultiPhaseStorageV9160.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9160.SignedSubmissionNextIndex(token);
            }

            if (version == 9151U)
            {
                _electionProviderMultiPhaseStorageV9151.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9151.SignedSubmissionNextIndex(token);
            }

            if (version == 9150U)
            {
                _electionProviderMultiPhaseStorageV9150.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9150.SignedSubmissionNextIndex(token);
            }

            if (version == 9130U)
            {
                _electionProviderMultiPhaseStorageV9130.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9130.SignedSubmissionNextIndex(token);
            }

            if (version == 9122U)
            {
                _electionProviderMultiPhaseStorageV9122.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9122.SignedSubmissionNextIndex(token);
            }

            if (version == 9111U)
            {
                _electionProviderMultiPhaseStorageV9111.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9111.SignedSubmissionNextIndex(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SignedSubmissionIndicesParams
        ///  A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a
        ///  value in `SignedSubmissions`.
        /// 
        ///  We never need to process more than a single signed submission at a time. Signed submissions
        ///  can be quite large, so we're willing to pay the cost of multiple database accesses to access
        ///  them one at a time instead of reading and decoding all of them at once.
        /// </summary>
        public static string SignedSubmissionIndicesParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SignedSubmissionIndicesDefault
        /// Default value as hex string
        /// </summary>
        public static string SignedSubmissionIndicesDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.SignedSubmissionIndicesDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SignedSubmissionIndices
        ///  A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a
        ///  value in `SignedSubmissions`.
        /// 
        ///  We never need to process more than a single signed submission at a time. Signed submissions
        ///  can be quite large, so we're willing to pay the cost of multiple database accesses to access
        ///  them one at a time instead of reading and decoding all of them at once.
        /// </summary>
        public async Task<IType> SignedSubmissionIndicesAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            IType param = null;
            if (version == 9430U)
            {
                _electionProviderMultiPhaseStorageV9430.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9430.SignedSubmissionIndices(token);
            }

            if (version == 9420U)
            {
                _electionProviderMultiPhaseStorageV9420.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9420.SignedSubmissionIndices(token);
            }

            if (version == 9381U)
            {
                _electionProviderMultiPhaseStorageV9381.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9381.SignedSubmissionIndices(token);
            }

            if (version == 9370U)
            {
                _electionProviderMultiPhaseStorageV9370.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9370.SignedSubmissionIndices(token);
            }

            if (version == 9360U)
            {
                _electionProviderMultiPhaseStorageV9360.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9360.SignedSubmissionIndices(token);
            }

            if (version == 9350U)
            {
                _electionProviderMultiPhaseStorageV9350.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9350.SignedSubmissionIndices(token);
            }

            if (version == 9340U)
            {
                _electionProviderMultiPhaseStorageV9340.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9340.SignedSubmissionIndices(token);
            }

            if (version == 9320U)
            {
                _electionProviderMultiPhaseStorageV9320.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9320.SignedSubmissionIndices(token);
            }

            if (version == 9300U)
            {
                _electionProviderMultiPhaseStorageV9300.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9300.SignedSubmissionIndices(token);
            }

            if (version == 9291U)
            {
                _electionProviderMultiPhaseStorageV9291.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9291.SignedSubmissionIndices(token);
            }

            if (version == 9280U)
            {
                _electionProviderMultiPhaseStorageV9280.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9280.SignedSubmissionIndices(token);
            }

            if (version == 9271U)
            {
                _electionProviderMultiPhaseStorageV9271.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9271.SignedSubmissionIndices(token);
            }

            if (version == 9260U)
            {
                _electionProviderMultiPhaseStorageV9260.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9260.SignedSubmissionIndices(token);
            }

            if (version == 9250U)
            {
                _electionProviderMultiPhaseStorageV9250.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9250.SignedSubmissionIndices(token);
            }

            if (version == 9230U)
            {
                _electionProviderMultiPhaseStorageV9230.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9230.SignedSubmissionIndices(token);
            }

            if (version == 9220U)
            {
                _electionProviderMultiPhaseStorageV9220.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9220.SignedSubmissionIndices(token);
            }

            if (version == 9200U)
            {
                _electionProviderMultiPhaseStorageV9200.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9200.SignedSubmissionIndices(token);
            }

            if (version == 9190U)
            {
                _electionProviderMultiPhaseStorageV9190.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9190.SignedSubmissionIndices(token);
            }

            if (version == 9180U)
            {
                _electionProviderMultiPhaseStorageV9180.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9180.SignedSubmissionIndices(token);
            }

            if (version == 9170U)
            {
                _electionProviderMultiPhaseStorageV9170.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9170.SignedSubmissionIndices(token);
            }

            if (version == 9160U)
            {
                _electionProviderMultiPhaseStorageV9160.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9160.SignedSubmissionIndices(token);
            }

            if (version == 9151U)
            {
                _electionProviderMultiPhaseStorageV9151.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9151.SignedSubmissionIndices(token);
            }

            if (version == 9150U)
            {
                _electionProviderMultiPhaseStorageV9150.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9150.SignedSubmissionIndices(token);
            }

            if (version == 9130U)
            {
                _electionProviderMultiPhaseStorageV9130.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9130.SignedSubmissionIndices(token);
            }

            if (version == 9122U)
            {
                _electionProviderMultiPhaseStorageV9122.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9122.SignedSubmissionIndices(token);
            }

            if (version == 9111U)
            {
                _electionProviderMultiPhaseStorageV9111.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9111.SignedSubmissionIndices(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SignedSubmissionsMapParams
        ///  Unchecked, signed solutions.
        /// 
        ///  Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while
        ///  allowing us to keep only a single one in memory at a time.
        /// 
        ///  Twox note: the key of the map is an auto-incrementing index which users cannot inspect or
        ///  affect; we shouldn't need a cryptographically secure hasher.
        /// </summary>
        public static string SignedSubmissionsMapParams(Substrate.NetApi.Model.Types.Primitive.U32 key, uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SignedSubmissionsMapDefault
        /// Default value as hex string
        /// </summary>
        public static string SignedSubmissionsMapDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.SignedSubmissionsMapDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SignedSubmissionsMap
        ///  Unchecked, signed solutions.
        /// 
        ///  Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while
        ///  allowing us to keep only a single one in memory at a time.
        /// 
        ///  Twox note: the key of the map is an auto-incrementing index which users cannot inspect or
        ///  affect; we shouldn't need a cryptographically secure hasher.
        /// </summary>
        public async Task<Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_election_provider_multi_phase.signed.SignedSubmissionBase> SignedSubmissionsMapAsync(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_election_provider_multi_phase.signed.SignedSubmissionBase param = null;
            if (version == 9430U)
            {
                _electionProviderMultiPhaseStorageV9430.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9430.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9420U)
            {
                _electionProviderMultiPhaseStorageV9420.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9420.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9381U)
            {
                _electionProviderMultiPhaseStorageV9381.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9381.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9370U)
            {
                _electionProviderMultiPhaseStorageV9370.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9370.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9360U)
            {
                _electionProviderMultiPhaseStorageV9360.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9360.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9350U)
            {
                _electionProviderMultiPhaseStorageV9350.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9350.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9340U)
            {
                _electionProviderMultiPhaseStorageV9340.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9340.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9320U)
            {
                _electionProviderMultiPhaseStorageV9320.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9320.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9300U)
            {
                _electionProviderMultiPhaseStorageV9300.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9300.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9291U)
            {
                _electionProviderMultiPhaseStorageV9291.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9291.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9280U)
            {
                _electionProviderMultiPhaseStorageV9280.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9280.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9271U)
            {
                _electionProviderMultiPhaseStorageV9271.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9271.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9260U)
            {
                _electionProviderMultiPhaseStorageV9260.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9260.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9250U)
            {
                _electionProviderMultiPhaseStorageV9250.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9250.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9230U)
            {
                _electionProviderMultiPhaseStorageV9230.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9230.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9220U)
            {
                _electionProviderMultiPhaseStorageV9220.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9220.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9200U)
            {
                _electionProviderMultiPhaseStorageV9200.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9200.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9190U)
            {
                _electionProviderMultiPhaseStorageV9190.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9190.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9180U)
            {
                _electionProviderMultiPhaseStorageV9180.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9180.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9170U)
            {
                _electionProviderMultiPhaseStorageV9170.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9170.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9160U)
            {
                _electionProviderMultiPhaseStorageV9160.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9160.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9151U)
            {
                _electionProviderMultiPhaseStorageV9151.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9151.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9150U)
            {
                _electionProviderMultiPhaseStorageV9150.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9150.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9130U)
            {
                _electionProviderMultiPhaseStorageV9130.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9130.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9122U)
            {
                _electionProviderMultiPhaseStorageV9122.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9122.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9111U)
            {
                _electionProviderMultiPhaseStorageV9111.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9111.SignedSubmissionsMap((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinimumUntrustedScoreParams
        ///  The minimum score that each 'untrusted' solution must attain in order to be considered
        ///  feasible.
        /// 
        ///  Can be set via `set_minimum_untrusted_score`.
        /// </summary>
        public static string MinimumUntrustedScoreParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinimumUntrustedScoreDefault
        /// Default value as hex string
        /// </summary>
        public static string MinimumUntrustedScoreDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9291U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9280U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9271U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9260U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9250U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9230U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9220U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9200U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9190U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9180U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9170U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9160U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9151U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9150U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9130U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9122U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (version == 9111U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage.MinimumUntrustedScoreDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinimumUntrustedScore
        ///  The minimum score that each 'untrusted' solution must attain in order to be considered
        ///  feasible.
        /// 
        ///  Can be set via `set_minimum_untrusted_score`.
        /// </summary>
        public async Task<IType> MinimumUntrustedScoreAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            IType param = null;
            if (version == 9430U)
            {
                _electionProviderMultiPhaseStorageV9430.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9430.MinimumUntrustedScore(token);
            }

            if (version == 9420U)
            {
                _electionProviderMultiPhaseStorageV9420.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9420.MinimumUntrustedScore(token);
            }

            if (version == 9381U)
            {
                _electionProviderMultiPhaseStorageV9381.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9381.MinimumUntrustedScore(token);
            }

            if (version == 9370U)
            {
                _electionProviderMultiPhaseStorageV9370.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9370.MinimumUntrustedScore(token);
            }

            if (version == 9360U)
            {
                _electionProviderMultiPhaseStorageV9360.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9360.MinimumUntrustedScore(token);
            }

            if (version == 9350U)
            {
                _electionProviderMultiPhaseStorageV9350.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9350.MinimumUntrustedScore(token);
            }

            if (version == 9340U)
            {
                _electionProviderMultiPhaseStorageV9340.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9340.MinimumUntrustedScore(token);
            }

            if (version == 9320U)
            {
                _electionProviderMultiPhaseStorageV9320.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9320.MinimumUntrustedScore(token);
            }

            if (version == 9300U)
            {
                _electionProviderMultiPhaseStorageV9300.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9300.MinimumUntrustedScore(token);
            }

            if (version == 9291U)
            {
                _electionProviderMultiPhaseStorageV9291.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9291.MinimumUntrustedScore(token);
            }

            if (version == 9280U)
            {
                _electionProviderMultiPhaseStorageV9280.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9280.MinimumUntrustedScore(token);
            }

            if (version == 9271U)
            {
                _electionProviderMultiPhaseStorageV9271.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9271.MinimumUntrustedScore(token);
            }

            if (version == 9260U)
            {
                _electionProviderMultiPhaseStorageV9260.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9260.MinimumUntrustedScore(token);
            }

            if (version == 9250U)
            {
                _electionProviderMultiPhaseStorageV9250.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9250.MinimumUntrustedScore(token);
            }

            if (version == 9230U)
            {
                _electionProviderMultiPhaseStorageV9230.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9230.MinimumUntrustedScore(token);
            }

            if (version == 9220U)
            {
                _electionProviderMultiPhaseStorageV9220.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9220.MinimumUntrustedScore(token);
            }

            if (version == 9200U)
            {
                _electionProviderMultiPhaseStorageV9200.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9200.MinimumUntrustedScore(token);
            }

            if (version == 9190U)
            {
                _electionProviderMultiPhaseStorageV9190.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9190.MinimumUntrustedScore(token);
            }

            if (version == 9180U)
            {
                _electionProviderMultiPhaseStorageV9180.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9180.MinimumUntrustedScore(token);
            }

            if (version == 9170U)
            {
                _electionProviderMultiPhaseStorageV9170.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9170.MinimumUntrustedScore(token);
            }

            if (version == 9160U)
            {
                _electionProviderMultiPhaseStorageV9160.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9160.MinimumUntrustedScore(token);
            }

            if (version == 9151U)
            {
                _electionProviderMultiPhaseStorageV9151.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9151.MinimumUntrustedScore(token);
            }

            if (version == 9150U)
            {
                _electionProviderMultiPhaseStorageV9150.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9150.MinimumUntrustedScore(token);
            }

            if (version == 9130U)
            {
                _electionProviderMultiPhaseStorageV9130.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9130.MinimumUntrustedScore(token);
            }

            if (version == 9122U)
            {
                _electionProviderMultiPhaseStorageV9122.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9122.MinimumUntrustedScore(token);
            }

            if (version == 9111U)
            {
                _electionProviderMultiPhaseStorageV9111.blockHash = blockHash;
                param = await _electionProviderMultiPhaseStorageV9111.MinimumUntrustedScore(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        public ElectionProviderMultiPhaseStorage(SubstrateClientExt client)
        {
            _client = client;
            _electionProviderMultiPhaseStorageV9430 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9420 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9381 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9370 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9360 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9350 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9340 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9320 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9300 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9291 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9280 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9271 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9260 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9250 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9230 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9220 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9200 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9190 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9180 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9170 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9160 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9151 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9150 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9130 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9122 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseStorage(_client);
            _electionProviderMultiPhaseStorageV9111 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseStorage(_client);
        }
    }

    public sealed class ElectionProviderMultiPhaseConstants
    {
        /// <summary>
        /// >> UnsignedPhase
        ///  Duration of the unsigned phase.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 UnsignedPhase(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().UnsignedPhase();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> SignedPhase
        ///  Duration of the signed phase.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 SignedPhase(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().SignedPhase();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> BetterSignedThreshold
        ///  The minimum amount of improvement to the solution score that defines a solution as
        ///  "better" in the Signed phase.
        /// </summary>
        public Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.sp_arithmetic.per_things.PerbillBase BetterSignedThreshold(uint version)
        {
            Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.sp_arithmetic.per_things.PerbillBase result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().BetterSignedThreshold();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> BetterUnsignedThreshold
        ///  The minimum amount of improvement to the solution score that defines a solution as
        ///  "better" in the Unsigned phase.
        /// </summary>
        public Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.sp_arithmetic.per_things.PerbillBase BetterUnsignedThreshold(uint version)
        {
            Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.sp_arithmetic.per_things.PerbillBase result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().BetterUnsignedThreshold();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> OffchainRepeat
        ///  The repeat threshold of the offchain worker.
        /// 
        ///  For example, if it is 5, that means that at least 5 blocks will elapse between attempts
        ///  to submit the worker's solution.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 OffchainRepeat(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().OffchainRepeat();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MinerTxPriority
        ///  The priority of the unsigned transaction submitted in the unsigned-phase
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 MinerTxPriority(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U64 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().MinerTxPriority();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> SignedMaxSubmissions
        ///  Maximum number of signed submissions that can be queued.
        /// 
        ///  It is best to avoid adjusting this during an election, as it impacts downstream data
        ///  structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you
        ///  update this value during an election, you _must_ ensure that
        ///  `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,
        ///  attempts to submit new solutions may cause a runtime panic.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 SignedMaxSubmissions(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().SignedMaxSubmissions();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> SignedMaxWeight
        ///  Maximum weight of a signed solution.
        /// 
        ///  If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of
        ///  this pallet), then [`MinerConfig::solution_weight`] is used to compare against
        ///  this value.
        /// </summary>
        public IType SignedMaxWeight(uint version)
        {
            IType result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().SignedMaxWeight();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> SignedMaxRefunds
        ///  The maximum amount of unchecked solutions to refund the call fee for.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 SignedMaxRefunds(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().SignedMaxRefunds();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> SignedRewardBase
        ///  Base reward for a signed solution
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 SignedRewardBase(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U128 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().SignedRewardBase();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> SignedDepositBase
        ///  Base deposit for a signed solution.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 SignedDepositBase(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U128 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().SignedDepositBase();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> SignedDepositByte
        ///  Per-byte deposit for a signed solution.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 SignedDepositByte(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U128 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().SignedDepositByte();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> SignedDepositWeight
        ///  Per-weight deposit for a signed solution.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 SignedDepositWeight(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U128 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().SignedDepositWeight();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MaxElectingVoters
        ///  The maximum number of electing voters to put in the snapshot. At the moment, snapshots
        ///  are only over a single block, but once multi-block elections are introduced they will
        ///  take place over multiple blocks.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxElectingVoters(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().MaxElectingVoters();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MaxElectableTargets
        ///  The maximum number of electable targets to put in the snapshot.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U16 MaxElectableTargets(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U16 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9291U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9291.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9280U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9280.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9271U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9271.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9260U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9260.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9250U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9250.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9230U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9230.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().MaxElectableTargets();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MaxWinners
        ///  The maximum number of winners that can be elected by this `ElectionProvider`
        ///  implementation.
        /// 
        ///  Note: This must always be greater or equal to `T::DataProvider::desired_targets()`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxWinners(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().MaxWinners();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().MaxWinners();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().MaxWinners();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().MaxWinners();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().MaxWinners();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().MaxWinners();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().MaxWinners();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MinerMaxLength
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinerMaxLength(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().MinerMaxLength();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MinerMaxWeight
        /// </summary>
        public IType MinerMaxWeight(uint version)
        {
            IType result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9220U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9220.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().MinerMaxWeight();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MinerMaxVotesPerVoter
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinerMaxVotesPerVoter(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().MinerMaxVotesPerVoter();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().MinerMaxVotesPerVoter();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ElectionProviderMultiPhaseConstants().MinerMaxVotesPerVoter();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ElectionProviderMultiPhaseConstants().MinerMaxVotesPerVoter();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ElectionProviderMultiPhaseConstants().MinerMaxVotesPerVoter();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ElectionProviderMultiPhaseConstants().MinerMaxVotesPerVoter();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ElectionProviderMultiPhaseConstants().MinerMaxVotesPerVoter();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ElectionProviderMultiPhaseConstants().MinerMaxVotesPerVoter();
            if (version == 9300U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.ElectionProviderMultiPhaseConstants().MinerMaxVotesPerVoter();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MinerMaxWinners
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MinerMaxWinners(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ElectionProviderMultiPhaseConstants().MinerMaxWinners();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ElectionProviderMultiPhaseConstants().MinerMaxWinners();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> SolutionImprovementThreshold
        ///  The minimum amount of improvement to the solution score that defines a solution as
        ///  "better" (in any phase).
        /// </summary>
        public IType SolutionImprovementThreshold(uint version)
        {
            IType result = null;
            if (version == 9200U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9200.ElectionProviderMultiPhaseConstants().SolutionImprovementThreshold();
            if (version == 9190U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9190.ElectionProviderMultiPhaseConstants().SolutionImprovementThreshold();
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().SolutionImprovementThreshold();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().SolutionImprovementThreshold();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().SolutionImprovementThreshold();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().SolutionImprovementThreshold();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().SolutionImprovementThreshold();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().SolutionImprovementThreshold();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().SolutionImprovementThreshold();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().SolutionImprovementThreshold();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> VoterSnapshotPerBlock
        ///  The maximum number of voters to put in the snapshot. At the moment, snapshots are only
        ///  over a single block, but once multi-block elections are introduced they will take place
        ///  over multiple blocks.
        /// 
        ///  Also, note the data type: If the voters are represented by a `u32` in `type
        ///  CompactSolution`, the same `u32` is used here to ensure bounds are respected.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 VoterSnapshotPerBlock(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9180U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9180.ElectionProviderMultiPhaseConstants().VoterSnapshotPerBlock();
            if (version == 9170U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9170.ElectionProviderMultiPhaseConstants().VoterSnapshotPerBlock();
            if (version == 9160U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160.ElectionProviderMultiPhaseConstants().VoterSnapshotPerBlock();
            if (version == 9151U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9151.ElectionProviderMultiPhaseConstants().VoterSnapshotPerBlock();
            if (version == 9150U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9150.ElectionProviderMultiPhaseConstants().VoterSnapshotPerBlock();
            if (version == 9130U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9130.ElectionProviderMultiPhaseConstants().VoterSnapshotPerBlock();
            if (version == 9122U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9122.ElectionProviderMultiPhaseConstants().VoterSnapshotPerBlock();
            if (version == 9111U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9111.ElectionProviderMultiPhaseConstants().VoterSnapshotPerBlock();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }
    }

    public enum ElectionProviderMultiPhaseErrors
    {
        /// <summary>
        /// >> PreDispatchEarlySubmission
        /// Submission was too early.
        /// </summary>
        PreDispatchEarlySubmission,
        /// <summary>
        /// >> PreDispatchWrongWinnerCount
        /// Wrong number of winners presented.
        /// </summary>
        PreDispatchWrongWinnerCount,
        /// <summary>
        /// >> PreDispatchWeakSubmission
        /// Submission was too weak, score-wise.
        /// </summary>
        PreDispatchWeakSubmission,
        /// <summary>
        /// >> SignedQueueFull
        /// The queue was full, and the solution was not better than any of the existing ones.
        /// </summary>
        SignedQueueFull,
        /// <summary>
        /// >> SignedCannotPayDeposit
        /// The origin failed to pay the deposit.
        /// </summary>
        SignedCannotPayDeposit,
        /// <summary>
        /// >> SignedInvalidWitness
        /// Witness data to dispatchable is invalid.
        /// </summary>
        SignedInvalidWitness,
        /// <summary>
        /// >> SignedTooMuchWeight
        /// The signed submission consumes too much weight
        /// </summary>
        SignedTooMuchWeight,
        /// <summary>
        /// >> OcwCallWrongEra
        /// OCW submitted solution for wrong round
        /// </summary>
        OcwCallWrongEra,
        /// <summary>
        /// >> MissingSnapshotMetadata
        /// Snapshot metadata should exist but didn't.
        /// </summary>
        MissingSnapshotMetadata,
        /// <summary>
        /// >> InvalidSubmissionIndex
        /// `Self::insert_submission` returned an invalid index.
        /// </summary>
        InvalidSubmissionIndex,
        /// <summary>
        /// >> CallNotAllowed
        /// The call is not allowed at this point.
        /// </summary>
        CallNotAllowed,
        /// <summary>
        /// >> FallbackFailed
        /// The fallback failed
        /// </summary>
        FallbackFailed,
        /// <summary>
        /// >> BoundNotMet
        /// Some bound not met
        /// </summary>
        BoundNotMet,
        /// <summary>
        /// >> TooManyWinners
        /// Submitted solution has too many winners
        /// </summary>
        TooManyWinners
    }
}