//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading.Tasks;
using Substrate.NetApi.Model.Meta;
using System.Threading;
using Substrate.NetApi;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Extrinsics;

namespace Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9160
{
    public sealed class RecoveryStorage
    {
        /// <summary>
        /// Substrate client for the storage calls.
        /// </summary>
        private SubstrateClientExt _client;
        public string blockHash { get; set; } = null;

        /// <summary>
        /// >> RecoverableParams
        ///  The set of recoverable accounts and their recovery configuration.
        /// </summary>
        public static string RecoverableParams(Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Recovery", "Recoverable", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] { Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat }, new Substrate.NetApi.Model.Types.IType[] { key });
        }

        /// <summary>
        /// >> RecoverableDefault
        /// Default value as hex string
        /// </summary>
        public static string RecoverableDefault()
        {
            return "0x00";
        }

        /// <summary>
        /// >> Recoverable
        ///  The set of recoverable accounts and their recovery configuration.
        /// </summary>
        public async Task<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.pallet_recovery.RecoveryConfig> Recoverable(Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = RecoverableParams(key);
            var result = await _client.GetStorageAsync<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.pallet_recovery.RecoveryConfig>(parameters, blockHash, token);
            return result;
        }

        /// <summary>
        /// >> ActiveRecoveriesParams
        ///  Active recovery attempts.
        /// 
        ///  First account is the account to be recovered, and the second account
        ///  is the user trying to recover the account.
        /// </summary>
        public static string ActiveRecoveriesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.sp_core.crypto.AccountId32, Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Recovery", "ActiveRecoveries", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] { Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat, Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat }, key.Value);
        }

        /// <summary>
        /// >> ActiveRecoveriesDefault
        /// Default value as hex string
        /// </summary>
        public static string ActiveRecoveriesDefault()
        {
            return "0x00";
        }

        /// <summary>
        /// >> ActiveRecoveries
        ///  Active recovery attempts.
        /// 
        ///  First account is the account to be recovered, and the second account
        ///  is the user trying to recover the account.
        /// </summary>
        public async Task<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.pallet_recovery.ActiveRecovery> ActiveRecoveries(Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.sp_core.crypto.AccountId32, Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.sp_core.crypto.AccountId32> key, CancellationToken token)
        {
            string parameters = ActiveRecoveriesParams(key);
            var result = await _client.GetStorageAsync<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.pallet_recovery.ActiveRecovery>(parameters, blockHash, token);
            return result;
        }

        /// <summary>
        /// >> ProxyParams
        ///  The list of allowed proxy accounts.
        /// 
        ///  Map from the user who can access it to the recovered account.
        /// </summary>
        public static string ProxyParams(Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Recovery", "Proxy", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] { Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat }, new Substrate.NetApi.Model.Types.IType[] { key });
        }

        /// <summary>
        /// >> ProxyDefault
        /// Default value as hex string
        /// </summary>
        public static string ProxyDefault()
        {
            return "0x00";
        }

        /// <summary>
        /// >> Proxy
        ///  The list of allowed proxy accounts.
        /// 
        ///  Map from the user who can access it to the recovered account.
        /// </summary>
        public async Task<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.sp_core.crypto.AccountId32> Proxy(Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ProxyParams(key);
            var result = await _client.GetStorageAsync<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9160.sp_core.crypto.AccountId32>(parameters, blockHash, token);
            return result;
        }

        public RecoveryStorage(SubstrateClientExt client)
        {
            _client = client;
        }
    }

    public sealed class RecoveryConstants
    {
        /// <summary>
        /// >> ConfigDepositBase
        ///  The base amount of currency needed to reserve for creating a recovery configuration.
        /// 
        ///  This is held for an additional storage item whose value size is
        ///  `2 + sizeof(BlockNumber, Balance)` bytes.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ConfigDepositBase()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x042669E1030000000000000000000000");
            return result;
        }

        /// <summary>
        /// >> FriendDepositFactor
        ///  The amount of currency needed per additional user when creating a recovery
        ///  configuration.
        /// 
        ///  This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage
        ///  value.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 FriendDepositFactor()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x9A505763000000000000000000000000");
            return result;
        }

        /// <summary>
        /// >> MaxFriends
        ///  The maximum amount of friends allowed in a recovery configuration.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U16 MaxFriends()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U16();
            result.Create("0x0900");
            return result;
        }

        /// <summary>
        /// >> RecoveryDeposit
        ///  The base amount of currency needed to reserve for starting a recovery.
        /// 
        ///  This is primarily held for deterring malicious recovery attempts, and should
        ///  have a value large enough that a bad actor would choose not to place this
        ///  deposit. It also acts to fund additional storage item whose value size is
        ///  `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable
        ///  threshold.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 RecoveryDeposit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x042669E1030000000000000000000000");
            return result;
        }
    }

    public enum RecoveryErrors
    {
        /// <summary>
        /// >> NotAllowed
        /// User is not allowed to make a call on behalf of this account
        /// </summary>
        NotAllowed,
        /// <summary>
        /// >> ZeroThreshold
        /// Threshold must be greater than zero
        /// </summary>
        ZeroThreshold,
        /// <summary>
        /// >> NotEnoughFriends
        /// Friends list must be greater than zero and threshold
        /// </summary>
        NotEnoughFriends,
        /// <summary>
        /// >> MaxFriends
        /// Friends list must be less than max friends
        /// </summary>
        MaxFriends,
        /// <summary>
        /// >> NotSorted
        /// Friends list must be sorted and free of duplicates
        /// </summary>
        NotSorted,
        /// <summary>
        /// >> NotRecoverable
        /// This account is not set up for recovery
        /// </summary>
        NotRecoverable,
        /// <summary>
        /// >> AlreadyRecoverable
        /// This account is already set up for recovery
        /// </summary>
        AlreadyRecoverable,
        /// <summary>
        /// >> AlreadyStarted
        /// A recovery process has already started for this account
        /// </summary>
        AlreadyStarted,
        /// <summary>
        /// >> NotStarted
        /// A recovery process has not started for this rescuer
        /// </summary>
        NotStarted,
        /// <summary>
        /// >> NotFriend
        /// This account is not a friend who can vouch
        /// </summary>
        NotFriend,
        /// <summary>
        /// >> DelayPeriod
        /// The friend must wait until the delay period to vouch for this recovery
        /// </summary>
        DelayPeriod,
        /// <summary>
        /// >> AlreadyVouched
        /// This user has already vouched for this recovery
        /// </summary>
        AlreadyVouched,
        /// <summary>
        /// >> Threshold
        /// The threshold for recovering this account has not been met
        /// </summary>
        Threshold,
        /// <summary>
        /// >> StillActive
        /// There are still active recovery attempts that need to be closed
        /// </summary>
        StillActive,
        /// <summary>
        /// >> AlreadyProxy
        /// This account is already set up for recovery
        /// </summary>
        AlreadyProxy,
        /// <summary>
        /// >> BadState
        /// Some internal state is broken.
        /// </summary>
        BadState
    }
}