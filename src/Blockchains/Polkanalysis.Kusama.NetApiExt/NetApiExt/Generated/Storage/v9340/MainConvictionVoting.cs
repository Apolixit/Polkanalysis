//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading.Tasks;
using Substrate.NetApi.Model.Meta;
using System.Threading;
using Substrate.NetApi;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Extrinsics;

namespace Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340
{
    public sealed class ConvictionVotingStorage
    {
        /// <summary>
        /// Substrate client for the storage calls.
        /// </summary>
        private SubstrateClientExt _client;
        public string blockHash { get; set; } = null;

        /// <summary>
        /// >> VotingForParams
        ///  All voting for a particular voter in a particular voting class. We store the balance for the
        ///  number of votes that we have recorded.
        /// </summary>
        public static string VotingForParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16> key)
        {
            return RequestGenerator.GetStorage("ConvictionVoting", "VotingFor", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] { Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat, Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat }, key.Value);
        }

        /// <summary>
        /// >> VotingForDefault
        /// Default value as hex string
        /// </summary>
        public static string VotingForDefault()
        {
            return "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        }

        /// <summary>
        /// >> VotingFor
        ///  All voting for a particular voter in a particular voting class. We store the balance for the
        ///  number of votes that we have recorded.
        /// </summary>
        public async Task<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9340.pallet_conviction_voting.vote.EnumVoting> VotingFor(Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16> key, CancellationToken token)
        {
            string parameters = VotingForParams(key);
            var result = await _client.GetStorageAsync<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9340.pallet_conviction_voting.vote.EnumVoting>(parameters, blockHash, token);
            return result;
        }

        /// <summary>
        /// >> ClassLocksForParams
        ///  The voting classes which have a non-zero lock requirement and the lock amounts which they
        ///  require. The actual amount locked on behalf of this pallet should always be the maximum of
        ///  this list.
        /// </summary>
        public static string ClassLocksForParams(Polkanalysis.Kusama.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("ConvictionVoting", "ClassLocksFor", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] { Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat }, new Substrate.NetApi.Model.Types.IType[] { key });
        }

        /// <summary>
        /// >> ClassLocksForDefault
        /// Default value as hex string
        /// </summary>
        public static string ClassLocksForDefault()
        {
            return "0x00";
        }

        /// <summary>
        /// >> ClassLocksFor
        ///  The voting classes which have a non-zero lock requirement and the lock amounts which they
        ///  require. The actual amount locked on behalf of this pallet should always be the maximum of
        ///  this list.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U128>>> ClassLocksFor(Polkanalysis.Kusama.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = ClassLocksForParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U128>>>(parameters, blockHash, token);
            return result;
        }

        public ConvictionVotingStorage(SubstrateClientExt client)
        {
            _client = client;
        }
    }

    public sealed class ConvictionVotingConstants
    {
        /// <summary>
        /// >> MaxVotes
        ///  The maximum number of concurrent votes an account may have.
        /// 
        ///  Also used to compute weight, an overly large value can lead to extrinsics with large
        ///  weight estimation: see `delegate` for instance.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxVotes()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00020000");
            return result;
        }

        /// <summary>
        /// >> VoteLockingPeriod
        ///  The minimum period of vote locking.
        /// 
        ///  It should be no shorter than enactment period to ensure that in the case of an approval,
        ///  those successful voters are locked into the consequences that their votes entail.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 VoteLockingPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xC0890100");
            return result;
        }
    }

    public enum ConvictionVotingErrors
    {
        /// <summary>
        /// >> NotOngoing
        /// Poll is not ongoing.
        /// </summary>
        NotOngoing,
        /// <summary>
        /// >> NotVoter
        /// The given account did not vote on the poll.
        /// </summary>
        NotVoter,
        /// <summary>
        /// >> NoPermission
        /// The actor has no permission to conduct the action.
        /// </summary>
        NoPermission,
        /// <summary>
        /// >> NoPermissionYet
        /// The actor has no permission to conduct the action right now but will do in the future.
        /// </summary>
        NoPermissionYet,
        /// <summary>
        /// >> AlreadyDelegating
        /// The account is already delegating.
        /// </summary>
        AlreadyDelegating,
        /// <summary>
        /// >> AlreadyVoting
        /// The account currently has votes attached to it and the operation cannot succeed until
        /// these are removed, either through `unvote` or `reap_vote`.
        /// </summary>
        AlreadyVoting,
        /// <summary>
        /// >> InsufficientFunds
        /// Too high a balance was provided that the account cannot afford.
        /// </summary>
        InsufficientFunds,
        /// <summary>
        /// >> NotDelegating
        /// The account is not currently delegating.
        /// </summary>
        NotDelegating,
        /// <summary>
        /// >> Nonsense
        /// Delegation to oneself makes no sense.
        /// </summary>
        Nonsense,
        /// <summary>
        /// >> MaxVotesReached
        /// Maximum number of votes reached.
        /// </summary>
        MaxVotesReached,
        /// <summary>
        /// >> ClassNeeded
        /// The class must be supplied since it is not easily determinable from the state.
        /// </summary>
        ClassNeeded,
        /// <summary>
        /// >> BadClass
        /// The class ID supplied is invalid.
        /// </summary>
        BadClass
    }
}