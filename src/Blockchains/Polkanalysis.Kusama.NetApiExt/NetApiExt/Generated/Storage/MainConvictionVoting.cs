//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading.Tasks;
using Substrate.NetApi.Model.Meta;
using System.Threading;
using Substrate.NetApi;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Extrinsics;

namespace Polkanalysis.Kusama.NetApiExt.Generated.Storage
{
    public sealed class ConvictionVotingStorage
    {
        /// <summary>
        /// Substrate client for the storage calls.
        /// </summary>
        private SubstrateClientExt _client;
        public string blockHash { get; set; } = null;

        public async Task<uint> GetVersionAsync(CancellationToken token)
        {
            var result = await _client.State.GetRuntimeVersionAtAsync(blockHash, token);
            return result.SpecVersion;
        }

        /// <summary>
        /// Storage for SpecVersion 9430
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ConvictionVotingStorage _convictionVotingStorageV9430;
        /// <summary>
        /// Storage for SpecVersion 9420
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ConvictionVotingStorage _convictionVotingStorageV9420;
        /// <summary>
        /// Storage for SpecVersion 9381
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ConvictionVotingStorage _convictionVotingStorageV9381;
        /// <summary>
        /// Storage for SpecVersion 9370
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ConvictionVotingStorage _convictionVotingStorageV9370;
        /// <summary>
        /// Storage for SpecVersion 9360
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ConvictionVotingStorage _convictionVotingStorageV9360;
        /// <summary>
        /// Storage for SpecVersion 9350
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ConvictionVotingStorage _convictionVotingStorageV9350;
        /// <summary>
        /// Storage for SpecVersion 9340
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ConvictionVotingStorage _convictionVotingStorageV9340;
        /// <summary>
        /// Storage for SpecVersion 9320
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ConvictionVotingStorage _convictionVotingStorageV9320;
        /// <summary>
        /// >> VotingForParams
        ///  All voting for a particular voter in a particular voting class. We store the balance for the
        ///  number of votes that we have recorded.
        /// </summary>
        public static string VotingForParams(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ConvictionVotingStorage.VotingForParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key);
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ConvictionVotingStorage.VotingForParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key);
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ConvictionVotingStorage.VotingForParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9381.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key);
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ConvictionVotingStorage.VotingForParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key);
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ConvictionVotingStorage.VotingForParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key);
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ConvictionVotingStorage.VotingForParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9350.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key);
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ConvictionVotingStorage.VotingForParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key);
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ConvictionVotingStorage.VotingForParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9320.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> VotingForDefault
        /// Default value as hex string
        /// </summary>
        public static string VotingForDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ConvictionVotingStorage.VotingForDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ConvictionVotingStorage.VotingForDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ConvictionVotingStorage.VotingForDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ConvictionVotingStorage.VotingForDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ConvictionVotingStorage.VotingForDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ConvictionVotingStorage.VotingForDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ConvictionVotingStorage.VotingForDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ConvictionVotingStorage.VotingForDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> VotingFor
        ///  All voting for a particular voter in a particular voting class. We store the balance for the
        ///  number of votes that we have recorded.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum> VotingForAsync(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum param = null;
            if (version == 9430U)
            {
                _convictionVotingStorageV9430.blockHash = blockHash;
                param = await _convictionVotingStorageV9430.VotingFor((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key,token);
            }

            if (version == 9420U)
            {
                _convictionVotingStorageV9420.blockHash = blockHash;
                param = await _convictionVotingStorageV9420.VotingFor((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key,token);
            }

            if (version == 9381U)
            {
                _convictionVotingStorageV9381.blockHash = blockHash;
                param = await _convictionVotingStorageV9381.VotingFor((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9381.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key,token);
            }

            if (version == 9370U)
            {
                _convictionVotingStorageV9370.blockHash = blockHash;
                param = await _convictionVotingStorageV9370.VotingFor((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key,token);
            }

            if (version == 9360U)
            {
                _convictionVotingStorageV9360.blockHash = blockHash;
                param = await _convictionVotingStorageV9360.VotingFor((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key,token);
            }

            if (version == 9350U)
            {
                _convictionVotingStorageV9350.blockHash = blockHash;
                param = await _convictionVotingStorageV9350.VotingFor((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9350.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key,token);
            }

            if (version == 9340U)
            {
                _convictionVotingStorageV9340.blockHash = blockHash;
                param = await _convictionVotingStorageV9340.VotingFor((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key,token);
            }

            if (version == 9320U)
            {
                _convictionVotingStorageV9320.blockHash = blockHash;
                param = await _convictionVotingStorageV9320.VotingFor((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Kusama.NetApiExt.Generated.Model.v9320.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U16>)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ClassLocksForParams
        ///  The voting classes which have a non-zero lock requirement and the lock amounts which they
        ///  require. The actual amount locked on behalf of this pallet should always be the maximum of
        ///  this list.
        /// </summary>
        public static string ClassLocksForParams(Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ConvictionVotingStorage.ClassLocksForParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key);
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ConvictionVotingStorage.ClassLocksForParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key);
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ConvictionVotingStorage.ClassLocksForParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9381.sp_core.crypto.AccountId32)key);
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ConvictionVotingStorage.ClassLocksForParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key);
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ConvictionVotingStorage.ClassLocksForParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key);
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ConvictionVotingStorage.ClassLocksForParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9350.sp_core.crypto.AccountId32)key);
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ConvictionVotingStorage.ClassLocksForParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key);
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ConvictionVotingStorage.ClassLocksForParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9320.sp_core.crypto.AccountId32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ClassLocksForDefault
        /// Default value as hex string
        /// </summary>
        public static string ClassLocksForDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ConvictionVotingStorage.ClassLocksForDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ConvictionVotingStorage.ClassLocksForDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ConvictionVotingStorage.ClassLocksForDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ConvictionVotingStorage.ClassLocksForDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ConvictionVotingStorage.ClassLocksForDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ConvictionVotingStorage.ClassLocksForDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ConvictionVotingStorage.ClassLocksForDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ConvictionVotingStorage.ClassLocksForDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ClassLocksFor
        ///  The voting classes which have a non-zero lock requirement and the lock amounts which they
        ///  require. The actual amount locked on behalf of this pallet should always be the maximum of
        ///  this list.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> ClassLocksForAsync(Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9430U)
            {
                _convictionVotingStorageV9430.blockHash = blockHash;
                param = await _convictionVotingStorageV9430.ClassLocksFor((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9420U)
            {
                _convictionVotingStorageV9420.blockHash = blockHash;
                param = await _convictionVotingStorageV9420.ClassLocksFor((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9381U)
            {
                _convictionVotingStorageV9381.blockHash = blockHash;
                param = await _convictionVotingStorageV9381.ClassLocksFor((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9381.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9370U)
            {
                _convictionVotingStorageV9370.blockHash = blockHash;
                param = await _convictionVotingStorageV9370.ClassLocksFor((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9360U)
            {
                _convictionVotingStorageV9360.blockHash = blockHash;
                param = await _convictionVotingStorageV9360.ClassLocksFor((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9350U)
            {
                _convictionVotingStorageV9350.blockHash = blockHash;
                param = await _convictionVotingStorageV9350.ClassLocksFor((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9350.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9340U)
            {
                _convictionVotingStorageV9340.blockHash = blockHash;
                param = await _convictionVotingStorageV9340.ClassLocksFor((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9320U)
            {
                _convictionVotingStorageV9320.blockHash = blockHash;
                param = await _convictionVotingStorageV9320.ClassLocksFor((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9320.sp_core.crypto.AccountId32)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        public ConvictionVotingStorage(SubstrateClientExt client)
        {
            _client = client;
            _convictionVotingStorageV9430 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ConvictionVotingStorage(_client);
            _convictionVotingStorageV9420 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ConvictionVotingStorage(_client);
            _convictionVotingStorageV9381 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ConvictionVotingStorage(_client);
            _convictionVotingStorageV9370 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ConvictionVotingStorage(_client);
            _convictionVotingStorageV9360 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ConvictionVotingStorage(_client);
            _convictionVotingStorageV9350 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ConvictionVotingStorage(_client);
            _convictionVotingStorageV9340 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ConvictionVotingStorage(_client);
            _convictionVotingStorageV9320 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ConvictionVotingStorage(_client);
        }
    }

    public sealed class ConvictionVotingConstants
    {
        /// <summary>
        /// >> MaxVotes
        ///  The maximum number of concurrent votes an account may have.
        /// 
        ///  Also used to compute weight, an overly large value can lead to extrinsics with large
        ///  weight estimation: see `delegate` for instance.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxVotes(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ConvictionVotingConstants().MaxVotes();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ConvictionVotingConstants().MaxVotes();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ConvictionVotingConstants().MaxVotes();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ConvictionVotingConstants().MaxVotes();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ConvictionVotingConstants().MaxVotes();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ConvictionVotingConstants().MaxVotes();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ConvictionVotingConstants().MaxVotes();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ConvictionVotingConstants().MaxVotes();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> VoteLockingPeriod
        ///  The minimum period of vote locking.
        /// 
        ///  It should be no shorter than enactment period to ensure that in the case of an approval,
        ///  those successful voters are locked into the consequences that their votes entail.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 VoteLockingPeriod(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.ConvictionVotingConstants().VoteLockingPeriod();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.ConvictionVotingConstants().VoteLockingPeriod();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.ConvictionVotingConstants().VoteLockingPeriod();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.ConvictionVotingConstants().VoteLockingPeriod();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.ConvictionVotingConstants().VoteLockingPeriod();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.ConvictionVotingConstants().VoteLockingPeriod();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.ConvictionVotingConstants().VoteLockingPeriod();
            if (version == 9320U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.ConvictionVotingConstants().VoteLockingPeriod();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }
    }

    public enum ConvictionVotingErrors
    {
        /// <summary>
        /// >> NotOngoing
        /// Poll is not ongoing.
        /// </summary>
        NotOngoing,
        /// <summary>
        /// >> NotVoter
        /// The given account did not vote on the poll.
        /// </summary>
        NotVoter,
        /// <summary>
        /// >> NoPermission
        /// The actor has no permission to conduct the action.
        /// </summary>
        NoPermission,
        /// <summary>
        /// >> NoPermissionYet
        /// The actor has no permission to conduct the action right now but will do in the future.
        /// </summary>
        NoPermissionYet,
        /// <summary>
        /// >> AlreadyDelegating
        /// The account is already delegating.
        /// </summary>
        AlreadyDelegating,
        /// <summary>
        /// >> AlreadyVoting
        /// The account currently has votes attached to it and the operation cannot succeed until
        /// these are removed, either through `unvote` or `reap_vote`.
        /// </summary>
        AlreadyVoting,
        /// <summary>
        /// >> InsufficientFunds
        /// Too high a balance was provided that the account cannot afford.
        /// </summary>
        InsufficientFunds,
        /// <summary>
        /// >> NotDelegating
        /// The account is not currently delegating.
        /// </summary>
        NotDelegating,
        /// <summary>
        /// >> Nonsense
        /// Delegation to oneself makes no sense.
        /// </summary>
        Nonsense,
        /// <summary>
        /// >> MaxVotesReached
        /// Maximum number of votes reached.
        /// </summary>
        MaxVotesReached,
        /// <summary>
        /// >> ClassNeeded
        /// The class must be supplied since it is not easily determinable from the state.
        /// </summary>
        ClassNeeded,
        /// <summary>
        /// >> BadClass
        /// The class ID supplied is invalid.
        /// </summary>
        BadClass
    }
}