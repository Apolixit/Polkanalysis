//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading.Tasks;
using Substrate.NetApi.Model.Meta;
using System.Threading;
using Substrate.NetApi;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Extrinsics;

namespace Polkanalysis.Kusama.NetApiExt.Generated.Storage
{
    public sealed class NisStorage
    {
        /// <summary>
        /// Substrate client for the storage calls.
        /// </summary>
        private SubstrateClientExt _client;
        public string blockHash { get; set; } = null;

        public async Task<uint> GetVersionAsync(CancellationToken token)
        {
            var result = await _client.State.GetRuntimeVersionAtAsync(blockHash, token);
            return result.SpecVersion;
        }

        /// <summary>
        /// Storage for SpecVersion 9430
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisStorage _nisStorageV9430;
        /// <summary>
        /// Storage for SpecVersion 9420
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisStorage _nisStorageV9420;
        /// <summary>
        /// Storage for SpecVersion 9381
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisStorage _nisStorageV9381;
        /// <summary>
        /// Storage for SpecVersion 9370
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisStorage _nisStorageV9370;
        /// <summary>
        /// Storage for SpecVersion 9360
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisStorage _nisStorageV9360;
        /// <summary>
        /// Storage for SpecVersion 9350
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisStorage _nisStorageV9350;
        /// <summary>
        /// Storage for SpecVersion 9340
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisStorage _nisStorageV9340;
        /// <summary>
        /// >> QueueTotalsParams
        ///  The totals of items and balances within each queue. Saves a lot of storage reads in the
        ///  case of sparsely packed queues.
        /// 
        ///  The vector is indexed by duration in `Period`s, offset by one, so information on the queue
        ///  whose duration is one `Period` would be storage `0`.
        /// </summary>
        public static string QueueTotalsParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisStorage.QueueTotalsParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisStorage.QueueTotalsParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisStorage.QueueTotalsParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisStorage.QueueTotalsParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisStorage.QueueTotalsParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisStorage.QueueTotalsParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisStorage.QueueTotalsParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> QueueTotalsDefault
        /// Default value as hex string
        /// </summary>
        public static string QueueTotalsDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisStorage.QueueTotalsDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisStorage.QueueTotalsDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisStorage.QueueTotalsDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisStorage.QueueTotalsDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisStorage.QueueTotalsDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisStorage.QueueTotalsDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisStorage.QueueTotalsDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> QueueTotals
        ///  The totals of items and balances within each queue. Saves a lot of storage reads in the
        ///  case of sparsely packed queues.
        /// 
        ///  The vector is indexed by duration in `Period`s, offset by one, so information on the queue
        ///  whose duration is one `Period` would be storage `0`.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> QueueTotalsAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9430U)
            {
                _nisStorageV9430.blockHash = blockHash;
                param = await _nisStorageV9430.QueueTotals(token);
            }

            if (version == 9420U)
            {
                _nisStorageV9420.blockHash = blockHash;
                param = await _nisStorageV9420.QueueTotals(token);
            }

            if (version == 9381U)
            {
                _nisStorageV9381.blockHash = blockHash;
                param = await _nisStorageV9381.QueueTotals(token);
            }

            if (version == 9370U)
            {
                _nisStorageV9370.blockHash = blockHash;
                param = await _nisStorageV9370.QueueTotals(token);
            }

            if (version == 9360U)
            {
                _nisStorageV9360.blockHash = blockHash;
                param = await _nisStorageV9360.QueueTotals(token);
            }

            if (version == 9350U)
            {
                _nisStorageV9350.blockHash = blockHash;
                param = await _nisStorageV9350.QueueTotals(token);
            }

            if (version == 9340U)
            {
                _nisStorageV9340.blockHash = blockHash;
                param = await _nisStorageV9340.QueueTotals(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> QueuesParams
        ///  The queues of bids. Indexed by duration (in `Period`s).
        /// </summary>
        public static string QueuesParams(Substrate.NetApi.Model.Types.Primitive.U32 key, uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisStorage.QueuesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisStorage.QueuesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisStorage.QueuesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisStorage.QueuesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisStorage.QueuesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisStorage.QueuesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisStorage.QueuesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> QueuesDefault
        /// Default value as hex string
        /// </summary>
        public static string QueuesDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisStorage.QueuesDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisStorage.QueuesDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisStorage.QueuesDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisStorage.QueuesDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisStorage.QueuesDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisStorage.QueuesDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisStorage.QueuesDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Queues
        ///  The queues of bids. Indexed by duration (in `Period`s).
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> QueuesAsync(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9430U)
            {
                _nisStorageV9430.blockHash = blockHash;
                param = await _nisStorageV9430.Queues((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9420U)
            {
                _nisStorageV9420.blockHash = blockHash;
                param = await _nisStorageV9420.Queues((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9381U)
            {
                _nisStorageV9381.blockHash = blockHash;
                param = await _nisStorageV9381.Queues((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9370U)
            {
                _nisStorageV9370.blockHash = blockHash;
                param = await _nisStorageV9370.Queues((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9360U)
            {
                _nisStorageV9360.blockHash = blockHash;
                param = await _nisStorageV9360.Queues((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9350U)
            {
                _nisStorageV9350.blockHash = blockHash;
                param = await _nisStorageV9350.Queues((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9340U)
            {
                _nisStorageV9340.blockHash = blockHash;
                param = await _nisStorageV9340.Queues((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SummaryParams
        ///  Summary information over the general state.
        /// </summary>
        public static string SummaryParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisStorage.SummaryParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisStorage.SummaryParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisStorage.SummaryParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisStorage.SummaryParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisStorage.SummaryParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisStorage.SummaryParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisStorage.SummaryParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SummaryDefault
        /// Default value as hex string
        /// </summary>
        public static string SummaryDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisStorage.SummaryDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisStorage.SummaryDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisStorage.SummaryDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisStorage.SummaryDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisStorage.SummaryDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisStorage.SummaryDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisStorage.SummaryDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Summary
        ///  Summary information over the general state.
        /// </summary>
        public async Task<Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_nis.pallet.SummaryRecordBase> SummaryAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_nis.pallet.SummaryRecordBase param = null;
            if (version == 9430U)
            {
                _nisStorageV9430.blockHash = blockHash;
                param = await _nisStorageV9430.Summary(token);
            }

            if (version == 9420U)
            {
                _nisStorageV9420.blockHash = blockHash;
                param = await _nisStorageV9420.Summary(token);
            }

            if (version == 9381U)
            {
                _nisStorageV9381.blockHash = blockHash;
                param = await _nisStorageV9381.Summary(token);
            }

            if (version == 9370U)
            {
                _nisStorageV9370.blockHash = blockHash;
                param = await _nisStorageV9370.Summary(token);
            }

            if (version == 9360U)
            {
                _nisStorageV9360.blockHash = blockHash;
                param = await _nisStorageV9360.Summary(token);
            }

            if (version == 9350U)
            {
                _nisStorageV9350.blockHash = blockHash;
                param = await _nisStorageV9350.Summary(token);
            }

            if (version == 9340U)
            {
                _nisStorageV9340.blockHash = blockHash;
                param = await _nisStorageV9340.Summary(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ReceiptsParams
        ///  The currently outstanding receipts, indexed according to the order of creation.
        /// </summary>
        public static string ReceiptsParams(Substrate.NetApi.Model.Types.Primitive.U32 key, uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisStorage.ReceiptsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisStorage.ReceiptsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisStorage.ReceiptsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisStorage.ReceiptsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisStorage.ReceiptsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisStorage.ReceiptsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisStorage.ReceiptsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ReceiptsDefault
        /// Default value as hex string
        /// </summary>
        public static string ReceiptsDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisStorage.ReceiptsDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisStorage.ReceiptsDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisStorage.ReceiptsDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisStorage.ReceiptsDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisStorage.ReceiptsDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisStorage.ReceiptsDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisStorage.ReceiptsDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Receipts
        ///  The currently outstanding receipts, indexed according to the order of creation.
        /// </summary>
        public async Task<Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_nis.pallet.ReceiptRecordBase> ReceiptsAsync(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_nis.pallet.ReceiptRecordBase param = null;
            if (version == 9430U)
            {
                _nisStorageV9430.blockHash = blockHash;
                param = await _nisStorageV9430.Receipts((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9420U)
            {
                _nisStorageV9420.blockHash = blockHash;
                param = await _nisStorageV9420.Receipts((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9381U)
            {
                _nisStorageV9381.blockHash = blockHash;
                param = await _nisStorageV9381.Receipts((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9370U)
            {
                _nisStorageV9370.blockHash = blockHash;
                param = await _nisStorageV9370.Receipts((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9360U)
            {
                _nisStorageV9360.blockHash = blockHash;
                param = await _nisStorageV9360.Receipts((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9350U)
            {
                _nisStorageV9350.blockHash = blockHash;
                param = await _nisStorageV9350.Receipts((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9340U)
            {
                _nisStorageV9340.blockHash = blockHash;
                param = await _nisStorageV9340.Receipts((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        public NisStorage(SubstrateClientExt client)
        {
            _client = client;
            _nisStorageV9430 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisStorage(_client);
            _nisStorageV9420 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisStorage(_client);
            _nisStorageV9381 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisStorage(_client);
            _nisStorageV9370 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisStorage(_client);
            _nisStorageV9360 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisStorage(_client);
            _nisStorageV9350 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisStorage(_client);
            _nisStorageV9340 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisStorage(_client);
        }
    }

    public sealed class NisConstants
    {
        /// <summary>
        /// >> PalletId
        ///  The treasury's pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.frame_support.PalletIdBase PalletId(uint version)
        {
            Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.frame_support.PalletIdBase result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisConstants().PalletId();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisConstants().PalletId();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisConstants().PalletId();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisConstants().PalletId();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisConstants().PalletId();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisConstants().PalletId();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisConstants().PalletId();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> HoldReason
        ///  The identifier of the hold reason.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum HoldReason(uint version)
        {
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisConstants().HoldReason();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisConstants().HoldReason();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> QueueCount
        ///  Number of duration queues in total. This sets the maximum duration supported, which is
        ///  this value multiplied by `Period`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 QueueCount(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisConstants().QueueCount();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisConstants().QueueCount();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisConstants().QueueCount();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisConstants().QueueCount();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisConstants().QueueCount();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisConstants().QueueCount();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisConstants().QueueCount();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MaxQueueLen
        ///  Maximum number of items that may be in each duration queue.
        /// 
        ///  Must be larger than zero.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxQueueLen(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisConstants().MaxQueueLen();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisConstants().MaxQueueLen();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisConstants().MaxQueueLen();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisConstants().MaxQueueLen();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisConstants().MaxQueueLen();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisConstants().MaxQueueLen();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisConstants().MaxQueueLen();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> FifoQueueLen
        ///  Portion of the queue which is free from ordering and just a FIFO.
        /// 
        ///  Must be no greater than `MaxQueueLen`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 FifoQueueLen(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisConstants().FifoQueueLen();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisConstants().FifoQueueLen();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisConstants().FifoQueueLen();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisConstants().FifoQueueLen();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisConstants().FifoQueueLen();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisConstants().FifoQueueLen();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisConstants().FifoQueueLen();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> BasePeriod
        ///  The base period for the duration queues. This is the common multiple across all
        ///  supported freezing durations that can be bid upon.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 BasePeriod(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisConstants().BasePeriod();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisConstants().BasePeriod();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisConstants().BasePeriod();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisConstants().BasePeriod();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisConstants().BasePeriod();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisConstants().BasePeriod();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisConstants().BasePeriod();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MinBid
        ///  The minimum amount of funds that may be placed in a bid. Note that this
        ///  does not actually limit the amount which may be represented in a receipt since bids may
        ///  be split up by the system.
        /// 
        ///  It should be at least big enough to ensure that there is no possible storage spam attack
        ///  or queue-filling attack.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 MinBid(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U128 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisConstants().MinBid();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisConstants().MinBid();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisConstants().MinBid();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisConstants().MinBid();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisConstants().MinBid();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisConstants().MinBid();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisConstants().MinBid();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MinReceipt
        ///  The minimum amount of funds which may intentionally be left remaining under a single
        ///  receipt.
        /// </summary>
        public Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.sp_arithmetic.per_things.PerquintillBase MinReceipt(uint version)
        {
            Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.sp_arithmetic.per_things.PerquintillBase result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisConstants().MinReceipt();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisConstants().MinReceipt();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisConstants().MinReceipt();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisConstants().MinReceipt();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisConstants().MinReceipt();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisConstants().MinReceipt();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisConstants().MinReceipt();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> IntakePeriod
        ///  The number of blocks between consecutive attempts to dequeue bids and create receipts.
        /// 
        ///  A larger value results in fewer storage hits each block, but a slower period to get to
        ///  the target.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 IntakePeriod(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisConstants().IntakePeriod();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisConstants().IntakePeriod();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisConstants().IntakePeriod();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisConstants().IntakePeriod();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisConstants().IntakePeriod();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisConstants().IntakePeriod();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisConstants().IntakePeriod();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MaxIntakeWeight
        ///  The maximum amount of bids that can consolidated into receipts in a single intake. A
        ///  larger value here means less of the block available for transactions should there be a
        ///  glut of bids.
        /// </summary>
        public Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.sp_weights.weight_v2.WeightBase MaxIntakeWeight(uint version)
        {
            Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.sp_weights.weight_v2.WeightBase result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisConstants().MaxIntakeWeight();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisConstants().MaxIntakeWeight();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisConstants().MaxIntakeWeight();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisConstants().MaxIntakeWeight();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisConstants().MaxIntakeWeight();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisConstants().MaxIntakeWeight();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisConstants().MaxIntakeWeight();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> ThawThrottle
        ///  The maximum proportion which may be thawed and the period over which it is reset.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable ThawThrottle(uint version)
        {
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.NisConstants().ThawThrottle();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.NisConstants().ThawThrottle();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisConstants().ThawThrottle();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.NisConstants().ThawThrottle();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.NisConstants().ThawThrottle();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.NisConstants().ThawThrottle();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.NisConstants().ThawThrottle();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> ReserveId
        ///  The name for the reserve ID.
        /// </summary>
        public Polkanalysis.Kusama.NetApiExt.Generated.Types.Base.Arr8U8 ReserveId(uint version)
        {
            Polkanalysis.Kusama.NetApiExt.Generated.Types.Base.Arr8U8 result = null;
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.NisConstants().ReserveId();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }
    }

    public enum NisErrors
    {
        /// <summary>
        /// >> DurationTooSmall
        /// The duration of the bid is less than one.
        /// </summary>
        DurationTooSmall,
        /// <summary>
        /// >> DurationTooBig
        /// The duration is the bid is greater than the number of queues.
        /// </summary>
        DurationTooBig,
        /// <summary>
        /// >> AmountTooSmall
        /// The amount of the bid is less than the minimum allowed.
        /// </summary>
        AmountTooSmall,
        /// <summary>
        /// >> BidTooLow
        /// The queue for the bid's duration is full and the amount bid is too low to get in
        /// through replacing an existing bid.
        /// </summary>
        BidTooLow,
        /// <summary>
        /// >> UnknownReceipt
        /// Receipt index is unknown.
        /// </summary>
        UnknownReceipt,
        /// <summary>
        /// >> NotOwner
        /// Not the owner of the receipt.
        /// </summary>
        NotOwner,
        /// <summary>
        /// >> NotExpired
        /// Bond not yet at expiry date.
        /// </summary>
        NotExpired,
        /// <summary>
        /// >> UnknownBid
        /// The given bid for retraction is not found.
        /// </summary>
        UnknownBid,
        /// <summary>
        /// >> PortionTooBig
        /// The portion supplied is beyond the value of the receipt.
        /// </summary>
        PortionTooBig,
        /// <summary>
        /// >> Unfunded
        /// Not enough funds are held to pay out.
        /// </summary>
        Unfunded,
        /// <summary>
        /// >> AlreadyFunded
        /// There are enough funds for what is required.
        /// </summary>
        AlreadyFunded,
        /// <summary>
        /// >> Throttled
        /// The thaw throttle has been reached for this period.
        /// </summary>
        Throttled,
        /// <summary>
        /// >> MakesDust
        /// The operation would result in a receipt worth an insignficant value.
        /// </summary>
        MakesDust,
        /// <summary>
        /// >> AlreadyCommunal
        /// The receipt is already communal.
        /// </summary>
        AlreadyCommunal,
        /// <summary>
        /// >> AlreadyPrivate
        /// The receipt is already private.
        /// </summary>
        AlreadyPrivate,
        /// <summary>
        /// >> Unknown
        /// Bond index is unknown.
        /// </summary>
        Unknown,
        /// <summary>
        /// >> NotFound
        /// The given bid for retraction is not found.
        /// </summary>
        NotFound,
        /// <summary>
        /// >> TooMuch
        /// The portion supplied is beyond the value of the receipt.
        /// </summary>
        TooMuch,
        /// <summary>
        /// >> Funded
        /// There are enough funds for what is required.
        /// </summary>
        Funded
    }
}