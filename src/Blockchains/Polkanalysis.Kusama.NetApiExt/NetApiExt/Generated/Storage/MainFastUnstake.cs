//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading.Tasks;
using Substrate.NetApi.Model.Meta;
using System.Threading;
using Substrate.NetApi;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Extrinsics;

namespace Polkanalysis.Kusama.NetApiExt.Generated.Storage
{
    public sealed class FastUnstakeStorage
    {
        /// <summary>
        /// Substrate client for the storage calls.
        /// </summary>
        private SubstrateClientExt _client;
        public string blockHash { get; set; } = null;

        public async Task<uint> GetVersionAsync(CancellationToken token)
        {
            var result = await _client.State.GetRuntimeVersionAtAsync(blockHash, token);
            return result.SpecVersion;
        }

        /// <summary>
        /// Storage for SpecVersion 9430
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.FastUnstakeStorage _fastUnstakeStorageV9430;
        /// <summary>
        /// Storage for SpecVersion 9420
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.FastUnstakeStorage _fastUnstakeStorageV9420;
        /// <summary>
        /// Storage for SpecVersion 9381
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.FastUnstakeStorage _fastUnstakeStorageV9381;
        /// <summary>
        /// Storage for SpecVersion 9370
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.FastUnstakeStorage _fastUnstakeStorageV9370;
        /// <summary>
        /// Storage for SpecVersion 9360
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.FastUnstakeStorage _fastUnstakeStorageV9360;
        /// <summary>
        /// Storage for SpecVersion 9350
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.FastUnstakeStorage _fastUnstakeStorageV9350;
        /// <summary>
        /// Storage for SpecVersion 9340
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.FastUnstakeStorage _fastUnstakeStorageV9340;
        /// <summary>
        /// Storage for SpecVersion 9320
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.FastUnstakeStorage _fastUnstakeStorageV9320;
        /// <summary>
        /// Storage for SpecVersion 9300
        /// </summary>
        private Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.FastUnstakeStorage _fastUnstakeStorageV9300;
        /// <summary>
        /// >> HeadParams
        ///  The current "head of the queue" being unstaked.
        /// </summary>
        public static string HeadParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.FastUnstakeStorage.HeadParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.FastUnstakeStorage.HeadParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.FastUnstakeStorage.HeadParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.FastUnstakeStorage.HeadParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.FastUnstakeStorage.HeadParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.FastUnstakeStorage.HeadParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.FastUnstakeStorage.HeadParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.FastUnstakeStorage.HeadParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.FastUnstakeStorage.HeadParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> HeadDefault
        /// Default value as hex string
        /// </summary>
        public static string HeadDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.FastUnstakeStorage.HeadDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.FastUnstakeStorage.HeadDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.FastUnstakeStorage.HeadDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.FastUnstakeStorage.HeadDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.FastUnstakeStorage.HeadDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.FastUnstakeStorage.HeadDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.FastUnstakeStorage.HeadDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.FastUnstakeStorage.HeadDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.FastUnstakeStorage.HeadDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Head
        ///  The current "head of the queue" being unstaked.
        /// </summary>
        public async Task<Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_fast_unstake.types.UnstakeRequestBase> HeadAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.pallet_fast_unstake.types.UnstakeRequestBase param = null;
            if (version == 9430U)
            {
                _fastUnstakeStorageV9430.blockHash = blockHash;
                param = await _fastUnstakeStorageV9430.Head(token);
            }

            if (version == 9420U)
            {
                _fastUnstakeStorageV9420.blockHash = blockHash;
                param = await _fastUnstakeStorageV9420.Head(token);
            }

            if (version == 9381U)
            {
                _fastUnstakeStorageV9381.blockHash = blockHash;
                param = await _fastUnstakeStorageV9381.Head(token);
            }

            if (version == 9370U)
            {
                _fastUnstakeStorageV9370.blockHash = blockHash;
                param = await _fastUnstakeStorageV9370.Head(token);
            }

            if (version == 9360U)
            {
                _fastUnstakeStorageV9360.blockHash = blockHash;
                param = await _fastUnstakeStorageV9360.Head(token);
            }

            if (version == 9350U)
            {
                _fastUnstakeStorageV9350.blockHash = blockHash;
                param = await _fastUnstakeStorageV9350.Head(token);
            }

            if (version == 9340U)
            {
                _fastUnstakeStorageV9340.blockHash = blockHash;
                param = await _fastUnstakeStorageV9340.Head(token);
            }

            if (version == 9320U)
            {
                _fastUnstakeStorageV9320.blockHash = blockHash;
                param = await _fastUnstakeStorageV9320.Head(token);
            }

            if (version == 9300U)
            {
                _fastUnstakeStorageV9300.blockHash = blockHash;
                param = await _fastUnstakeStorageV9300.Head(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> QueueParams
        ///  The map of all accounts wishing to be unstaked.
        /// 
        ///  Keeps track of `AccountId` wishing to unstake and it's corresponding deposit.
        /// 
        ///  TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        /// </summary>
        public static string QueueParams(Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.FastUnstakeStorage.QueueParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key);
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.FastUnstakeStorage.QueueParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key);
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.FastUnstakeStorage.QueueParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9381.sp_core.crypto.AccountId32)key);
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.FastUnstakeStorage.QueueParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key);
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.FastUnstakeStorage.QueueParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key);
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.FastUnstakeStorage.QueueParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9350.sp_core.crypto.AccountId32)key);
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.FastUnstakeStorage.QueueParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key);
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.FastUnstakeStorage.QueueParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9320.sp_core.crypto.AccountId32)key);
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.FastUnstakeStorage.QueueParams((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> QueueDefault
        /// Default value as hex string
        /// </summary>
        public static string QueueDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.FastUnstakeStorage.QueueDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.FastUnstakeStorage.QueueDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.FastUnstakeStorage.QueueDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.FastUnstakeStorage.QueueDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.FastUnstakeStorage.QueueDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.FastUnstakeStorage.QueueDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.FastUnstakeStorage.QueueDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.FastUnstakeStorage.QueueDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.FastUnstakeStorage.QueueDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Queue
        ///  The map of all accounts wishing to be unstaked.
        /// 
        ///  Keeps track of `AccountId` wishing to unstake and it's corresponding deposit.
        /// 
        ///  TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> QueueAsync(Polkanalysis.Kusama.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U128 param = null;
            if (version == 9430U)
            {
                _fastUnstakeStorageV9430.blockHash = blockHash;
                param = await _fastUnstakeStorageV9430.Queue((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9420U)
            {
                _fastUnstakeStorageV9420.blockHash = blockHash;
                param = await _fastUnstakeStorageV9420.Queue((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9381U)
            {
                _fastUnstakeStorageV9381.blockHash = blockHash;
                param = await _fastUnstakeStorageV9381.Queue((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9381.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9370U)
            {
                _fastUnstakeStorageV9370.blockHash = blockHash;
                param = await _fastUnstakeStorageV9370.Queue((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9360U)
            {
                _fastUnstakeStorageV9360.blockHash = blockHash;
                param = await _fastUnstakeStorageV9360.Queue((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9350U)
            {
                _fastUnstakeStorageV9350.blockHash = blockHash;
                param = await _fastUnstakeStorageV9350.Queue((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9350.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9340U)
            {
                _fastUnstakeStorageV9340.blockHash = blockHash;
                param = await _fastUnstakeStorageV9340.Queue((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9320U)
            {
                _fastUnstakeStorageV9320.blockHash = blockHash;
                param = await _fastUnstakeStorageV9320.Queue((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9320.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9300U)
            {
                _fastUnstakeStorageV9300.blockHash = blockHash;
                param = await _fastUnstakeStorageV9300.Queue((Polkanalysis.Kusama.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CounterForQueueParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForQueueParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.FastUnstakeStorage.CounterForQueueParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.FastUnstakeStorage.CounterForQueueParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.FastUnstakeStorage.CounterForQueueParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.FastUnstakeStorage.CounterForQueueParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.FastUnstakeStorage.CounterForQueueParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.FastUnstakeStorage.CounterForQueueParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.FastUnstakeStorage.CounterForQueueParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.FastUnstakeStorage.CounterForQueueParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.FastUnstakeStorage.CounterForQueueParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CounterForQueueDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForQueueDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.FastUnstakeStorage.CounterForQueueDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.FastUnstakeStorage.CounterForQueueDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.FastUnstakeStorage.CounterForQueueDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.FastUnstakeStorage.CounterForQueueDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.FastUnstakeStorage.CounterForQueueDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.FastUnstakeStorage.CounterForQueueDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.FastUnstakeStorage.CounterForQueueDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.FastUnstakeStorage.CounterForQueueDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.FastUnstakeStorage.CounterForQueueDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CounterForQueue
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForQueueAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9430U)
            {
                _fastUnstakeStorageV9430.blockHash = blockHash;
                param = await _fastUnstakeStorageV9430.CounterForQueue(token);
            }

            if (version == 9420U)
            {
                _fastUnstakeStorageV9420.blockHash = blockHash;
                param = await _fastUnstakeStorageV9420.CounterForQueue(token);
            }

            if (version == 9381U)
            {
                _fastUnstakeStorageV9381.blockHash = blockHash;
                param = await _fastUnstakeStorageV9381.CounterForQueue(token);
            }

            if (version == 9370U)
            {
                _fastUnstakeStorageV9370.blockHash = blockHash;
                param = await _fastUnstakeStorageV9370.CounterForQueue(token);
            }

            if (version == 9360U)
            {
                _fastUnstakeStorageV9360.blockHash = blockHash;
                param = await _fastUnstakeStorageV9360.CounterForQueue(token);
            }

            if (version == 9350U)
            {
                _fastUnstakeStorageV9350.blockHash = blockHash;
                param = await _fastUnstakeStorageV9350.CounterForQueue(token);
            }

            if (version == 9340U)
            {
                _fastUnstakeStorageV9340.blockHash = blockHash;
                param = await _fastUnstakeStorageV9340.CounterForQueue(token);
            }

            if (version == 9320U)
            {
                _fastUnstakeStorageV9320.blockHash = blockHash;
                param = await _fastUnstakeStorageV9320.CounterForQueue(token);
            }

            if (version == 9300U)
            {
                _fastUnstakeStorageV9300.blockHash = blockHash;
                param = await _fastUnstakeStorageV9300.CounterForQueue(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasToCheckPerBlockParams
        ///  Number of eras to check per block.
        /// 
        ///  If set to 0, this pallet does absolutely nothing.
        /// 
        ///  Based on the amount of weight available at `on_idle`, up to this many eras of a single
        ///  nominator might be checked.
        /// </summary>
        public static string ErasToCheckPerBlockParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.FastUnstakeStorage.ErasToCheckPerBlockParams();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.FastUnstakeStorage.ErasToCheckPerBlockParams();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.FastUnstakeStorage.ErasToCheckPerBlockParams();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.FastUnstakeStorage.ErasToCheckPerBlockParams();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.FastUnstakeStorage.ErasToCheckPerBlockParams();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.FastUnstakeStorage.ErasToCheckPerBlockParams();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.FastUnstakeStorage.ErasToCheckPerBlockParams();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.FastUnstakeStorage.ErasToCheckPerBlockParams();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.FastUnstakeStorage.ErasToCheckPerBlockParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasToCheckPerBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string ErasToCheckPerBlockDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.FastUnstakeStorage.ErasToCheckPerBlockDefault();
            if (version == 9420U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.FastUnstakeStorage.ErasToCheckPerBlockDefault();
            if (version == 9381U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.FastUnstakeStorage.ErasToCheckPerBlockDefault();
            if (version == 9370U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.FastUnstakeStorage.ErasToCheckPerBlockDefault();
            if (version == 9360U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.FastUnstakeStorage.ErasToCheckPerBlockDefault();
            if (version == 9350U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.FastUnstakeStorage.ErasToCheckPerBlockDefault();
            if (version == 9340U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.FastUnstakeStorage.ErasToCheckPerBlockDefault();
            if (version == 9320U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.FastUnstakeStorage.ErasToCheckPerBlockDefault();
            if (version == 9300U)
                param = Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.FastUnstakeStorage.ErasToCheckPerBlockDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasToCheckPerBlock
        ///  Number of eras to check per block.
        /// 
        ///  If set to 0, this pallet does absolutely nothing.
        /// 
        ///  Based on the amount of weight available at `on_idle`, up to this many eras of a single
        ///  nominator might be checked.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ErasToCheckPerBlockAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9430U)
            {
                _fastUnstakeStorageV9430.blockHash = blockHash;
                param = await _fastUnstakeStorageV9430.ErasToCheckPerBlock(token);
            }

            if (version == 9420U)
            {
                _fastUnstakeStorageV9420.blockHash = blockHash;
                param = await _fastUnstakeStorageV9420.ErasToCheckPerBlock(token);
            }

            if (version == 9381U)
            {
                _fastUnstakeStorageV9381.blockHash = blockHash;
                param = await _fastUnstakeStorageV9381.ErasToCheckPerBlock(token);
            }

            if (version == 9370U)
            {
                _fastUnstakeStorageV9370.blockHash = blockHash;
                param = await _fastUnstakeStorageV9370.ErasToCheckPerBlock(token);
            }

            if (version == 9360U)
            {
                _fastUnstakeStorageV9360.blockHash = blockHash;
                param = await _fastUnstakeStorageV9360.ErasToCheckPerBlock(token);
            }

            if (version == 9350U)
            {
                _fastUnstakeStorageV9350.blockHash = blockHash;
                param = await _fastUnstakeStorageV9350.ErasToCheckPerBlock(token);
            }

            if (version == 9340U)
            {
                _fastUnstakeStorageV9340.blockHash = blockHash;
                param = await _fastUnstakeStorageV9340.ErasToCheckPerBlock(token);
            }

            if (version == 9320U)
            {
                _fastUnstakeStorageV9320.blockHash = blockHash;
                param = await _fastUnstakeStorageV9320.ErasToCheckPerBlock(token);
            }

            if (version == 9300U)
            {
                _fastUnstakeStorageV9300.blockHash = blockHash;
                param = await _fastUnstakeStorageV9300.ErasToCheckPerBlock(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        public FastUnstakeStorage(SubstrateClientExt client)
        {
            _client = client;
            _fastUnstakeStorageV9430 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.FastUnstakeStorage(_client);
            _fastUnstakeStorageV9420 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.FastUnstakeStorage(_client);
            _fastUnstakeStorageV9381 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.FastUnstakeStorage(_client);
            _fastUnstakeStorageV9370 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.FastUnstakeStorage(_client);
            _fastUnstakeStorageV9360 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.FastUnstakeStorage(_client);
            _fastUnstakeStorageV9350 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.FastUnstakeStorage(_client);
            _fastUnstakeStorageV9340 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.FastUnstakeStorage(_client);
            _fastUnstakeStorageV9320 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9320.FastUnstakeStorage(_client);
            _fastUnstakeStorageV9300 = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9300.FastUnstakeStorage(_client);
        }
    }

    public sealed class FastUnstakeConstants
    {
        /// <summary>
        /// >> Deposit
        ///  Deposit to take for unstaking, to make sure we're able to slash the it in order to cover
        ///  the costs of resources on unsuccessful unstake.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Deposit(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U128 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9430.FastUnstakeConstants().Deposit();
            if (version == 9420U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9420.FastUnstakeConstants().Deposit();
            if (version == 9381U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9381.FastUnstakeConstants().Deposit();
            if (version == 9370U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9370.FastUnstakeConstants().Deposit();
            if (version == 9360U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9360.FastUnstakeConstants().Deposit();
            if (version == 9350U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9350.FastUnstakeConstants().Deposit();
            if (version == 9340U)
                result = new Polkanalysis.Kusama.NetApiExt.Generated.Storage.v9340.FastUnstakeConstants().Deposit();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }
    }

    public enum FastUnstakeErrors
    {
        /// <summary>
        /// >> NotController
        /// The provided Controller account was not found.
        /// 
        /// This means that the given account is not bonded.
        /// </summary>
        NotController,
        /// <summary>
        /// >> AlreadyQueued
        /// The bonded account has already been queued.
        /// </summary>
        AlreadyQueued,
        /// <summary>
        /// >> NotFullyBonded
        /// The bonded account has active unlocking chunks.
        /// </summary>
        NotFullyBonded,
        /// <summary>
        /// >> NotQueued
        /// The provided un-staker is not in the `Queue`.
        /// </summary>
        NotQueued,
        /// <summary>
        /// >> AlreadyHead
        /// The provided un-staker is already in Head, and cannot deregister.
        /// </summary>
        AlreadyHead,
        /// <summary>
        /// >> CallNotAllowed
        /// The call is not allowed at this point because the pallet is not active.
        /// </summary>
        CallNotAllowed
    }
}