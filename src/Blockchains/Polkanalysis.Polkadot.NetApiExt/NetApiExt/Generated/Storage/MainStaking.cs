//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading.Tasks;
using Substrate.NetApi.Model.Meta;
using System.Threading;
using Substrate.NetApi;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Extrinsics;
using Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking;
using Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto;
using Substrate.NetApi.Model.Types.Base.Abstraction;
using Substrate.NetApi.Model.Types.Primitive;
using Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_arithmetic.per_things;
using Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.slashing;

namespace Polkanalysis.Polkadot.NetApiExt.Generated.Storage
{
    public sealed class StakingStorage
    {
        /// <summary>
        /// Substrate client for the storage calls.
        /// </summary>
        private SubstrateClientExt _client;
        public string blockHash { get; set; } = null;

        public async Task<uint> GetVersionAsync(CancellationToken token)
        {
            var result = await _client.State.GetRuntimeVersionAtAsync(blockHash, token);
            return result.SpecVersion;
        }

        /// <summary>
        /// Storage for SpecVersion 9110
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage _stakingStorageV9110;
        /// <summary>
        /// Storage for SpecVersion 9122
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage _stakingStorageV9122;
        /// <summary>
        /// Storage for SpecVersion 9140
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage _stakingStorageV9140;
        /// <summary>
        /// Storage for SpecVersion 9151
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage _stakingStorageV9151;
        /// <summary>
        /// Storage for SpecVersion 9170
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage _stakingStorageV9170;
        /// <summary>
        /// Storage for SpecVersion 9180
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage _stakingStorageV9180;
        /// <summary>
        /// Storage for SpecVersion 9190
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage _stakingStorageV9190;
        /// <summary>
        /// Storage for SpecVersion 9200
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage _stakingStorageV9200;
        /// <summary>
        /// Storage for SpecVersion 9220
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage _stakingStorageV9220;
        /// <summary>
        /// Storage for SpecVersion 9230
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage _stakingStorageV9230;
        /// <summary>
        /// Storage for SpecVersion 9250
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage _stakingStorageV9250;
        /// <summary>
        /// Storage for SpecVersion 9260
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage _stakingStorageV9260;
        /// <summary>
        /// Storage for SpecVersion 9270
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage _stakingStorageV9270;
        /// <summary>
        /// Storage for SpecVersion 9280
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage _stakingStorageV9280;
        /// <summary>
        /// Storage for SpecVersion 9281
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage _stakingStorageV9281;
        /// <summary>
        /// Storage for SpecVersion 9291
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage _stakingStorageV9291;
        /// <summary>
        /// Storage for SpecVersion 9300
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage _stakingStorageV9300;
        /// <summary>
        /// Storage for SpecVersion 9340
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage _stakingStorageV9340;
        /// <summary>
        /// Storage for SpecVersion 9360
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage _stakingStorageV9360;
        /// <summary>
        /// Storage for SpecVersion 9370
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage _stakingStorageV9370;
        /// <summary>
        /// Storage for SpecVersion 9420
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage _stakingStorageV9420;
        /// <summary>
        /// Storage for SpecVersion 9430
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage _stakingStorageV9430;
        /// <summary>
        /// >> HistoryDepthParams
        ///  Number of eras to keep in history.
        /// 
        ///  Information is kept for eras in `[current_era - history_depth; current_era]`.
        /// 
        ///  Must be more than the number of eras delayed by session otherwise. I.e. active era must
        ///  always be in history. I.e. `active_era > current_era - history_depth` must be
        ///  guaranteed.
        /// </summary>
        public static string HistoryDepthParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.HistoryDepthParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.HistoryDepthParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.HistoryDepthParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.HistoryDepthParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.HistoryDepthParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.HistoryDepthParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.HistoryDepthParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.HistoryDepthParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.HistoryDepthParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.HistoryDepthParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.HistoryDepthParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.HistoryDepthParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.HistoryDepthParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.HistoryDepthParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.HistoryDepthParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.HistoryDepthParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> HistoryDepthDefault
        /// Default value as hex string
        /// </summary>
        public static string HistoryDepthDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.HistoryDepthDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.HistoryDepthDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.HistoryDepthDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.HistoryDepthDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.HistoryDepthDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.HistoryDepthDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.HistoryDepthDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.HistoryDepthDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.HistoryDepthDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.HistoryDepthDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.HistoryDepthDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.HistoryDepthDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.HistoryDepthDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.HistoryDepthDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.HistoryDepthDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.HistoryDepthDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> HistoryDepth
        ///  Number of eras to keep in history.
        /// 
        ///  Information is kept for eras in `[current_era - history_depth; current_era]`.
        /// 
        ///  Must be more than the number of eras delayed by session otherwise. I.e. active era must
        ///  always be in history. I.e. `active_era > current_era - history_depth` must be
        ///  guaranteed.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> HistoryDepthAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.HistoryDepth(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.HistoryDepth(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.HistoryDepth(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.HistoryDepth(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.HistoryDepth(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.HistoryDepth(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.HistoryDepth(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.HistoryDepth(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.HistoryDepth(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.HistoryDepth(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.HistoryDepth(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.HistoryDepth(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.HistoryDepth(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.HistoryDepth(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.HistoryDepth(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.HistoryDepth(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ValidatorCountParams
        ///  The ideal number of staking participants.
        /// </summary>
        public static string ValidatorCountParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ValidatorCountParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ValidatorCountParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ValidatorCountParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ValidatorCountParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ValidatorCountParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ValidatorCountParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ValidatorCountParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ValidatorCountParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ValidatorCountParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ValidatorCountParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ValidatorCountParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ValidatorCountParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ValidatorCountParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ValidatorCountParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ValidatorCountParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ValidatorCountParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ValidatorCountParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ValidatorCountParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ValidatorCountParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ValidatorCountParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ValidatorCountParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ValidatorCountParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ValidatorCountDefault
        /// Default value as hex string
        /// </summary>
        public static string ValidatorCountDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ValidatorCountDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ValidatorCountDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ValidatorCountDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ValidatorCountDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ValidatorCountDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ValidatorCountDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ValidatorCountDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ValidatorCountDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ValidatorCountDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ValidatorCountDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ValidatorCountDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ValidatorCountDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ValidatorCountDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ValidatorCountDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ValidatorCountDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ValidatorCountDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ValidatorCountDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ValidatorCountDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ValidatorCountDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ValidatorCountDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ValidatorCountDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ValidatorCountDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ValidatorCount
        ///  The ideal number of staking participants.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ValidatorCountAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.ValidatorCount(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.ValidatorCount(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.ValidatorCount(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.ValidatorCount(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.ValidatorCount(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.ValidatorCount(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.ValidatorCount(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.ValidatorCount(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.ValidatorCount(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.ValidatorCount(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.ValidatorCount(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.ValidatorCount(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.ValidatorCount(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.ValidatorCount(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.ValidatorCount(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.ValidatorCount(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.ValidatorCount(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.ValidatorCount(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.ValidatorCount(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.ValidatorCount(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.ValidatorCount(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.ValidatorCount(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinimumValidatorCountParams
        ///  Minimum number of staking participants before emergency conditions are imposed.
        /// </summary>
        public static string MinimumValidatorCountParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.MinimumValidatorCountParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.MinimumValidatorCountParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.MinimumValidatorCountParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.MinimumValidatorCountParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.MinimumValidatorCountParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.MinimumValidatorCountParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.MinimumValidatorCountParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.MinimumValidatorCountParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.MinimumValidatorCountParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.MinimumValidatorCountParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.MinimumValidatorCountParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.MinimumValidatorCountParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.MinimumValidatorCountParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.MinimumValidatorCountParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.MinimumValidatorCountParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.MinimumValidatorCountParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.MinimumValidatorCountParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.MinimumValidatorCountParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MinimumValidatorCountParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MinimumValidatorCountParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MinimumValidatorCountParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MinimumValidatorCountParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinimumValidatorCountDefault
        /// Default value as hex string
        /// </summary>
        public static string MinimumValidatorCountDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MinimumValidatorCountDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MinimumValidatorCountDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinimumValidatorCount
        ///  Minimum number of staking participants before emergency conditions are imposed.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> MinimumValidatorCountAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.MinimumValidatorCount(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.MinimumValidatorCount(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.MinimumValidatorCount(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.MinimumValidatorCount(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.MinimumValidatorCount(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.MinimumValidatorCount(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.MinimumValidatorCount(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.MinimumValidatorCount(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.MinimumValidatorCount(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.MinimumValidatorCount(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.MinimumValidatorCount(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.MinimumValidatorCount(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.MinimumValidatorCount(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.MinimumValidatorCount(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.MinimumValidatorCount(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.MinimumValidatorCount(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.MinimumValidatorCount(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.MinimumValidatorCount(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.MinimumValidatorCount(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.MinimumValidatorCount(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.MinimumValidatorCount(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.MinimumValidatorCount(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> InvulnerablesParams
        ///  Any validators that may never be slashed or forcibly kicked. It's a Vec since they're
        ///  easy to initialize and the performance hit is minimal (we expect no more than four
        ///  invulnerables) and restricted to testnets.
        /// </summary>
        public static string InvulnerablesParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.InvulnerablesParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.InvulnerablesParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.InvulnerablesParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.InvulnerablesParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.InvulnerablesParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.InvulnerablesParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.InvulnerablesParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.InvulnerablesParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.InvulnerablesParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.InvulnerablesParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.InvulnerablesParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.InvulnerablesParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.InvulnerablesParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.InvulnerablesParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.InvulnerablesParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.InvulnerablesParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.InvulnerablesParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.InvulnerablesParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.InvulnerablesParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.InvulnerablesParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.InvulnerablesParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.InvulnerablesParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> InvulnerablesDefault
        /// Default value as hex string
        /// </summary>
        public static string InvulnerablesDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.InvulnerablesDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.InvulnerablesDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.InvulnerablesDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.InvulnerablesDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.InvulnerablesDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.InvulnerablesDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.InvulnerablesDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.InvulnerablesDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.InvulnerablesDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.InvulnerablesDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.InvulnerablesDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.InvulnerablesDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.InvulnerablesDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.InvulnerablesDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.InvulnerablesDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.InvulnerablesDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.InvulnerablesDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.InvulnerablesDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.InvulnerablesDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.InvulnerablesDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.InvulnerablesDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.InvulnerablesDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Invulnerables
        ///  Any validators that may never be slashed or forcibly kicked. It's a Vec since they're
        ///  easy to initialize and the performance hit is minimal (we expect no more than four
        ///  invulnerables) and restricted to testnets.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> InvulnerablesAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.Invulnerables(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.Invulnerables(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.Invulnerables(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.Invulnerables(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.Invulnerables(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.Invulnerables(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.Invulnerables(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.Invulnerables(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.Invulnerables(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.Invulnerables(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.Invulnerables(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.Invulnerables(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.Invulnerables(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.Invulnerables(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.Invulnerables(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.Invulnerables(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.Invulnerables(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.Invulnerables(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.Invulnerables(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.Invulnerables(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.Invulnerables(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.Invulnerables(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> BondedParams
        ///  Map from all locked "stash" accounts to the controller account.
        /// </summary>
        public static string BondedParams(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.BondedParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> BondedDefault
        /// Default value as hex string
        /// </summary>
        public static string BondedDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.BondedDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.BondedDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.BondedDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.BondedDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.BondedDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.BondedDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.BondedDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.BondedDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.BondedDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.BondedDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.BondedDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.BondedDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.BondedDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.BondedDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.BondedDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.BondedDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.BondedDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.BondedDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.BondedDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.BondedDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.BondedDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.BondedDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Bonded
        ///  Map from all locked "stash" accounts to the controller account.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base> BondedAsync(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.Bonded((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinNominatorBondParams
        ///  The minimum active bond to become and maintain the role of a nominator.
        /// </summary>
        public static string MinNominatorBondParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.MinNominatorBondParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.MinNominatorBondParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.MinNominatorBondParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.MinNominatorBondParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.MinNominatorBondParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.MinNominatorBondParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.MinNominatorBondParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.MinNominatorBondParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.MinNominatorBondParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.MinNominatorBondParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.MinNominatorBondParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.MinNominatorBondParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.MinNominatorBondParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.MinNominatorBondParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.MinNominatorBondParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.MinNominatorBondParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.MinNominatorBondParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.MinNominatorBondParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MinNominatorBondParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MinNominatorBondParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MinNominatorBondParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MinNominatorBondParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinNominatorBondDefault
        /// Default value as hex string
        /// </summary>
        public static string MinNominatorBondDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.MinNominatorBondDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.MinNominatorBondDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.MinNominatorBondDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.MinNominatorBondDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.MinNominatorBondDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.MinNominatorBondDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.MinNominatorBondDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.MinNominatorBondDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.MinNominatorBondDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.MinNominatorBondDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.MinNominatorBondDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.MinNominatorBondDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.MinNominatorBondDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.MinNominatorBondDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.MinNominatorBondDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.MinNominatorBondDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.MinNominatorBondDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.MinNominatorBondDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MinNominatorBondDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MinNominatorBondDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MinNominatorBondDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MinNominatorBondDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinNominatorBond
        ///  The minimum active bond to become and maintain the role of a nominator.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinNominatorBondAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U128 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.MinNominatorBond(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.MinNominatorBond(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.MinNominatorBond(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.MinNominatorBond(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.MinNominatorBond(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.MinNominatorBond(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.MinNominatorBond(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.MinNominatorBond(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.MinNominatorBond(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.MinNominatorBond(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.MinNominatorBond(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.MinNominatorBond(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.MinNominatorBond(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.MinNominatorBond(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.MinNominatorBond(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.MinNominatorBond(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.MinNominatorBond(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.MinNominatorBond(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.MinNominatorBond(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.MinNominatorBond(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.MinNominatorBond(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.MinNominatorBond(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinValidatorBondParams
        ///  The minimum active bond to become and maintain the role of a validator.
        /// </summary>
        public static string MinValidatorBondParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.MinValidatorBondParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.MinValidatorBondParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.MinValidatorBondParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.MinValidatorBondParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.MinValidatorBondParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.MinValidatorBondParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.MinValidatorBondParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.MinValidatorBondParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.MinValidatorBondParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.MinValidatorBondParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.MinValidatorBondParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.MinValidatorBondParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.MinValidatorBondParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.MinValidatorBondParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.MinValidatorBondParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.MinValidatorBondParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.MinValidatorBondParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.MinValidatorBondParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MinValidatorBondParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MinValidatorBondParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MinValidatorBondParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MinValidatorBondParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinValidatorBondDefault
        /// Default value as hex string
        /// </summary>
        public static string MinValidatorBondDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.MinValidatorBondDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.MinValidatorBondDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.MinValidatorBondDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.MinValidatorBondDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.MinValidatorBondDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.MinValidatorBondDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.MinValidatorBondDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.MinValidatorBondDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.MinValidatorBondDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.MinValidatorBondDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.MinValidatorBondDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.MinValidatorBondDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.MinValidatorBondDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.MinValidatorBondDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.MinValidatorBondDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.MinValidatorBondDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.MinValidatorBondDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.MinValidatorBondDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MinValidatorBondDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MinValidatorBondDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MinValidatorBondDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MinValidatorBondDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinValidatorBond
        ///  The minimum active bond to become and maintain the role of a validator.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinValidatorBondAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U128 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.MinValidatorBond(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.MinValidatorBond(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.MinValidatorBond(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.MinValidatorBond(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.MinValidatorBond(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.MinValidatorBond(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.MinValidatorBond(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.MinValidatorBond(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.MinValidatorBond(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.MinValidatorBond(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.MinValidatorBond(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.MinValidatorBond(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.MinValidatorBond(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.MinValidatorBond(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.MinValidatorBond(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.MinValidatorBond(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.MinValidatorBond(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.MinValidatorBond(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.MinValidatorBond(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.MinValidatorBond(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.MinValidatorBond(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.MinValidatorBond(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> LedgerParams
        ///  Map from all (unlocked) "controller" accounts to the info regarding the staking.
        /// </summary>
        public static string LedgerParams(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.LedgerParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> LedgerDefault
        /// Default value as hex string
        /// </summary>
        public static string LedgerDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.LedgerDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.LedgerDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.LedgerDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.LedgerDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.LedgerDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.LedgerDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.LedgerDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.LedgerDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.LedgerDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.LedgerDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.LedgerDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.LedgerDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.LedgerDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.LedgerDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.LedgerDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.LedgerDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.LedgerDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.LedgerDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.LedgerDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.LedgerDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.LedgerDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.LedgerDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Ledger
        ///  Map from all (unlocked) "controller" accounts to the info regarding the staking.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.StakingLedgerBase> LedgerAsync(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.StakingLedgerBase param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.Ledger((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> PayeeParams
        ///  Where the reward payment should be made. Keyed by stash.
        /// </summary>
        public static string PayeeParams(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.PayeeParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> PayeeDefault
        /// Default value as hex string
        /// </summary>
        public static string PayeeDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.PayeeDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.PayeeDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.PayeeDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.PayeeDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.PayeeDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.PayeeDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.PayeeDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.PayeeDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.PayeeDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.PayeeDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.PayeeDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.PayeeDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.PayeeDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.PayeeDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.PayeeDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.PayeeDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.PayeeDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.PayeeDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.PayeeDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.PayeeDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.PayeeDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.PayeeDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Payee
        ///  Where the reward payment should be made. Keyed by stash.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum> PayeeAsync(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.Payee((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ValidatorsParams
        ///  The map from (wannabe) validator stash key to the preferences of that validator.
        /// 
        ///  When updating this storage item, you must also update the `CounterForValidators`.
        /// </summary>
        public static string ValidatorsParams(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ValidatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ValidatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string ValidatorsDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ValidatorsDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ValidatorsDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ValidatorsDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ValidatorsDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ValidatorsDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ValidatorsDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ValidatorsDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ValidatorsDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ValidatorsDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ValidatorsDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ValidatorsDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ValidatorsDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ValidatorsDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ValidatorsDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ValidatorsDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ValidatorsDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ValidatorsDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ValidatorsDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ValidatorsDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ValidatorsDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ValidatorsDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ValidatorsDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Validators
        ///  The map from (wannabe) validator stash key to the preferences of that validator.
        /// 
        ///  When updating this storage item, you must also update the `CounterForValidators`.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.ValidatorPrefsBase> ValidatorsAsync(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.ValidatorPrefsBase param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.Validators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CounterForValidatorsParams
        ///  A tracker to keep count of the number of items in the `Validators` map.
        /// </summary>
        public static string CounterForValidatorsParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.CounterForValidatorsParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.CounterForValidatorsParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.CounterForValidatorsParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.CounterForValidatorsParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.CounterForValidatorsParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.CounterForValidatorsParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.CounterForValidatorsParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.CounterForValidatorsParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.CounterForValidatorsParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.CounterForValidatorsParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.CounterForValidatorsParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.CounterForValidatorsParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.CounterForValidatorsParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.CounterForValidatorsParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.CounterForValidatorsParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.CounterForValidatorsParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.CounterForValidatorsParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.CounterForValidatorsParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.CounterForValidatorsParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.CounterForValidatorsParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.CounterForValidatorsParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.CounterForValidatorsParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CounterForValidatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForValidatorsDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.CounterForValidatorsDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.CounterForValidatorsDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.CounterForValidatorsDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.CounterForValidatorsDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.CounterForValidatorsDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.CounterForValidatorsDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.CounterForValidatorsDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.CounterForValidatorsDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.CounterForValidatorsDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.CounterForValidatorsDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.CounterForValidatorsDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.CounterForValidatorsDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.CounterForValidatorsDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.CounterForValidatorsDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.CounterForValidatorsDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.CounterForValidatorsDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.CounterForValidatorsDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.CounterForValidatorsDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.CounterForValidatorsDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.CounterForValidatorsDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.CounterForValidatorsDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.CounterForValidatorsDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CounterForValidators
        ///  A tracker to keep count of the number of items in the `Validators` map.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForValidatorsAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.CounterForValidators(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.CounterForValidators(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.CounterForValidators(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.CounterForValidators(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.CounterForValidators(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.CounterForValidators(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.CounterForValidators(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.CounterForValidators(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.CounterForValidators(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.CounterForValidators(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.CounterForValidators(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.CounterForValidators(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.CounterForValidators(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.CounterForValidators(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.CounterForValidators(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.CounterForValidators(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.CounterForValidators(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.CounterForValidators(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.CounterForValidators(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.CounterForValidators(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.CounterForValidators(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.CounterForValidators(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MaxValidatorsCountParams
        ///  The maximum validator count before we stop allowing new validators to join.
        /// 
        ///  When this value is not set, no limits are enforced.
        /// </summary>
        public static string MaxValidatorsCountParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.MaxValidatorsCountParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.MaxValidatorsCountParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.MaxValidatorsCountParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.MaxValidatorsCountParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.MaxValidatorsCountParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.MaxValidatorsCountParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.MaxValidatorsCountParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.MaxValidatorsCountParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.MaxValidatorsCountParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.MaxValidatorsCountParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.MaxValidatorsCountParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.MaxValidatorsCountParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.MaxValidatorsCountParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.MaxValidatorsCountParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.MaxValidatorsCountParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.MaxValidatorsCountParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.MaxValidatorsCountParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.MaxValidatorsCountParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MaxValidatorsCountParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MaxValidatorsCountParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MaxValidatorsCountParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MaxValidatorsCountParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MaxValidatorsCountDefault
        /// Default value as hex string
        /// </summary>
        public static string MaxValidatorsCountDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MaxValidatorsCountDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MaxValidatorsCountDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MaxValidatorsCount
        ///  The maximum validator count before we stop allowing new validators to join.
        /// 
        ///  When this value is not set, no limits are enforced.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> MaxValidatorsCountAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.MaxValidatorsCount(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.MaxValidatorsCount(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.MaxValidatorsCount(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.MaxValidatorsCount(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.MaxValidatorsCount(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.MaxValidatorsCount(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.MaxValidatorsCount(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.MaxValidatorsCount(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.MaxValidatorsCount(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.MaxValidatorsCount(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.MaxValidatorsCount(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.MaxValidatorsCount(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.MaxValidatorsCount(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.MaxValidatorsCount(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.MaxValidatorsCount(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.MaxValidatorsCount(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.MaxValidatorsCount(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.MaxValidatorsCount(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.MaxValidatorsCount(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.MaxValidatorsCount(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.MaxValidatorsCount(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.MaxValidatorsCount(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> NominatorsParams
        ///  The map from nominator stash key to the set of stash keys of all validators to nominate.
        /// 
        ///  When updating this storage item, you must also update the `CounterForNominators`.
        /// </summary>
        public static string NominatorsParams(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.NominatorsParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> NominatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string NominatorsDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.NominatorsDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.NominatorsDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.NominatorsDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.NominatorsDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.NominatorsDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.NominatorsDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.NominatorsDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.NominatorsDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.NominatorsDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.NominatorsDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.NominatorsDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.NominatorsDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.NominatorsDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.NominatorsDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.NominatorsDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.NominatorsDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.NominatorsDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.NominatorsDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.NominatorsDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.NominatorsDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.NominatorsDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.NominatorsDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Nominators
        ///  The map from nominator stash key to the set of stash keys of all validators to nominate.
        /// 
        ///  When updating this storage item, you must also update the `CounterForNominators`.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.NominationsBase> NominatorsAsync(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.NominationsBase param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.Nominators((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CounterForNominatorsParams
        ///  A tracker to keep count of the number of items in the `Nominators` map.
        /// </summary>
        public static string CounterForNominatorsParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.CounterForNominatorsParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.CounterForNominatorsParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.CounterForNominatorsParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.CounterForNominatorsParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.CounterForNominatorsParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.CounterForNominatorsParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.CounterForNominatorsParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.CounterForNominatorsParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.CounterForNominatorsParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.CounterForNominatorsParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.CounterForNominatorsParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.CounterForNominatorsParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.CounterForNominatorsParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.CounterForNominatorsParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.CounterForNominatorsParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.CounterForNominatorsParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.CounterForNominatorsParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.CounterForNominatorsParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.CounterForNominatorsParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.CounterForNominatorsParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.CounterForNominatorsParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.CounterForNominatorsParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CounterForNominatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForNominatorsDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.CounterForNominatorsDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.CounterForNominatorsDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.CounterForNominatorsDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.CounterForNominatorsDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.CounterForNominatorsDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.CounterForNominatorsDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.CounterForNominatorsDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.CounterForNominatorsDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.CounterForNominatorsDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.CounterForNominatorsDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.CounterForNominatorsDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.CounterForNominatorsDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.CounterForNominatorsDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.CounterForNominatorsDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.CounterForNominatorsDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.CounterForNominatorsDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.CounterForNominatorsDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.CounterForNominatorsDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.CounterForNominatorsDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.CounterForNominatorsDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.CounterForNominatorsDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.CounterForNominatorsDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CounterForNominators
        ///  A tracker to keep count of the number of items in the `Nominators` map.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForNominatorsAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.CounterForNominators(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.CounterForNominators(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.CounterForNominators(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.CounterForNominators(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.CounterForNominators(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.CounterForNominators(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.CounterForNominators(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.CounterForNominators(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.CounterForNominators(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.CounterForNominators(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.CounterForNominators(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.CounterForNominators(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.CounterForNominators(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.CounterForNominators(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.CounterForNominators(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.CounterForNominators(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.CounterForNominators(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.CounterForNominators(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.CounterForNominators(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.CounterForNominators(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.CounterForNominators(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.CounterForNominators(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MaxNominatorsCountParams
        ///  The maximum nominator count before we stop allowing new validators to join.
        /// 
        ///  When this value is not set, no limits are enforced.
        /// </summary>
        public static string MaxNominatorsCountParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.MaxNominatorsCountParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.MaxNominatorsCountParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.MaxNominatorsCountParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.MaxNominatorsCountParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.MaxNominatorsCountParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.MaxNominatorsCountParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.MaxNominatorsCountParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.MaxNominatorsCountParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.MaxNominatorsCountParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.MaxNominatorsCountParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.MaxNominatorsCountParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.MaxNominatorsCountParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.MaxNominatorsCountParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.MaxNominatorsCountParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.MaxNominatorsCountParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.MaxNominatorsCountParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.MaxNominatorsCountParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.MaxNominatorsCountParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MaxNominatorsCountParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MaxNominatorsCountParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MaxNominatorsCountParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MaxNominatorsCountParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MaxNominatorsCountDefault
        /// Default value as hex string
        /// </summary>
        public static string MaxNominatorsCountDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MaxNominatorsCountDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MaxNominatorsCountDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MaxNominatorsCount
        ///  The maximum nominator count before we stop allowing new validators to join.
        /// 
        ///  When this value is not set, no limits are enforced.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> MaxNominatorsCountAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.MaxNominatorsCount(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.MaxNominatorsCount(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.MaxNominatorsCount(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.MaxNominatorsCount(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.MaxNominatorsCount(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.MaxNominatorsCount(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.MaxNominatorsCount(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.MaxNominatorsCount(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.MaxNominatorsCount(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.MaxNominatorsCount(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.MaxNominatorsCount(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.MaxNominatorsCount(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.MaxNominatorsCount(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.MaxNominatorsCount(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.MaxNominatorsCount(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.MaxNominatorsCount(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.MaxNominatorsCount(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.MaxNominatorsCount(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.MaxNominatorsCount(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.MaxNominatorsCount(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.MaxNominatorsCount(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.MaxNominatorsCount(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CurrentEraParams
        ///  The current era index.
        /// 
        ///  This is the latest planned era, depending on how the Session pallet queues the validator
        ///  set, it might be active or not.
        /// </summary>
        public static string CurrentEraParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.CurrentEraParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.CurrentEraParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.CurrentEraParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.CurrentEraParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.CurrentEraParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.CurrentEraParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.CurrentEraParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.CurrentEraParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.CurrentEraParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.CurrentEraParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.CurrentEraParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.CurrentEraParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.CurrentEraParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.CurrentEraParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.CurrentEraParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.CurrentEraParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.CurrentEraParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.CurrentEraParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.CurrentEraParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.CurrentEraParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.CurrentEraParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.CurrentEraParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CurrentEraDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentEraDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.CurrentEraDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.CurrentEraDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.CurrentEraDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.CurrentEraDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.CurrentEraDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.CurrentEraDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.CurrentEraDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.CurrentEraDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.CurrentEraDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.CurrentEraDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.CurrentEraDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.CurrentEraDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.CurrentEraDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.CurrentEraDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.CurrentEraDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.CurrentEraDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.CurrentEraDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.CurrentEraDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.CurrentEraDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.CurrentEraDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.CurrentEraDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.CurrentEraDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CurrentEra
        ///  The current era index.
        /// 
        ///  This is the latest planned era, depending on how the Session pallet queues the validator
        ///  set, it might be active or not.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CurrentEraAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.CurrentEra(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.CurrentEra(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.CurrentEra(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.CurrentEra(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.CurrentEra(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.CurrentEra(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.CurrentEra(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.CurrentEra(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.CurrentEra(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.CurrentEra(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.CurrentEra(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.CurrentEra(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.CurrentEra(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.CurrentEra(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.CurrentEra(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.CurrentEra(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.CurrentEra(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.CurrentEra(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.CurrentEra(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.CurrentEra(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.CurrentEra(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.CurrentEra(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ActiveEraParams
        ///  The active era information, it holds index and start.
        /// 
        ///  The active era is the era being currently rewarded. Validator set of this era must be
        ///  equal to [`SessionInterface::validators`].
        /// </summary>
        public static string ActiveEraParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ActiveEraParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ActiveEraParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ActiveEraParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ActiveEraParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ActiveEraParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ActiveEraParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ActiveEraParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ActiveEraParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ActiveEraParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ActiveEraParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ActiveEraParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ActiveEraParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ActiveEraParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ActiveEraParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ActiveEraParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ActiveEraParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ActiveEraParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ActiveEraParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ActiveEraParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ActiveEraParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ActiveEraParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ActiveEraParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ActiveEraDefault
        /// Default value as hex string
        /// </summary>
        public static string ActiveEraDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ActiveEraDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ActiveEraDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ActiveEraDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ActiveEraDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ActiveEraDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ActiveEraDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ActiveEraDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ActiveEraDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ActiveEraDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ActiveEraDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ActiveEraDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ActiveEraDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ActiveEraDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ActiveEraDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ActiveEraDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ActiveEraDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ActiveEraDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ActiveEraDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ActiveEraDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ActiveEraDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ActiveEraDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ActiveEraDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ActiveEra
        ///  The active era information, it holds index and start.
        /// 
        ///  The active era is the era being currently rewarded. Validator set of this era must be
        ///  equal to [`SessionInterface::validators`].
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.ActiveEraInfoBase> ActiveEraAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.ActiveEraInfoBase param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.ActiveEra(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.ActiveEra(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.ActiveEra(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.ActiveEra(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.ActiveEra(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.ActiveEra(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.ActiveEra(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.ActiveEra(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.ActiveEra(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.ActiveEra(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.ActiveEra(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.ActiveEra(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.ActiveEra(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.ActiveEra(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.ActiveEra(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.ActiveEra(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.ActiveEra(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.ActiveEra(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.ActiveEra(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.ActiveEra(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.ActiveEra(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.ActiveEra(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasStartSessionIndexParams
        ///  The session index at which the era start for the last `HISTORY_DEPTH` eras.
        /// 
        ///  Note: This tracks the starting session (i.e. session index when era start being active)
        ///  for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
        /// </summary>
        public static string ErasStartSessionIndexParams(Substrate.NetApi.Model.Types.Primitive.U32 key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasStartSessionIndexParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasStartSessionIndexDefault
        /// Default value as hex string
        /// </summary>
        public static string ErasStartSessionIndexDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasStartSessionIndexDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasStartSessionIndexDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasStartSessionIndex
        ///  The session index at which the era start for the last `HISTORY_DEPTH` eras.
        /// 
        ///  Note: This tracks the starting session (i.e. session index when era start being active)
        ///  for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ErasStartSessionIndexAsync(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.ErasStartSessionIndex((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasStakersParams
        ///  Exposure of validator at era.
        /// 
        ///  This is keyed first by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        ///  If stakers hasn't been set or has been removed then empty exposure is returned.
        /// </summary>
        public static string ErasStakersParams(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32>)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32>)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32>)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32>)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32>)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32>)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32>)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32>)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32>)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32>)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32>)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32>)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32>)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32>)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32>)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32>)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32>)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32>)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32>)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32>)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32>)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasStakersParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32>)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasStakersDefault
        /// Default value as hex string
        /// </summary>
        public static string ErasStakersDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasStakersDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasStakersDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasStakersDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasStakersDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasStakersDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasStakersDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasStakersDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasStakersDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasStakersDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasStakersDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasStakersDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasStakersDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasStakersDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasStakersDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasStakersDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasStakersDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasStakersDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasStakersDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasStakersDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasStakersDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasStakersDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasStakersDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasStakers
        ///  Exposure of validator at era.
        /// 
        ///  This is keyed first by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        ///  If stakers hasn't been set or has been removed then empty exposure is returned.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.ExposureBase> ErasStakersAsync(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.ExposureBase param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.ErasStakers((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32>)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasStakersClippedParams
        ///  Clipped Exposure of validator at era.
        /// 
        ///  This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the
        ///  `T::MaxNominatorRewardedPerValidator` biggest stakers.
        ///  (Note: the field `total` and `own` of the exposure remains unchanged).
        ///  This is used to limit the i/o cost for the nominator payout.
        /// 
        ///  This is keyed fist by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        ///  If stakers hasn't been set or has been removed then empty exposure is returned.
        /// </summary>
        public static string ErasStakersClippedParams(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32>)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32>)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32>)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32>)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32>)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32>)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32>)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32>)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32>)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32>)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32>)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32>)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32>)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32>)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32>)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32>)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32>)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32>)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32>)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32>)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32>)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasStakersClippedParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32>)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasStakersClippedDefault
        /// Default value as hex string
        /// </summary>
        public static string ErasStakersClippedDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasStakersClippedDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasStakersClippedDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasStakersClippedDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasStakersClippedDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasStakersClippedDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasStakersClippedDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasStakersClippedDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasStakersClippedDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasStakersClippedDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasStakersClippedDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasStakersClippedDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasStakersClippedDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasStakersClippedDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasStakersClippedDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasStakersClippedDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasStakersClippedDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasStakersClippedDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasStakersClippedDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasStakersClippedDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasStakersClippedDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasStakersClippedDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasStakersClippedDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasStakersClipped
        ///  Clipped Exposure of validator at era.
        /// 
        ///  This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the
        ///  `T::MaxNominatorRewardedPerValidator` biggest stakers.
        ///  (Note: the field `total` and `own` of the exposure remains unchanged).
        ///  This is used to limit the i/o cost for the nominator payout.
        /// 
        ///  This is keyed fist by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        ///  If stakers hasn't been set or has been removed then empty exposure is returned.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.ExposureBase> ErasStakersClippedAsync(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.ExposureBase param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.ErasStakersClipped((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32>)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasValidatorPrefsParams
        ///  Similar to `ErasStakers`, this holds the preferences of validators.
        /// 
        ///  This is keyed first by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        /// </summary>
        public static string ErasValidatorPrefsParams(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32>)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32>)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32>)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32>)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32>)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32>)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32>)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32>)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32>)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32>)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32>)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32>)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32>)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32>)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32>)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32>)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32>)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32>)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32>)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32>)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32>)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasValidatorPrefsParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32>)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasValidatorPrefsDefault
        /// Default value as hex string
        /// </summary>
        public static string ErasValidatorPrefsDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasValidatorPrefsDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasValidatorPrefsDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasValidatorPrefs
        ///  Similar to `ErasStakers`, this holds the preferences of validators.
        /// 
        ///  This is keyed first by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.ValidatorPrefsBase> ErasValidatorPrefsAsync(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.ValidatorPrefsBase param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.ErasValidatorPrefs((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32>)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasValidatorRewardParams
        ///  The total validator era payout for the last `HISTORY_DEPTH` eras.
        /// 
        ///  Eras that haven't finished yet or has been removed doesn't have reward.
        /// </summary>
        public static string ErasValidatorRewardParams(Substrate.NetApi.Model.Types.Primitive.U32 key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasValidatorRewardParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasValidatorRewardDefault
        /// Default value as hex string
        /// </summary>
        public static string ErasValidatorRewardDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasValidatorRewardDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasValidatorRewardDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasValidatorReward
        ///  The total validator era payout for the last `HISTORY_DEPTH` eras.
        /// 
        ///  Eras that haven't finished yet or has been removed doesn't have reward.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> ErasValidatorRewardAsync(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U128 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.ErasValidatorReward((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasRewardPointsParams
        ///  Rewards for the last `HISTORY_DEPTH` eras.
        ///  If reward hasn't been set or has been removed then 0 reward is returned.
        /// </summary>
        public static string ErasRewardPointsParams(Substrate.NetApi.Model.Types.Primitive.U32 key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasRewardPointsParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasRewardPointsDefault
        /// Default value as hex string
        /// </summary>
        public static string ErasRewardPointsDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasRewardPointsDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasRewardPointsDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasRewardPointsDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasRewardPointsDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasRewardPointsDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasRewardPointsDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasRewardPointsDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasRewardPointsDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasRewardPointsDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasRewardPointsDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasRewardPointsDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasRewardPointsDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasRewardPointsDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasRewardPointsDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasRewardPointsDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasRewardPointsDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasRewardPointsDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasRewardPointsDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasRewardPointsDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasRewardPointsDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasRewardPointsDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasRewardPointsDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasRewardPoints
        ///  Rewards for the last `HISTORY_DEPTH` eras.
        ///  If reward hasn't been set or has been removed then 0 reward is returned.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.EraRewardPointsBase> ErasRewardPointsAsync(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.EraRewardPointsBase param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.ErasRewardPoints((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasTotalStakeParams
        ///  The total amount staked for the last `HISTORY_DEPTH` eras.
        ///  If total hasn't been set or has been removed then 0 stake is returned.
        /// </summary>
        public static string ErasTotalStakeParams(Substrate.NetApi.Model.Types.Primitive.U32 key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasTotalStakeParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasTotalStakeDefault
        /// Default value as hex string
        /// </summary>
        public static string ErasTotalStakeDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ErasTotalStakeDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ErasTotalStakeDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ErasTotalStakeDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ErasTotalStakeDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ErasTotalStakeDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ErasTotalStakeDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ErasTotalStakeDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ErasTotalStakeDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ErasTotalStakeDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ErasTotalStakeDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ErasTotalStakeDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ErasTotalStakeDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ErasTotalStakeDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ErasTotalStakeDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ErasTotalStakeDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ErasTotalStakeDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ErasTotalStakeDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ErasTotalStakeDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ErasTotalStakeDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ErasTotalStakeDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ErasTotalStakeDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ErasTotalStakeDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ErasTotalStake
        ///  The total amount staked for the last `HISTORY_DEPTH` eras.
        ///  If total hasn't been set or has been removed then 0 stake is returned.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> ErasTotalStakeAsync(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U128 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.ErasTotalStake((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ForceEraParams
        ///  Mode of era forcing.
        /// </summary>
        public static string ForceEraParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ForceEraParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ForceEraParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ForceEraParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ForceEraParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ForceEraParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ForceEraParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ForceEraParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ForceEraParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ForceEraParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ForceEraParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ForceEraParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ForceEraParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ForceEraParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ForceEraParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ForceEraParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ForceEraParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ForceEraParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ForceEraParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ForceEraParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ForceEraParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ForceEraParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ForceEraParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ForceEraDefault
        /// Default value as hex string
        /// </summary>
        public static string ForceEraDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ForceEraDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ForceEraDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ForceEraDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ForceEraDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ForceEraDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ForceEraDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ForceEraDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ForceEraDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ForceEraDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ForceEraDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ForceEraDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ForceEraDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ForceEraDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ForceEraDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ForceEraDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ForceEraDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ForceEraDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ForceEraDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ForceEraDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ForceEraDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ForceEraDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ForceEraDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ForceEra
        ///  Mode of era forcing.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum> ForceEraAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.ForceEra(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.ForceEra(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.ForceEra(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.ForceEra(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.ForceEra(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.ForceEra(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.ForceEra(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.ForceEra(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.ForceEra(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.ForceEra(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.ForceEra(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.ForceEra(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.ForceEra(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.ForceEra(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.ForceEra(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.ForceEra(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.ForceEra(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.ForceEra(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.ForceEra(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.ForceEra(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.ForceEra(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.ForceEra(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SlashRewardFractionParams
        ///  The percentage of the slash that is distributed to reporters.
        /// 
        ///  The rest of the slashed value is handled by the `Slash`.
        /// </summary>
        public static string SlashRewardFractionParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.SlashRewardFractionParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.SlashRewardFractionParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.SlashRewardFractionParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.SlashRewardFractionParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.SlashRewardFractionParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.SlashRewardFractionParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.SlashRewardFractionParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.SlashRewardFractionParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.SlashRewardFractionParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.SlashRewardFractionParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.SlashRewardFractionParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.SlashRewardFractionParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.SlashRewardFractionParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.SlashRewardFractionParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.SlashRewardFractionParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.SlashRewardFractionParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.SlashRewardFractionParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.SlashRewardFractionParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.SlashRewardFractionParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.SlashRewardFractionParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.SlashRewardFractionParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.SlashRewardFractionParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SlashRewardFractionDefault
        /// Default value as hex string
        /// </summary>
        public static string SlashRewardFractionDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.SlashRewardFractionDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.SlashRewardFractionDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.SlashRewardFractionDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.SlashRewardFractionDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.SlashRewardFractionDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.SlashRewardFractionDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.SlashRewardFractionDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.SlashRewardFractionDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.SlashRewardFractionDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.SlashRewardFractionDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.SlashRewardFractionDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.SlashRewardFractionDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.SlashRewardFractionDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.SlashRewardFractionDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.SlashRewardFractionDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.SlashRewardFractionDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.SlashRewardFractionDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.SlashRewardFractionDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.SlashRewardFractionDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.SlashRewardFractionDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.SlashRewardFractionDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.SlashRewardFractionDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SlashRewardFraction
        ///  The percentage of the slash that is distributed to reporters.
        /// 
        ///  The rest of the slashed value is handled by the `Slash`.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_arithmetic.per_things.PerbillBase> SlashRewardFractionAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_arithmetic.per_things.PerbillBase param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.SlashRewardFraction(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.SlashRewardFraction(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.SlashRewardFraction(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.SlashRewardFraction(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.SlashRewardFraction(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.SlashRewardFraction(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.SlashRewardFraction(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.SlashRewardFraction(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.SlashRewardFraction(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.SlashRewardFraction(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.SlashRewardFraction(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.SlashRewardFraction(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.SlashRewardFraction(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.SlashRewardFraction(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.SlashRewardFraction(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.SlashRewardFraction(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.SlashRewardFraction(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.SlashRewardFraction(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.SlashRewardFraction(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.SlashRewardFraction(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.SlashRewardFraction(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.SlashRewardFraction(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CanceledSlashPayoutParams
        ///  The amount of currency given to reporters of a slash event which was
        ///  canceled by extraordinary circumstances (e.g. governance).
        /// </summary>
        public static string CanceledSlashPayoutParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.CanceledSlashPayoutParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.CanceledSlashPayoutParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CanceledSlashPayoutDefault
        /// Default value as hex string
        /// </summary>
        public static string CanceledSlashPayoutDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.CanceledSlashPayoutDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.CanceledSlashPayoutDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CanceledSlashPayout
        ///  The amount of currency given to reporters of a slash event which was
        ///  canceled by extraordinary circumstances (e.g. governance).
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> CanceledSlashPayoutAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U128 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.CanceledSlashPayout(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.CanceledSlashPayout(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.CanceledSlashPayout(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.CanceledSlashPayout(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.CanceledSlashPayout(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.CanceledSlashPayout(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.CanceledSlashPayout(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.CanceledSlashPayout(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.CanceledSlashPayout(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.CanceledSlashPayout(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.CanceledSlashPayout(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.CanceledSlashPayout(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.CanceledSlashPayout(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.CanceledSlashPayout(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.CanceledSlashPayout(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.CanceledSlashPayout(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.CanceledSlashPayout(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.CanceledSlashPayout(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.CanceledSlashPayout(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.CanceledSlashPayout(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.CanceledSlashPayout(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.CanceledSlashPayout(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> UnappliedSlashesParams
        ///  All unapplied slashes that are queued for later.
        /// </summary>
        public static string UnappliedSlashesParams(Substrate.NetApi.Model.Types.Primitive.U32 key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.UnappliedSlashesParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> UnappliedSlashesDefault
        /// Default value as hex string
        /// </summary>
        public static string UnappliedSlashesDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.UnappliedSlashesDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.UnappliedSlashesDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.UnappliedSlashesDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.UnappliedSlashesDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.UnappliedSlashesDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.UnappliedSlashesDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.UnappliedSlashesDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.UnappliedSlashesDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.UnappliedSlashesDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.UnappliedSlashesDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.UnappliedSlashesDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.UnappliedSlashesDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.UnappliedSlashesDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.UnappliedSlashesDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.UnappliedSlashesDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.UnappliedSlashesDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.UnappliedSlashesDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.UnappliedSlashesDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.UnappliedSlashesDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.UnappliedSlashesDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.UnappliedSlashesDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.UnappliedSlashesDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> UnappliedSlashes
        ///  All unapplied slashes that are queued for later.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> UnappliedSlashesAsync(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.UnappliedSlashes((Substrate.NetApi.Model.Types.Primitive.U32)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> BondedErasParams
        ///  A mapping from still-bonded eras to the first session index of that era.
        /// 
        ///  Must contains information for eras for the range:
        ///  `[active_era - bounding_duration; active_era]`
        /// </summary>
        public static string BondedErasParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.BondedErasParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.BondedErasParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.BondedErasParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.BondedErasParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.BondedErasParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.BondedErasParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.BondedErasParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.BondedErasParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.BondedErasParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.BondedErasParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.BondedErasParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.BondedErasParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.BondedErasParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.BondedErasParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.BondedErasParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.BondedErasParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.BondedErasParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.BondedErasParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.BondedErasParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.BondedErasParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.BondedErasParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.BondedErasParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> BondedErasDefault
        /// Default value as hex string
        /// </summary>
        public static string BondedErasDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.BondedErasDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.BondedErasDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.BondedErasDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.BondedErasDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.BondedErasDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.BondedErasDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.BondedErasDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.BondedErasDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.BondedErasDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.BondedErasDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.BondedErasDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.BondedErasDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.BondedErasDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.BondedErasDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.BondedErasDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.BondedErasDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.BondedErasDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.BondedErasDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.BondedErasDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.BondedErasDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.BondedErasDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.BondedErasDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> BondedEras
        ///  A mapping from still-bonded eras to the first session index of that era.
        /// 
        ///  Must contains information for eras for the range:
        ///  `[active_era - bounding_duration; active_era]`
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> BondedErasAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.BondedEras(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.BondedEras(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.BondedEras(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.BondedEras(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.BondedEras(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.BondedEras(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.BondedEras(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.BondedEras(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.BondedEras(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.BondedEras(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.BondedEras(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.BondedEras(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.BondedEras(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.BondedEras(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.BondedEras(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.BondedEras(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.BondedEras(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.BondedEras(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.BondedEras(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.BondedEras(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.BondedEras(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.BondedEras(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ValidatorSlashInEraParams
        ///  All slashing events on validators, mapped by era to the highest slash proportion
        ///  and slash value of the era.
        /// </summary>
        public static string ValidatorSlashInEraParams(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32>)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32>)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32>)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32>)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32>)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32>)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32>)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32>)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32>)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32>)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32>)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32>)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32>)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32>)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32>)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32>)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32>)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32>)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32>)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32>)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32>)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ValidatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32>)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ValidatorSlashInEraDefault
        /// Default value as hex string
        /// </summary>
        public static string ValidatorSlashInEraDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ValidatorSlashInEraDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ValidatorSlashInEraDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ValidatorSlashInEra
        ///  All slashing events on validators, mapped by era to the highest slash proportion
        ///  and slash value of the era.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> ValidatorSlashInEraAsync(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.ValidatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32>)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> NominatorSlashInEraParams
        ///  All slashing events on nominators, mapped by era to the highest slash value of the era.
        /// </summary>
        public static string NominatorSlashInEraParams(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32>)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32>)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32>)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32>)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32>)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32>)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32>)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32>)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32>)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32>)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32>)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32>)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32>)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32>)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32>)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32>)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32>)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32>)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32>)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32>)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32>)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.NominatorSlashInEraParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32>)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> NominatorSlashInEraDefault
        /// Default value as hex string
        /// </summary>
        public static string NominatorSlashInEraDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.NominatorSlashInEraDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.NominatorSlashInEraDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> NominatorSlashInEra
        ///  All slashing events on nominators, mapped by era to the highest slash value of the era.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> NominatorSlashInEraAsync(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U128 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32>)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.NominatorSlashInEra((Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32>)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SlashingSpansParams
        ///  Slashing spans for stash accounts.
        /// </summary>
        public static string SlashingSpansParams(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.SlashingSpansParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SlashingSpansDefault
        /// Default value as hex string
        /// </summary>
        public static string SlashingSpansDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.SlashingSpansDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.SlashingSpansDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.SlashingSpansDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.SlashingSpansDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.SlashingSpansDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.SlashingSpansDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.SlashingSpansDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.SlashingSpansDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.SlashingSpansDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.SlashingSpansDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.SlashingSpansDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.SlashingSpansDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.SlashingSpansDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.SlashingSpansDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.SlashingSpansDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.SlashingSpansDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.SlashingSpansDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.SlashingSpansDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.SlashingSpansDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.SlashingSpansDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.SlashingSpansDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.SlashingSpansDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SlashingSpans
        ///  Slashing spans for stash accounts.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.slashing.SlashingSpansBase> SlashingSpansAsync(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.slashing.SlashingSpansBase param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.SlashingSpans((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SpanSlashParams
        ///  Records information about the maximum slash of a stash within a slashing span,
        ///  as well as how much reward has been paid out.
        /// </summary>
        public static string SpanSlashParams(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.SpanSlashParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SpanSlashDefault
        /// Default value as hex string
        /// </summary>
        public static string SpanSlashDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.SpanSlashDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.SpanSlashDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.SpanSlashDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.SpanSlashDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.SpanSlashDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.SpanSlashDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.SpanSlashDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.SpanSlashDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.SpanSlashDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.SpanSlashDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.SpanSlashDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.SpanSlashDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.SpanSlashDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.SpanSlashDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.SpanSlashDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.SpanSlashDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.SpanSlashDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.SpanSlashDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.SpanSlashDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.SpanSlashDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.SpanSlashDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.SpanSlashDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> SpanSlash
        ///  Records information about the maximum slash of a stash within a slashing span,
        ///  as well as how much reward has been paid out.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.slashing.SpanRecordBase> SpanSlashAsync(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_staking.slashing.SpanRecordBase param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9110.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9122.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9230.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9250.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9260.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9270.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9280.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9281.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9291.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9300.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9340.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9360.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9370.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9420.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.SpanSlash((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>)key, token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> EarliestUnappliedSlashParams
        ///  The earliest era for which we have a pending, unapplied slash.
        /// </summary>
        public static string EarliestUnappliedSlashParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.EarliestUnappliedSlashParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.EarliestUnappliedSlashParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.EarliestUnappliedSlashParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.EarliestUnappliedSlashParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.EarliestUnappliedSlashParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.EarliestUnappliedSlashParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.EarliestUnappliedSlashParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.EarliestUnappliedSlashParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.EarliestUnappliedSlashParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.EarliestUnappliedSlashParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.EarliestUnappliedSlashParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.EarliestUnappliedSlashParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> EarliestUnappliedSlashDefault
        /// Default value as hex string
        /// </summary>
        public static string EarliestUnappliedSlashDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.EarliestUnappliedSlashDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.EarliestUnappliedSlashDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.EarliestUnappliedSlashDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.EarliestUnappliedSlashDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.EarliestUnappliedSlashDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.EarliestUnappliedSlashDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.EarliestUnappliedSlashDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.EarliestUnappliedSlashDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.EarliestUnappliedSlashDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.EarliestUnappliedSlashDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.EarliestUnappliedSlashDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.EarliestUnappliedSlashDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> EarliestUnappliedSlash
        ///  The earliest era for which we have a pending, unapplied slash.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> EarliestUnappliedSlashAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.EarliestUnappliedSlash(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.EarliestUnappliedSlash(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.EarliestUnappliedSlash(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.EarliestUnappliedSlash(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.EarliestUnappliedSlash(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.EarliestUnappliedSlash(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.EarliestUnappliedSlash(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.EarliestUnappliedSlash(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.EarliestUnappliedSlash(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.EarliestUnappliedSlash(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.EarliestUnappliedSlash(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.EarliestUnappliedSlash(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CurrentPlannedSessionParams
        ///  The last planned session scheduled by the session pallet.
        /// 
        ///  This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
        /// </summary>
        public static string CurrentPlannedSessionParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.CurrentPlannedSessionParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.CurrentPlannedSessionParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CurrentPlannedSessionDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentPlannedSessionDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.CurrentPlannedSessionDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.CurrentPlannedSessionDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CurrentPlannedSession
        ///  The last planned session scheduled by the session pallet.
        /// 
        ///  This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CurrentPlannedSessionAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.CurrentPlannedSession(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.CurrentPlannedSession(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.CurrentPlannedSession(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.CurrentPlannedSession(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.CurrentPlannedSession(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.CurrentPlannedSession(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.CurrentPlannedSession(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.CurrentPlannedSession(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.CurrentPlannedSession(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.CurrentPlannedSession(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.CurrentPlannedSession(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.CurrentPlannedSession(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.CurrentPlannedSession(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.CurrentPlannedSession(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.CurrentPlannedSession(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.CurrentPlannedSession(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.CurrentPlannedSession(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.CurrentPlannedSession(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.CurrentPlannedSession(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.CurrentPlannedSession(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.CurrentPlannedSession(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.CurrentPlannedSession(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> StorageVersionParams
        ///  True if network has been upgraded to this version.
        ///  Storage version of the pallet.
        /// 
        ///  This is set to v7.0.0 for new networks.
        /// </summary>
        public static string StorageVersionParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.StorageVersionParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.StorageVersionParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.StorageVersionParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.StorageVersionParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.StorageVersionParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.StorageVersionParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.StorageVersionParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.StorageVersionParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.StorageVersionParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.StorageVersionParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.StorageVersionParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.StorageVersionParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.StorageVersionParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.StorageVersionParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.StorageVersionParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.StorageVersionParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.StorageVersionParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.StorageVersionParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.StorageVersionParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> StorageVersionDefault
        /// Default value as hex string
        /// </summary>
        public static string StorageVersionDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.StorageVersionDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.StorageVersionDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.StorageVersionDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.StorageVersionDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.StorageVersionDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.StorageVersionDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.StorageVersionDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.StorageVersionDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.StorageVersionDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.StorageVersionDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.StorageVersionDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.StorageVersionDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.StorageVersionDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.StorageVersionDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.StorageVersionDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.StorageVersionDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.StorageVersionDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.StorageVersionDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.StorageVersionDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> StorageVersion
        ///  True if network has been upgraded to this version.
        ///  Storage version of the pallet.
        /// 
        ///  This is set to v7.0.0 for new networks.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum> StorageVersionAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.StorageVersion(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.StorageVersion(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.StorageVersion(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.StorageVersion(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.StorageVersion(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.StorageVersion(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.StorageVersion(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.StorageVersion(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.StorageVersion(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.StorageVersion(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.StorageVersion(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.StorageVersion(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.StorageVersion(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.StorageVersion(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.StorageVersion(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.StorageVersion(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.StorageVersion(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.StorageVersion(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.StorageVersion(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ChillThresholdParams
        ///  The threshold for when users can start calling `chill_other` for other validators /
        ///  nominators. The threshold is compared to the actual number of validators / nominators
        ///  (`CountFor*`) in the system compared to the configured max (`Max*Count`).
        /// </summary>
        public static string ChillThresholdParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ChillThresholdParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ChillThresholdParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ChillThresholdParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ChillThresholdParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ChillThresholdParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ChillThresholdParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ChillThresholdParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ChillThresholdParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ChillThresholdParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ChillThresholdParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ChillThresholdParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ChillThresholdParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ChillThresholdParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ChillThresholdParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ChillThresholdParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ChillThresholdParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ChillThresholdParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ChillThresholdParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ChillThresholdParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ChillThresholdParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ChillThresholdParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ChillThresholdParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ChillThresholdDefault
        /// Default value as hex string
        /// </summary>
        public static string ChillThresholdDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage.ChillThresholdDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.ChillThresholdDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.ChillThresholdDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.ChillThresholdDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.ChillThresholdDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.ChillThresholdDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.ChillThresholdDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.ChillThresholdDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.ChillThresholdDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.ChillThresholdDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.ChillThresholdDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.ChillThresholdDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.ChillThresholdDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.ChillThresholdDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.ChillThresholdDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.ChillThresholdDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.ChillThresholdDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.ChillThresholdDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.ChillThresholdDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.ChillThresholdDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.ChillThresholdDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.ChillThresholdDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ChillThreshold
        ///  The threshold for when users can start calling `chill_other` for other validators /
        ///  nominators. The threshold is compared to the actual number of validators / nominators
        ///  (`CountFor*`) in the system compared to the configured max (`Max*Count`).
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_arithmetic.per_things.PercentBase> ChillThresholdAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_arithmetic.per_things.PercentBase param = null;
            if (version == 9110U)
            {
                _stakingStorageV9110.blockHash = blockHash;
                param = await _stakingStorageV9110.ChillThreshold(token);
            }

            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.ChillThreshold(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.ChillThreshold(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.ChillThreshold(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.ChillThreshold(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.ChillThreshold(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.ChillThreshold(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.ChillThreshold(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.ChillThreshold(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.ChillThreshold(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.ChillThreshold(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.ChillThreshold(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.ChillThreshold(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.ChillThreshold(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.ChillThreshold(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.ChillThreshold(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.ChillThreshold(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.ChillThreshold(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.ChillThreshold(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.ChillThreshold(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.ChillThreshold(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.ChillThreshold(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> OffendingValidatorsParams
        ///  Indices of validators that have offended in the active era and whether they are currently
        ///  disabled.
        /// 
        ///  This value should be a superset of disabled validators since not all offences lead to the
        ///  validator being disabled (if there was no slash). This is needed to track the percentage of
        ///  validators that have offended in the current era, ensuring a new era is forced if
        ///  `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find
        ///  whether a given validator has previously offended using binary search. It gets cleared when
        ///  the era ends.
        /// </summary>
        public static string OffendingValidatorsParams(uint version)
        {
            string param = null;
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.OffendingValidatorsParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.OffendingValidatorsParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.OffendingValidatorsParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.OffendingValidatorsParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.OffendingValidatorsParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.OffendingValidatorsParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.OffendingValidatorsParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.OffendingValidatorsParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.OffendingValidatorsParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.OffendingValidatorsParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.OffendingValidatorsParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.OffendingValidatorsParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.OffendingValidatorsParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.OffendingValidatorsParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.OffendingValidatorsParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.OffendingValidatorsParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.OffendingValidatorsParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.OffendingValidatorsParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.OffendingValidatorsParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.OffendingValidatorsParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.OffendingValidatorsParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> OffendingValidatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string OffendingValidatorsDefault(uint version)
        {
            string param = null;
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage.OffendingValidatorsDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage.OffendingValidatorsDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage.OffendingValidatorsDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.OffendingValidatorsDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.OffendingValidatorsDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.OffendingValidatorsDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.OffendingValidatorsDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.OffendingValidatorsDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.OffendingValidatorsDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.OffendingValidatorsDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.OffendingValidatorsDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.OffendingValidatorsDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.OffendingValidatorsDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.OffendingValidatorsDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.OffendingValidatorsDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.OffendingValidatorsDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.OffendingValidatorsDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.OffendingValidatorsDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.OffendingValidatorsDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.OffendingValidatorsDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.OffendingValidatorsDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> OffendingValidators
        ///  Indices of validators that have offended in the active era and whether they are currently
        ///  disabled.
        /// 
        ///  This value should be a superset of disabled validators since not all offences lead to the
        ///  validator being disabled (if there was no slash). This is needed to track the percentage of
        ///  validators that have offended in the current era, ensuring a new era is forced if
        ///  `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find
        ///  whether a given validator has previously offended using binary search. It gets cleared when
        ///  the era ends.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> OffendingValidatorsAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9122U)
            {
                _stakingStorageV9122.blockHash = blockHash;
                param = await _stakingStorageV9122.OffendingValidators(token);
            }

            if (version == 9140U)
            {
                _stakingStorageV9140.blockHash = blockHash;
                param = await _stakingStorageV9140.OffendingValidators(token);
            }

            if (version == 9151U)
            {
                _stakingStorageV9151.blockHash = blockHash;
                param = await _stakingStorageV9151.OffendingValidators(token);
            }

            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.OffendingValidators(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.OffendingValidators(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.OffendingValidators(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.OffendingValidators(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.OffendingValidators(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.OffendingValidators(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.OffendingValidators(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.OffendingValidators(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.OffendingValidators(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.OffendingValidators(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.OffendingValidators(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.OffendingValidators(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.OffendingValidators(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.OffendingValidators(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.OffendingValidators(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.OffendingValidators(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.OffendingValidators(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.OffendingValidators(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinCommissionParams
        ///  The minimum amount of commission that validators can set.
        /// 
        ///  If set to `0`, no limit exists.
        /// </summary>
        public static string MinCommissionParams(uint version)
        {
            string param = null;
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.MinCommissionParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.MinCommissionParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.MinCommissionParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.MinCommissionParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.MinCommissionParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.MinCommissionParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.MinCommissionParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.MinCommissionParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.MinCommissionParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.MinCommissionParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.MinCommissionParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.MinCommissionParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.MinCommissionParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.MinCommissionParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MinCommissionParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MinCommissionParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MinCommissionParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MinCommissionParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinCommissionDefault
        /// Default value as hex string
        /// </summary>
        public static string MinCommissionDefault(uint version)
        {
            string param = null;
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage.MinCommissionDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage.MinCommissionDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage.MinCommissionDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage.MinCommissionDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage.MinCommissionDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage.MinCommissionDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage.MinCommissionDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage.MinCommissionDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage.MinCommissionDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage.MinCommissionDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage.MinCommissionDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage.MinCommissionDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage.MinCommissionDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage.MinCommissionDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MinCommissionDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MinCommissionDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MinCommissionDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MinCommissionDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinCommission
        ///  The minimum amount of commission that validators can set.
        /// 
        ///  If set to `0`, no limit exists.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_arithmetic.per_things.PerbillBase> MinCommissionAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_arithmetic.per_things.PerbillBase param = null;
            if (version == 9170U)
            {
                _stakingStorageV9170.blockHash = blockHash;
                param = await _stakingStorageV9170.MinCommission(token);
            }

            if (version == 9180U)
            {
                _stakingStorageV9180.blockHash = blockHash;
                param = await _stakingStorageV9180.MinCommission(token);
            }

            if (version == 9190U)
            {
                _stakingStorageV9190.blockHash = blockHash;
                param = await _stakingStorageV9190.MinCommission(token);
            }

            if (version == 9200U)
            {
                _stakingStorageV9200.blockHash = blockHash;
                param = await _stakingStorageV9200.MinCommission(token);
            }

            if (version == 9220U)
            {
                _stakingStorageV9220.blockHash = blockHash;
                param = await _stakingStorageV9220.MinCommission(token);
            }

            if (version == 9230U)
            {
                _stakingStorageV9230.blockHash = blockHash;
                param = await _stakingStorageV9230.MinCommission(token);
            }

            if (version == 9250U)
            {
                _stakingStorageV9250.blockHash = blockHash;
                param = await _stakingStorageV9250.MinCommission(token);
            }

            if (version == 9260U)
            {
                _stakingStorageV9260.blockHash = blockHash;
                param = await _stakingStorageV9260.MinCommission(token);
            }

            if (version == 9270U)
            {
                _stakingStorageV9270.blockHash = blockHash;
                param = await _stakingStorageV9270.MinCommission(token);
            }

            if (version == 9280U)
            {
                _stakingStorageV9280.blockHash = blockHash;
                param = await _stakingStorageV9280.MinCommission(token);
            }

            if (version == 9281U)
            {
                _stakingStorageV9281.blockHash = blockHash;
                param = await _stakingStorageV9281.MinCommission(token);
            }

            if (version == 9291U)
            {
                _stakingStorageV9291.blockHash = blockHash;
                param = await _stakingStorageV9291.MinCommission(token);
            }

            if (version == 9300U)
            {
                _stakingStorageV9300.blockHash = blockHash;
                param = await _stakingStorageV9300.MinCommission(token);
            }

            if (version == 9340U)
            {
                _stakingStorageV9340.blockHash = blockHash;
                param = await _stakingStorageV9340.MinCommission(token);
            }

            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.MinCommission(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.MinCommission(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.MinCommission(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.MinCommission(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinimumActiveStakeParams
        ///  The minimum active nominator stake of the last successful election.
        /// </summary>
        public static string MinimumActiveStakeParams(uint version)
        {
            string param = null;
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MinimumActiveStakeParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MinimumActiveStakeParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MinimumActiveStakeParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MinimumActiveStakeParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinimumActiveStakeDefault
        /// Default value as hex string
        /// </summary>
        public static string MinimumActiveStakeDefault(uint version)
        {
            string param = null;
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage.MinimumActiveStakeDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage.MinimumActiveStakeDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage.MinimumActiveStakeDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage.MinimumActiveStakeDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MinimumActiveStake
        ///  The minimum active nominator stake of the last successful election.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinimumActiveStakeAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U128 param = null;
            if (version == 9360U)
            {
                _stakingStorageV9360.blockHash = blockHash;
                param = await _stakingStorageV9360.MinimumActiveStake(token);
            }

            if (version == 9370U)
            {
                _stakingStorageV9370.blockHash = blockHash;
                param = await _stakingStorageV9370.MinimumActiveStake(token);
            }

            if (version == 9420U)
            {
                _stakingStorageV9420.blockHash = blockHash;
                param = await _stakingStorageV9420.MinimumActiveStake(token);
            }

            if (version == 9430U)
            {
                _stakingStorageV9430.blockHash = blockHash;
                param = await _stakingStorageV9430.MinimumActiveStake(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        public StakingStorage(SubstrateClientExt client)
        {
            _client = client;
            _stakingStorageV9110 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingStorage(_client);
            _stakingStorageV9122 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingStorage(_client);
            _stakingStorageV9140 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingStorage(_client);
            _stakingStorageV9151 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingStorage(_client);
            _stakingStorageV9170 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingStorage(_client);
            _stakingStorageV9180 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingStorage(_client);
            _stakingStorageV9190 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingStorage(_client);
            _stakingStorageV9200 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingStorage(_client);
            _stakingStorageV9220 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingStorage(_client);
            _stakingStorageV9230 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingStorage(_client);
            _stakingStorageV9250 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingStorage(_client);
            _stakingStorageV9260 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingStorage(_client);
            _stakingStorageV9270 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingStorage(_client);
            _stakingStorageV9280 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingStorage(_client);
            _stakingStorageV9281 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingStorage(_client);
            _stakingStorageV9291 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingStorage(_client);
            _stakingStorageV9300 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingStorage(_client);
            _stakingStorageV9340 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingStorage(_client);
            _stakingStorageV9360 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingStorage(_client);
            _stakingStorageV9370 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingStorage(_client);
            _stakingStorageV9420 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingStorage(_client);
            _stakingStorageV9430 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingStorage(_client);
        }
    }

    public sealed class StakingConstants
    {
        /// <summary>
        /// >> SessionsPerEra
        ///  Number of sessions per era.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 SessionsPerEra(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9110U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingConstants().SessionsPerEra();
            if (version == 9122U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingConstants().SessionsPerEra();
            if (version == 9140U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingConstants().SessionsPerEra();
            if (version == 9151U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingConstants().SessionsPerEra();
            if (version == 9170U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingConstants().SessionsPerEra();
            if (version == 9180U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingConstants().SessionsPerEra();
            if (version == 9190U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingConstants().SessionsPerEra();
            if (version == 9200U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingConstants().SessionsPerEra();
            if (version == 9220U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingConstants().SessionsPerEra();
            if (version == 9230U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingConstants().SessionsPerEra();
            if (version == 9250U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingConstants().SessionsPerEra();
            if (version == 9260U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingConstants().SessionsPerEra();
            if (version == 9270U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingConstants().SessionsPerEra();
            if (version == 9280U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingConstants().SessionsPerEra();
            if (version == 9281U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingConstants().SessionsPerEra();
            if (version == 9291U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingConstants().SessionsPerEra();
            if (version == 9300U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingConstants().SessionsPerEra();
            if (version == 9340U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingConstants().SessionsPerEra();
            if (version == 9360U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingConstants().SessionsPerEra();
            if (version == 9370U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingConstants().SessionsPerEra();
            if (version == 9420U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingConstants().SessionsPerEra();
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingConstants().SessionsPerEra();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> BondingDuration
        ///  Number of eras that staked funds must remain bonded for.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 BondingDuration(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9110U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingConstants().BondingDuration();
            if (version == 9122U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingConstants().BondingDuration();
            if (version == 9140U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingConstants().BondingDuration();
            if (version == 9151U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingConstants().BondingDuration();
            if (version == 9170U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingConstants().BondingDuration();
            if (version == 9180U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingConstants().BondingDuration();
            if (version == 9190U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingConstants().BondingDuration();
            if (version == 9200U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingConstants().BondingDuration();
            if (version == 9220U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingConstants().BondingDuration();
            if (version == 9230U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingConstants().BondingDuration();
            if (version == 9250U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingConstants().BondingDuration();
            if (version == 9260U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingConstants().BondingDuration();
            if (version == 9270U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingConstants().BondingDuration();
            if (version == 9280U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingConstants().BondingDuration();
            if (version == 9281U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingConstants().BondingDuration();
            if (version == 9291U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingConstants().BondingDuration();
            if (version == 9300U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingConstants().BondingDuration();
            if (version == 9340U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingConstants().BondingDuration();
            if (version == 9360U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingConstants().BondingDuration();
            if (version == 9370U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingConstants().BondingDuration();
            if (version == 9420U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingConstants().BondingDuration();
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingConstants().BondingDuration();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> SlashDeferDuration
        ///  Number of eras that slashes are deferred by, after computation.
        /// 
        ///  This should be less than the bonding duration. Set to 0 if slashes
        ///  should be applied immediately, without opportunity for intervention.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 SlashDeferDuration(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9110U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingConstants().SlashDeferDuration();
            if (version == 9122U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingConstants().SlashDeferDuration();
            if (version == 9140U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingConstants().SlashDeferDuration();
            if (version == 9151U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingConstants().SlashDeferDuration();
            if (version == 9170U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingConstants().SlashDeferDuration();
            if (version == 9180U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingConstants().SlashDeferDuration();
            if (version == 9190U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingConstants().SlashDeferDuration();
            if (version == 9200U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingConstants().SlashDeferDuration();
            if (version == 9220U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingConstants().SlashDeferDuration();
            if (version == 9230U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingConstants().SlashDeferDuration();
            if (version == 9250U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingConstants().SlashDeferDuration();
            if (version == 9260U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingConstants().SlashDeferDuration();
            if (version == 9270U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingConstants().SlashDeferDuration();
            if (version == 9280U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingConstants().SlashDeferDuration();
            if (version == 9281U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingConstants().SlashDeferDuration();
            if (version == 9291U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingConstants().SlashDeferDuration();
            if (version == 9300U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingConstants().SlashDeferDuration();
            if (version == 9340U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingConstants().SlashDeferDuration();
            if (version == 9360U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingConstants().SlashDeferDuration();
            if (version == 9370U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingConstants().SlashDeferDuration();
            if (version == 9420U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingConstants().SlashDeferDuration();
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingConstants().SlashDeferDuration();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MaxNominatorRewardedPerValidator
        ///  The maximum number of nominators rewarded for each validator.
        /// 
        ///  For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can
        ///  claim their reward. This used to limit the i/o cost for the nominator payout.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxNominatorRewardedPerValidator(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9110U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9122U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9140U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9151U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9170U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9180U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9190U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9200U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9220U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9230U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9250U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9260U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9270U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9280U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9281U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9291U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9300U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9340U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9360U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9370U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9420U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingConstants().MaxNominatorRewardedPerValidator();
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingConstants().MaxNominatorRewardedPerValidator();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MaxNominations
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxNominations(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9110U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.StakingConstants().MaxNominations();
            if (version == 9122U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.StakingConstants().MaxNominations();
            if (version == 9140U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.StakingConstants().MaxNominations();
            if (version == 9151U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.StakingConstants().MaxNominations();
            if (version == 9180U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingConstants().MaxNominations();
            if (version == 9190U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingConstants().MaxNominations();
            if (version == 9200U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingConstants().MaxNominations();
            if (version == 9220U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingConstants().MaxNominations();
            if (version == 9230U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingConstants().MaxNominations();
            if (version == 9250U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingConstants().MaxNominations();
            if (version == 9260U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingConstants().MaxNominations();
            if (version == 9270U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingConstants().MaxNominations();
            if (version == 9280U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingConstants().MaxNominations();
            if (version == 9281U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingConstants().MaxNominations();
            if (version == 9291U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingConstants().MaxNominations();
            if (version == 9300U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingConstants().MaxNominations();
            if (version == 9340U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingConstants().MaxNominations();
            if (version == 9360U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingConstants().MaxNominations();
            if (version == 9370U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingConstants().MaxNominations();
            if (version == 9420U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingConstants().MaxNominations();
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingConstants().MaxNominations();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MaxUnlockingChunks
        ///  The maximum number of `unlocking` chunks a [`StakingLedger`] can have. Effectively
        ///  determines how many unique eras a staker may be unbonding in.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxUnlockingChunks(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9180U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.StakingConstants().MaxUnlockingChunks();
            if (version == 9190U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.StakingConstants().MaxUnlockingChunks();
            if (version == 9200U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.StakingConstants().MaxUnlockingChunks();
            if (version == 9220U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.StakingConstants().MaxUnlockingChunks();
            if (version == 9230U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.StakingConstants().MaxUnlockingChunks();
            if (version == 9250U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.StakingConstants().MaxUnlockingChunks();
            if (version == 9260U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.StakingConstants().MaxUnlockingChunks();
            if (version == 9270U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.StakingConstants().MaxUnlockingChunks();
            if (version == 9280U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.StakingConstants().MaxUnlockingChunks();
            if (version == 9281U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.StakingConstants().MaxUnlockingChunks();
            if (version == 9291U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.StakingConstants().MaxUnlockingChunks();
            if (version == 9300U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingConstants().MaxUnlockingChunks();
            if (version == 9340U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingConstants().MaxUnlockingChunks();
            if (version == 9360U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingConstants().MaxUnlockingChunks();
            if (version == 9370U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingConstants().MaxUnlockingChunks();
            if (version == 9420U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingConstants().MaxUnlockingChunks();
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingConstants().MaxUnlockingChunks();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> HistoryDepth
        ///  Number of eras to keep in history.
        /// 
        ///  Following information is kept for eras in `[current_era -
        ///  HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,
        ///  `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,
        ///  `ErasTotalStake`, `ErasStartSessionIndex`,
        ///  `StakingLedger.claimed_rewards`.
        /// 
        ///  Must be more than the number of eras delayed by session.
        ///  I.e. active era must always be in history. I.e. `active_era >
        ///  current_era - history_depth` must be guaranteed.
        /// 
        ///  If migrating an existing pallet from storage value to config value,
        ///  this should be set to same value or greater as in storage.
        /// 
        ///  Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`
        ///  item `StakingLedger.claimed_rewards`. Setting this value lower than
        ///  the existing value can lead to inconsistencies in the
        ///  `StakingLedger` and will need to be handled properly in a migration.
        ///  The test `reducing_history_depth_abrupt` shows this effect.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 HistoryDepth(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9300U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.StakingConstants().HistoryDepth();
            if (version == 9340U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.StakingConstants().HistoryDepth();
            if (version == 9360U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.StakingConstants().HistoryDepth();
            if (version == 9370U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.StakingConstants().HistoryDepth();
            if (version == 9420U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.StakingConstants().HistoryDepth();
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.StakingConstants().HistoryDepth();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }
    }

    public enum StakingErrors
    {
        /// <summary>
        /// >> NotController
        /// Not a controller account.
        /// </summary>
        NotController,
        /// <summary>
        /// >> NotStash
        /// Not a stash account.
        /// </summary>
        NotStash,
        /// <summary>
        /// >> AlreadyBonded
        /// Stash is already bonded.
        /// </summary>
        AlreadyBonded,
        /// <summary>
        /// >> AlreadyPaired
        /// Controller is already paired.
        /// </summary>
        AlreadyPaired,
        /// <summary>
        /// >> EmptyTargets
        /// Targets cannot be empty.
        /// </summary>
        EmptyTargets,
        /// <summary>
        /// >> DuplicateIndex
        /// Duplicate index.
        /// </summary>
        DuplicateIndex,
        /// <summary>
        /// >> InvalidSlashIndex
        /// Slash record index out of bounds.
        /// </summary>
        InvalidSlashIndex,
        /// <summary>
        /// >> InsufficientBond
        /// Can not bond with value less than minimum required.
        /// </summary>
        InsufficientBond,
        /// <summary>
        /// >> NoMoreChunks
        /// Can not schedule more unlock chunks.
        /// </summary>
        NoMoreChunks,
        /// <summary>
        /// >> NoUnlockChunk
        /// Can not rebond without unlocking chunks.
        /// </summary>
        NoUnlockChunk,
        /// <summary>
        /// >> FundedTarget
        /// Attempting to target a stash that still has funds.
        /// </summary>
        FundedTarget,
        /// <summary>
        /// >> InvalidEraToReward
        /// Invalid era to reward.
        /// </summary>
        InvalidEraToReward,
        /// <summary>
        /// >> InvalidNumberOfNominations
        /// Invalid number of nominations.
        /// </summary>
        InvalidNumberOfNominations,
        /// <summary>
        /// >> NotSortedAndUnique
        /// Items are not sorted and unique.
        /// </summary>
        NotSortedAndUnique,
        /// <summary>
        /// >> AlreadyClaimed
        /// Rewards for this era have already been claimed for this validator.
        /// </summary>
        AlreadyClaimed,
        /// <summary>
        /// >> IncorrectHistoryDepth
        /// Incorrect previous history depth input provided.
        /// </summary>
        IncorrectHistoryDepth,
        /// <summary>
        /// >> IncorrectSlashingSpans
        /// Incorrect number of slashing spans provided.
        /// </summary>
        IncorrectSlashingSpans,
        /// <summary>
        /// >> BadState
        /// Internal state has become somehow corrupted and the operation cannot continue.
        /// </summary>
        BadState,
        /// <summary>
        /// >> TooManyTargets
        /// Too many nomination targets supplied.
        /// </summary>
        TooManyTargets,
        /// <summary>
        /// >> BadTarget
        /// A nomination target was supplied that was blocked or otherwise not a validator.
        /// </summary>
        BadTarget,
        /// <summary>
        /// >> CannotChillOther
        /// The user has enough bond and thus cannot be chilled forcefully by an external person.
        /// </summary>
        CannotChillOther,
        /// <summary>
        /// >> TooManyNominators
        /// There are too many nominators in the system. Governance needs to adjust the staking
        /// settings to keep things safe for the runtime.
        /// </summary>
        TooManyNominators,
        /// <summary>
        /// >> TooManyValidators
        /// There are too many validators in the system. Governance needs to adjust the staking
        /// settings to keep things safe for the runtime.
        /// </summary>
        TooManyValidators,
        /// <summary>
        /// >> CommissionTooLow
        /// Commission is too low. Must be at least `MinCommission`.
        /// </summary>
        CommissionTooLow,
        /// <summary>
        /// >> BoundNotMet
        /// Some bound is not met.
        /// </summary>
        BoundNotMet
    }
}