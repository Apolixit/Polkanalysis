//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading.Tasks;
using Substrate.NetApi.Model.Meta;
using System.Threading;
using Substrate.NetApi;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Extrinsics;

namespace Polkanalysis.Polkadot.NetApiExt.Generated.Storage
{
    public sealed class BagsListStorage
    {
        /// <summary>
        /// Substrate client for the storage calls.
        /// </summary>
        private SubstrateClientExt _client;
        public string blockHash { get; set; } = null;

        public async Task<uint> GetVersionAsync(CancellationToken token)
        {
            var result = await _client.State.GetRuntimeVersionAtAsync(blockHash, token);
            return result.SpecVersion;
        }

        /// <summary>
        /// Storage for SpecVersion 9140
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.BagsListStorage _bagsListStorageV9140;
        /// <summary>
        /// Storage for SpecVersion 9151
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.BagsListStorage _bagsListStorageV9151;
        /// <summary>
        /// Storage for SpecVersion 9170
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.BagsListStorage _bagsListStorageV9170;
        /// <summary>
        /// Storage for SpecVersion 9180
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.BagsListStorage _bagsListStorageV9180;
        /// <summary>
        /// Storage for SpecVersion 9190
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.BagsListStorage _bagsListStorageV9190;
        /// <summary>
        /// Storage for SpecVersion 9200
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.BagsListStorage _bagsListStorageV9200;
        /// <summary>
        /// Storage for SpecVersion 9220
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.BagsListStorage _bagsListStorageV9220;
        /// <summary>
        /// >> ListNodesParams
        ///  A single node, within some bag.
        /// 
        ///  Nodes store links forward and back within their respective bags.
        /// </summary>
        public static string ListNodesParams(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, uint version)
        {
            string param = null;
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.BagsListStorage.ListNodesParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.BagsListStorage.ListNodesParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.BagsListStorage.ListNodesParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.BagsListStorage.ListNodesParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.BagsListStorage.ListNodesParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.BagsListStorage.ListNodesParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.BagsListStorage.ListNodesParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ListNodesDefault
        /// Default value as hex string
        /// </summary>
        public static string ListNodesDefault(uint version)
        {
            string param = null;
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.BagsListStorage.ListNodesDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.BagsListStorage.ListNodesDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.BagsListStorage.ListNodesDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.BagsListStorage.ListNodesDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.BagsListStorage.ListNodesDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.BagsListStorage.ListNodesDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.BagsListStorage.ListNodesDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ListNodes
        ///  A single node, within some bag.
        /// 
        ///  Nodes store links forward and back within their respective bags.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_bags_list.list.NodeBase> ListNodesAsync(Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.sp_core.crypto.AccountId32Base key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_bags_list.list.NodeBase param = null;
            if (version == 9140U)
            {
                _bagsListStorageV9140.blockHash = blockHash;
                param = await _bagsListStorageV9140.ListNodes((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9140.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9151U)
            {
                _bagsListStorageV9151.blockHash = blockHash;
                param = await _bagsListStorageV9151.ListNodes((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9151.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9170U)
            {
                _bagsListStorageV9170.blockHash = blockHash;
                param = await _bagsListStorageV9170.ListNodes((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9170.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9180U)
            {
                _bagsListStorageV9180.blockHash = blockHash;
                param = await _bagsListStorageV9180.ListNodes((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9180.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9190U)
            {
                _bagsListStorageV9190.blockHash = blockHash;
                param = await _bagsListStorageV9190.ListNodes((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9190.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9200U)
            {
                _bagsListStorageV9200.blockHash = blockHash;
                param = await _bagsListStorageV9200.ListNodes((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9200.sp_core.crypto.AccountId32)key,token);
            }

            if (version == 9220U)
            {
                _bagsListStorageV9220.blockHash = blockHash;
                param = await _bagsListStorageV9220.ListNodes((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9220.sp_core.crypto.AccountId32)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CounterForListNodesParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForListNodesParams(uint version)
        {
            string param = null;
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.BagsListStorage.CounterForListNodesParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.BagsListStorage.CounterForListNodesParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.BagsListStorage.CounterForListNodesParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.BagsListStorage.CounterForListNodesParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.BagsListStorage.CounterForListNodesParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.BagsListStorage.CounterForListNodesParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.BagsListStorage.CounterForListNodesParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CounterForListNodesDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForListNodesDefault(uint version)
        {
            string param = null;
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.BagsListStorage.CounterForListNodesDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.BagsListStorage.CounterForListNodesDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.BagsListStorage.CounterForListNodesDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.BagsListStorage.CounterForListNodesDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.BagsListStorage.CounterForListNodesDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.BagsListStorage.CounterForListNodesDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.BagsListStorage.CounterForListNodesDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> CounterForListNodes
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForListNodesAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9140U)
            {
                _bagsListStorageV9140.blockHash = blockHash;
                param = await _bagsListStorageV9140.CounterForListNodes(token);
            }

            if (version == 9151U)
            {
                _bagsListStorageV9151.blockHash = blockHash;
                param = await _bagsListStorageV9151.CounterForListNodes(token);
            }

            if (version == 9170U)
            {
                _bagsListStorageV9170.blockHash = blockHash;
                param = await _bagsListStorageV9170.CounterForListNodes(token);
            }

            if (version == 9180U)
            {
                _bagsListStorageV9180.blockHash = blockHash;
                param = await _bagsListStorageV9180.CounterForListNodes(token);
            }

            if (version == 9190U)
            {
                _bagsListStorageV9190.blockHash = blockHash;
                param = await _bagsListStorageV9190.CounterForListNodes(token);
            }

            if (version == 9200U)
            {
                _bagsListStorageV9200.blockHash = blockHash;
                param = await _bagsListStorageV9200.CounterForListNodes(token);
            }

            if (version == 9220U)
            {
                _bagsListStorageV9220.blockHash = blockHash;
                param = await _bagsListStorageV9220.CounterForListNodes(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ListBagsParams
        ///  A bag stored in storage.
        /// 
        ///  Stores a `Bag` struct, which stores head and tail pointers to itself.
        /// </summary>
        public static string ListBagsParams(Substrate.NetApi.Model.Types.Primitive.U64 key, uint version)
        {
            string param = null;
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.BagsListStorage.ListBagsParams((Substrate.NetApi.Model.Types.Primitive.U64)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.BagsListStorage.ListBagsParams((Substrate.NetApi.Model.Types.Primitive.U64)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.BagsListStorage.ListBagsParams((Substrate.NetApi.Model.Types.Primitive.U64)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.BagsListStorage.ListBagsParams((Substrate.NetApi.Model.Types.Primitive.U64)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.BagsListStorage.ListBagsParams((Substrate.NetApi.Model.Types.Primitive.U64)key);
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.BagsListStorage.ListBagsParams((Substrate.NetApi.Model.Types.Primitive.U64)key);
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.BagsListStorage.ListBagsParams((Substrate.NetApi.Model.Types.Primitive.U64)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ListBagsDefault
        /// Default value as hex string
        /// </summary>
        public static string ListBagsDefault(uint version)
        {
            string param = null;
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.BagsListStorage.ListBagsDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.BagsListStorage.ListBagsDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.BagsListStorage.ListBagsDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.BagsListStorage.ListBagsDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.BagsListStorage.ListBagsDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.BagsListStorage.ListBagsDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.BagsListStorage.ListBagsDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ListBags
        ///  A bag stored in storage.
        /// 
        ///  Stores a `Bag` struct, which stores head and tail pointers to itself.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_bags_list.list.BagBase> ListBagsAsync(Substrate.NetApi.Model.Types.Primitive.U64 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_bags_list.list.BagBase param = null;
            if (version == 9140U)
            {
                _bagsListStorageV9140.blockHash = blockHash;
                param = await _bagsListStorageV9140.ListBags((Substrate.NetApi.Model.Types.Primitive.U64)key,token);
            }

            if (version == 9151U)
            {
                _bagsListStorageV9151.blockHash = blockHash;
                param = await _bagsListStorageV9151.ListBags((Substrate.NetApi.Model.Types.Primitive.U64)key,token);
            }

            if (version == 9170U)
            {
                _bagsListStorageV9170.blockHash = blockHash;
                param = await _bagsListStorageV9170.ListBags((Substrate.NetApi.Model.Types.Primitive.U64)key,token);
            }

            if (version == 9180U)
            {
                _bagsListStorageV9180.blockHash = blockHash;
                param = await _bagsListStorageV9180.ListBags((Substrate.NetApi.Model.Types.Primitive.U64)key,token);
            }

            if (version == 9190U)
            {
                _bagsListStorageV9190.blockHash = blockHash;
                param = await _bagsListStorageV9190.ListBags((Substrate.NetApi.Model.Types.Primitive.U64)key,token);
            }

            if (version == 9200U)
            {
                _bagsListStorageV9200.blockHash = blockHash;
                param = await _bagsListStorageV9200.ListBags((Substrate.NetApi.Model.Types.Primitive.U64)key,token);
            }

            if (version == 9220U)
            {
                _bagsListStorageV9220.blockHash = blockHash;
                param = await _bagsListStorageV9220.ListBags((Substrate.NetApi.Model.Types.Primitive.U64)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        public BagsListStorage(SubstrateClientExt client)
        {
            _client = client;
            _bagsListStorageV9140 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.BagsListStorage(_client);
            _bagsListStorageV9151 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.BagsListStorage(_client);
            _bagsListStorageV9170 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.BagsListStorage(_client);
            _bagsListStorageV9180 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.BagsListStorage(_client);
            _bagsListStorageV9190 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.BagsListStorage(_client);
            _bagsListStorageV9200 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.BagsListStorage(_client);
            _bagsListStorageV9220 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.BagsListStorage(_client);
        }
    }

    public sealed class BagsListConstants
    {
        /// <summary>
        /// >> BagThresholds
        ///  The list of thresholds separating the various bags.
        /// 
        ///  Ids are separated into unsorted bags according to their vote weight. This specifies the
        ///  thresholds separating the bags. An id's bag is the largest bag for which the id's weight
        ///  is less than or equal to its upper threshold.
        /// 
        ///  When ids are iterated, higher bags are iterated completely before lower bags. This means
        ///  that iteration is _semi-sorted_: ids of higher weight tend to come before ids of lower
        ///  weight, but peer ids within a particular bag are sorted in insertion order.
        /// 
        ///  # Expressing the constant
        /// 
        ///  This constant must be sorted in strictly increasing order. Duplicate items are not
        ///  permitted.
        /// 
        ///  There is an implied upper limit of `VoteWeight::MAX`; that value does not need to be
        ///  specified within the bag. For any two threshold lists, if one ends with
        ///  `VoteWeight::MAX`, the other one does not, and they are otherwise equal, the two lists
        ///  will behave identically.
        /// 
        ///  # Calculation
        /// 
        ///  It is recommended to generate the set of thresholds in a geometric series, such that
        ///  there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *
        ///  constant_ratio).max(threshold[k] + 1)` for all `k`.
        /// 
        ///  The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.
        /// 
        ///  # Examples
        /// 
        ///  - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and
        ///    iteration is strictly in insertion order.
        ///  - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to
        ///    the procedure given above, then the constant ratio is equal to 2.
        ///  - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to
        ///    the procedure given above, then the constant ratio is approximately equal to 1.248.
        ///  - If the threshold list begins `[1, 2, 3, ...]`, then an id with weight 0 or 1 will fall
        ///    into bag 0, an id with weight 2 will fall into bag 1, etc.
        /// 
        ///  # Migration
        /// 
        ///  In the event that this list ever changes, a copy of the old bags list must be retained.
        ///  With that `List::migrate` can be called, which will perform the appropriate migration.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable BagThresholds(uint version)
        {
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable result = null;
            if (version == 9140U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.BagsListConstants().BagThresholds();
            if (version == 9151U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.BagsListConstants().BagThresholds();
            if (version == 9170U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.BagsListConstants().BagThresholds();
            if (version == 9180U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.BagsListConstants().BagThresholds();
            if (version == 9190U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.BagsListConstants().BagThresholds();
            if (version == 9200U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.BagsListConstants().BagThresholds();
            if (version == 9220U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.BagsListConstants().BagThresholds();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }
    }

    public enum BagsListErrors
    {
        /// <summary>
        /// >> NotInSameBag
        /// Attempted to place node in front of a node in another bag.
        /// </summary>
        NotInSameBag,
        /// <summary>
        /// >> IdNotFound
        /// Id not found in list.
        /// </summary>
        IdNotFound,
        /// <summary>
        /// >> NotHeavier
        /// An Id does not have a greater vote weight than another Id.
        /// </summary>
        NotHeavier,
        /// <summary>
        /// >> List
        /// A error in the list interface implementation.
        /// </summary>
        List
    }
}