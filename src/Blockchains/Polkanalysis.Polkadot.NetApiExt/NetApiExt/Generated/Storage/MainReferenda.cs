//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading.Tasks;
using Substrate.NetApi.Model.Meta;
using System.Threading;
using Substrate.NetApi;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Extrinsics;

namespace Polkanalysis.Polkadot.NetApiExt.Generated.Storage
{
    public sealed class ReferendaStorage
    {
        /// <summary>
        /// Substrate client for the storage calls.
        /// </summary>
        private SubstrateClientExt _client;
        public string blockHash { get; set; } = null;

        public async Task<uint> GetVersionAsync(CancellationToken token)
        {
            var result = await _client.State.GetRuntimeVersionAtAsync(blockHash, token);
            return result.SpecVersion;
        }

        /// <summary>
        /// Storage for SpecVersion 9420
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaStorage _referendaStorageV9420;
        /// <summary>
        /// Storage for SpecVersion 9430
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaStorage _referendaStorageV9430;
        /// <summary>
        /// >> ReferendumCountParams
        ///  The next free referendum index, aka the number of referenda started so far.
        /// </summary>
        public static string ReferendumCountParams(uint version)
        {
            string param = null;
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaStorage.ReferendumCountParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaStorage.ReferendumCountParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ReferendumCountDefault
        /// Default value as hex string
        /// </summary>
        public static string ReferendumCountDefault(uint version)
        {
            string param = null;
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaStorage.ReferendumCountDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaStorage.ReferendumCountDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ReferendumCount
        ///  The next free referendum index, aka the number of referenda started so far.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ReferendumCountAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9420U)
            {
                _referendaStorageV9420.blockHash = blockHash;
                param = await _referendaStorageV9420.ReferendumCount(token);
            }

            if (version == 9430U)
            {
                _referendaStorageV9430.blockHash = blockHash;
                param = await _referendaStorageV9430.ReferendumCount(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ReferendumInfoForParams
        ///  Information concerning any given referendum.
        /// </summary>
        public static string ReferendumInfoForParams(Substrate.NetApi.Model.Types.Primitive.U32 key, uint version)
        {
            string param = null;
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaStorage.ReferendumInfoForParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaStorage.ReferendumInfoForParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ReferendumInfoForDefault
        /// Default value as hex string
        /// </summary>
        public static string ReferendumInfoForDefault(uint version)
        {
            string param = null;
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaStorage.ReferendumInfoForDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaStorage.ReferendumInfoForDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ReferendumInfoFor
        ///  Information concerning any given referendum.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum> ReferendumInfoForAsync(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum param = null;
            if (version == 9420U)
            {
                _referendaStorageV9420.blockHash = blockHash;
                param = await _referendaStorageV9420.ReferendumInfoFor((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9430U)
            {
                _referendaStorageV9430.blockHash = blockHash;
                param = await _referendaStorageV9430.ReferendumInfoFor((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> TrackQueueParams
        ///  The sorted list of referenda ready to be decided but not yet being decided, ordered by
        ///  conviction-weighted approvals.
        /// 
        ///  This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
        /// </summary>
        public static string TrackQueueParams(Substrate.NetApi.Model.Types.Primitive.U16 key, uint version)
        {
            string param = null;
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaStorage.TrackQueueParams((Substrate.NetApi.Model.Types.Primitive.U16)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaStorage.TrackQueueParams((Substrate.NetApi.Model.Types.Primitive.U16)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> TrackQueueDefault
        /// Default value as hex string
        /// </summary>
        public static string TrackQueueDefault(uint version)
        {
            string param = null;
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaStorage.TrackQueueDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaStorage.TrackQueueDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> TrackQueue
        ///  The sorted list of referenda ready to be decided but not yet being decided, ordered by
        ///  conviction-weighted approvals.
        /// 
        ///  This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> TrackQueueAsync(Substrate.NetApi.Model.Types.Primitive.U16 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9420U)
            {
                _referendaStorageV9420.blockHash = blockHash;
                param = await _referendaStorageV9420.TrackQueue((Substrate.NetApi.Model.Types.Primitive.U16)key,token);
            }

            if (version == 9430U)
            {
                _referendaStorageV9430.blockHash = blockHash;
                param = await _referendaStorageV9430.TrackQueue((Substrate.NetApi.Model.Types.Primitive.U16)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> DecidingCountParams
        ///  The number of referenda being decided currently.
        /// </summary>
        public static string DecidingCountParams(Substrate.NetApi.Model.Types.Primitive.U16 key, uint version)
        {
            string param = null;
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaStorage.DecidingCountParams((Substrate.NetApi.Model.Types.Primitive.U16)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaStorage.DecidingCountParams((Substrate.NetApi.Model.Types.Primitive.U16)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> DecidingCountDefault
        /// Default value as hex string
        /// </summary>
        public static string DecidingCountDefault(uint version)
        {
            string param = null;
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaStorage.DecidingCountDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaStorage.DecidingCountDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> DecidingCount
        ///  The number of referenda being decided currently.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> DecidingCountAsync(Substrate.NetApi.Model.Types.Primitive.U16 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.U32 param = null;
            if (version == 9420U)
            {
                _referendaStorageV9420.blockHash = blockHash;
                param = await _referendaStorageV9420.DecidingCount((Substrate.NetApi.Model.Types.Primitive.U16)key,token);
            }

            if (version == 9430U)
            {
                _referendaStorageV9430.blockHash = blockHash;
                param = await _referendaStorageV9430.DecidingCount((Substrate.NetApi.Model.Types.Primitive.U16)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MetadataOfParams
        ///  The metadata is a general information concerning the referendum.
        ///  The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON
        ///  dump or IPFS hash of a JSON file.
        /// 
        ///  Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)
        ///  large preimages.
        /// </summary>
        public static string MetadataOfParams(Substrate.NetApi.Model.Types.Primitive.U32 key, uint version)
        {
            string param = null;
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaStorage.MetadataOfParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaStorage.MetadataOfParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MetadataOfDefault
        /// Default value as hex string
        /// </summary>
        public static string MetadataOfDefault(uint version)
        {
            string param = null;
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaStorage.MetadataOfDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaStorage.MetadataOfDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> MetadataOf
        ///  The metadata is a general information concerning the referendum.
        ///  The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON
        ///  dump or IPFS hash of a JSON file.
        /// 
        ///  Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)
        ///  large preimages.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.primitive_types.H256Base> MetadataOfAsync(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.primitive_types.H256Base param = null;
            if (version == 9420U)
            {
                _referendaStorageV9420.blockHash = blockHash;
                param = await _referendaStorageV9420.MetadataOf((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9430U)
            {
                _referendaStorageV9430.blockHash = blockHash;
                param = await _referendaStorageV9430.MetadataOf((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        public ReferendaStorage(SubstrateClientExt client)
        {
            _client = client;
            _referendaStorageV9420 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaStorage(_client);
            _referendaStorageV9430 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaStorage(_client);
        }
    }

    public sealed class ReferendaConstants
    {
        /// <summary>
        /// >> SubmissionDeposit
        ///  The minimum amount to be used as a deposit for a public referendum proposal.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 SubmissionDeposit(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U128 result = null;
            if (version == 9420U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaConstants().SubmissionDeposit();
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaConstants().SubmissionDeposit();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MaxQueued
        ///  Maximum size of the referendum queue for a single track.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxQueued(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9420U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaConstants().MaxQueued();
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaConstants().MaxQueued();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> UndecidingTimeout
        ///  The number of blocks after submission that a referendum must begin being decided by.
        ///  Once this passes, then anyone may cancel the referendum.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 UndecidingTimeout(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9420U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaConstants().UndecidingTimeout();
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaConstants().UndecidingTimeout();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> AlarmInterval
        ///  Quantization level for the referendum wakeup scheduler. A higher number will result in
        ///  fewer storage reads/writes needed for smaller voters, but also result in delays to the
        ///  automatic referendum status changes. Explicit servicing instructions are unaffected.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 AlarmInterval(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9420U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaConstants().AlarmInterval();
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaConstants().AlarmInterval();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> Tracks
        ///  Information concerning the different referendum tracks.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable Tracks(uint version)
        {
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable result = null;
            if (version == 9420U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ReferendaConstants().Tracks();
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ReferendaConstants().Tracks();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }
    }

    public enum ReferendaErrors
    {
        /// <summary>
        /// >> NotOngoing
        /// Referendum is not ongoing.
        /// </summary>
        NotOngoing,
        /// <summary>
        /// >> HasDeposit
        /// Referendum's decision deposit is already paid.
        /// </summary>
        HasDeposit,
        /// <summary>
        /// >> BadTrack
        /// The track identifier given was invalid.
        /// </summary>
        BadTrack,
        /// <summary>
        /// >> Full
        /// There are already a full complement of referenda in progress for this track.
        /// </summary>
        Full,
        /// <summary>
        /// >> QueueEmpty
        /// The queue of the track is empty.
        /// </summary>
        QueueEmpty,
        /// <summary>
        /// >> BadReferendum
        /// The referendum index provided is invalid in this context.
        /// </summary>
        BadReferendum,
        /// <summary>
        /// >> NothingToDo
        /// There was nothing to do in the advancement.
        /// </summary>
        NothingToDo,
        /// <summary>
        /// >> NoTrack
        /// No track exists for the proposal origin.
        /// </summary>
        NoTrack,
        /// <summary>
        /// >> Unfinished
        /// Any deposit cannot be refunded until after the decision is over.
        /// </summary>
        Unfinished,
        /// <summary>
        /// >> NoPermission
        /// The deposit refunder is not the depositor.
        /// </summary>
        NoPermission,
        /// <summary>
        /// >> NoDeposit
        /// The deposit cannot be refunded since none was made.
        /// </summary>
        NoDeposit,
        /// <summary>
        /// >> BadStatus
        /// The referendum status is invalid for this operation.
        /// </summary>
        BadStatus,
        /// <summary>
        /// >> PreimageNotExist
        /// The preimage does not exist.
        /// </summary>
        PreimageNotExist
    }
}