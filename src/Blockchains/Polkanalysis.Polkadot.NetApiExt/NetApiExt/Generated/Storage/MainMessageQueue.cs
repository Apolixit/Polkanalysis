//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading.Tasks;
using Substrate.NetApi.Model.Meta;
using System.Threading;
using Substrate.NetApi;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Extrinsics;

namespace Polkanalysis.Polkadot.NetApiExt.Generated.Storage
{
    public sealed class MessageQueueStorage
    {
        /// <summary>
        /// Substrate client for the storage calls.
        /// </summary>
        private SubstrateClientExt _client;
        public string blockHash { get; set; } = null;

        public async Task<uint> GetVersionAsync(CancellationToken token)
        {
            var result = await _client.State.GetRuntimeVersionAtAsync(blockHash, token);
            return result.SpecVersion;
        }

        /// <summary>
        /// Storage for SpecVersion 9430
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.MessageQueueStorage _messageQueueStorageV9430;
        /// <summary>
        /// >> BookStateForParams
        ///  The index of the first and last (non-empty) pages.
        /// </summary>
        public static string BookStateForParams(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum key, uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.MessageQueueStorage.BookStateForParams((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.polkadot_runtime_parachains.inclusion.EnumAggregateMessageOrigin)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> BookStateForDefault
        /// Default value as hex string
        /// </summary>
        public static string BookStateForDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.MessageQueueStorage.BookStateForDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> BookStateFor
        ///  The index of the first and last (non-empty) pages.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_message_queue.BookStateBase> BookStateForAsync(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_message_queue.BookStateBase param = null;
            if (version == 9430U)
            {
                _messageQueueStorageV9430.blockHash = blockHash;
                param = await _messageQueueStorageV9430.BookStateFor((Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.polkadot_runtime_parachains.inclusion.EnumAggregateMessageOrigin)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ServiceHeadParams
        ///  The origin at which we should begin servicing.
        /// </summary>
        public static string ServiceHeadParams(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.MessageQueueStorage.ServiceHeadParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ServiceHeadDefault
        /// Default value as hex string
        /// </summary>
        public static string ServiceHeadDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.MessageQueueStorage.ServiceHeadDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ServiceHead
        ///  The origin at which we should begin servicing.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum> ServiceHeadAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnum param = null;
            if (version == 9430U)
            {
                _messageQueueStorageV9430.blockHash = blockHash;
                param = await _messageQueueStorageV9430.ServiceHead(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> PagesParams
        ///  The map of page indices to pages.
        /// </summary>
        public static string PagesParams(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.MessageQueueStorage.PagesParams((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.polkadot_runtime_parachains.inclusion.EnumAggregateMessageOrigin, Substrate.NetApi.Model.Types.Primitive.U32>)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> PagesDefault
        /// Default value as hex string
        /// </summary>
        public static string PagesDefault(uint version)
        {
            string param = null;
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.MessageQueueStorage.PagesDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> Pages
        ///  The map of page indices to pages.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_message_queue.PageBase> PagesAsync(Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.pallet_message_queue.PageBase param = null;
            if (version == 9430U)
            {
                _messageQueueStorageV9430.blockHash = blockHash;
                param = await _messageQueueStorageV9430.Pages((Substrate.NetApi.Model.Types.Base.BaseTuple<Polkanalysis.Polkadot.NetApiExt.Generated.Model.v9430.polkadot_runtime_parachains.inclusion.EnumAggregateMessageOrigin, Substrate.NetApi.Model.Types.Primitive.U32>)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        public MessageQueueStorage(SubstrateClientExt client)
        {
            _client = client;
            _messageQueueStorageV9430 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.MessageQueueStorage(_client);
        }
    }

    public sealed class MessageQueueConstants
    {
        /// <summary>
        /// >> HeapSize
        ///  The size of the page; this implies the maximum message size which can be sent.
        /// 
        ///  A good value depends on the expected message sizes, their weights, the weight that is
        ///  available for processing them and the maximal needed message size. The maximal message
        ///  size is slightly lower than this as defined by [`MaxMessageLenOf`].
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 HeapSize(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.MessageQueueConstants().HeapSize();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> MaxStale
        ///  The maximum number of stale pages (i.e. of overweight messages) allowed before culling
        ///  can happen. Once there are more stale pages than this, then historical pages may be
        ///  dropped, even if they contain unprocessed overweight messages.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxStale(uint version)
        {
            Substrate.NetApi.Model.Types.Primitive.U32 result = null;
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.MessageQueueConstants().MaxStale();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }

        /// <summary>
        /// >> ServiceWeight
        ///  The amount of weight (if any) which should be provided to the message queue for
        ///  servicing enqueued items.
        /// 
        ///  This may be legitimately `None` in the case that you will call
        ///  `ServiceQueues::service_queues` manually.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.Abstraction.IBaseValue ServiceWeight(uint version)
        {
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseValue result = null;
            if (version == 9430U)
                result = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.MessageQueueConstants().ServiceWeight();
            if (result == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return result;
        }
    }

    public enum MessageQueueErrors
    {
        /// <summary>
        /// >> NotReapable
        /// Page is not reapable because it has items remaining to be processed and is not old
        /// enough.
        /// </summary>
        NotReapable,
        /// <summary>
        /// >> NoPage
        /// Page to be reaped does not exist.
        /// </summary>
        NoPage,
        /// <summary>
        /// >> NoMessage
        /// The referenced message could not be found.
        /// </summary>
        NoMessage,
        /// <summary>
        /// >> AlreadyProcessed
        /// The message was already processed and cannot be processed again.
        /// </summary>
        AlreadyProcessed,
        /// <summary>
        /// >> Queued
        /// The message is queued for future execution.
        /// </summary>
        Queued,
        /// <summary>
        /// >> InsufficientWeight
        /// There is temporarily not enough weight to continue servicing messages.
        /// </summary>
        InsufficientWeight,
        /// <summary>
        /// >> TemporarilyUnprocessable
        /// This message is temporarily unprocessable.
        /// 
        /// Such errors are expected, but not guaranteed, to resolve themselves eventually through
        /// retrying.
        /// </summary>
        TemporarilyUnprocessable
    }
}