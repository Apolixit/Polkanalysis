//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading.Tasks;
using Substrate.NetApi.Model.Meta;
using System.Threading;
using Substrate.NetApi;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Extrinsics;

namespace Polkanalysis.Polkadot.NetApiExt.Generated.Storage
{
    public sealed class ConfigurationStorage
    {
        /// <summary>
        /// Substrate client for the storage calls.
        /// </summary>
        private SubstrateClientExt _client;
        public string blockHash { get; set; } = null;

        public async Task<uint> GetVersionAsync(CancellationToken token)
        {
            var result = await _client.State.GetRuntimeVersionAtAsync(blockHash, token);
            return result.SpecVersion;
        }

        /// <summary>
        /// Storage for SpecVersion 9110
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.ConfigurationStorage _configurationStorageV9110;
        /// <summary>
        /// Storage for SpecVersion 9122
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.ConfigurationStorage _configurationStorageV9122;
        /// <summary>
        /// Storage for SpecVersion 9140
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.ConfigurationStorage _configurationStorageV9140;
        /// <summary>
        /// Storage for SpecVersion 9151
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.ConfigurationStorage _configurationStorageV9151;
        /// <summary>
        /// Storage for SpecVersion 9170
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.ConfigurationStorage _configurationStorageV9170;
        /// <summary>
        /// Storage for SpecVersion 9180
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.ConfigurationStorage _configurationStorageV9180;
        /// <summary>
        /// Storage for SpecVersion 9190
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.ConfigurationStorage _configurationStorageV9190;
        /// <summary>
        /// Storage for SpecVersion 9200
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.ConfigurationStorage _configurationStorageV9200;
        /// <summary>
        /// Storage for SpecVersion 9220
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.ConfigurationStorage _configurationStorageV9220;
        /// <summary>
        /// Storage for SpecVersion 9230
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.ConfigurationStorage _configurationStorageV9230;
        /// <summary>
        /// Storage for SpecVersion 9250
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.ConfigurationStorage _configurationStorageV9250;
        /// <summary>
        /// Storage for SpecVersion 9260
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.ConfigurationStorage _configurationStorageV9260;
        /// <summary>
        /// Storage for SpecVersion 9270
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.ConfigurationStorage _configurationStorageV9270;
        /// <summary>
        /// Storage for SpecVersion 9280
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.ConfigurationStorage _configurationStorageV9280;
        /// <summary>
        /// Storage for SpecVersion 9281
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.ConfigurationStorage _configurationStorageV9281;
        /// <summary>
        /// Storage for SpecVersion 9291
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.ConfigurationStorage _configurationStorageV9291;
        /// <summary>
        /// Storage for SpecVersion 9300
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.ConfigurationStorage _configurationStorageV9300;
        /// <summary>
        /// Storage for SpecVersion 9340
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.ConfigurationStorage _configurationStorageV9340;
        /// <summary>
        /// Storage for SpecVersion 9360
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.ConfigurationStorage _configurationStorageV9360;
        /// <summary>
        /// Storage for SpecVersion 9370
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.ConfigurationStorage _configurationStorageV9370;
        /// <summary>
        /// Storage for SpecVersion 9420
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ConfigurationStorage _configurationStorageV9420;
        /// <summary>
        /// Storage for SpecVersion 9430
        /// </summary>
        private Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ConfigurationStorage _configurationStorageV9430;
        /// <summary>
        /// >> ActiveConfigParams
        ///  The active configuration for the current session.
        /// </summary>
        public static string ActiveConfigParams(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.ConfigurationStorage.ActiveConfigParams();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.ConfigurationStorage.ActiveConfigParams();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.ConfigurationStorage.ActiveConfigParams();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.ConfigurationStorage.ActiveConfigParams();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.ConfigurationStorage.ActiveConfigParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.ConfigurationStorage.ActiveConfigParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.ConfigurationStorage.ActiveConfigParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.ConfigurationStorage.ActiveConfigParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.ConfigurationStorage.ActiveConfigParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.ConfigurationStorage.ActiveConfigParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.ConfigurationStorage.ActiveConfigParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.ConfigurationStorage.ActiveConfigParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.ConfigurationStorage.ActiveConfigParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.ConfigurationStorage.ActiveConfigParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.ConfigurationStorage.ActiveConfigParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.ConfigurationStorage.ActiveConfigParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.ConfigurationStorage.ActiveConfigParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.ConfigurationStorage.ActiveConfigParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.ConfigurationStorage.ActiveConfigParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.ConfigurationStorage.ActiveConfigParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ConfigurationStorage.ActiveConfigParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ConfigurationStorage.ActiveConfigParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ActiveConfigDefault
        /// Default value as hex string
        /// </summary>
        public static string ActiveConfigDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ConfigurationStorage.ActiveConfigDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ConfigurationStorage.ActiveConfigDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> ActiveConfig
        ///  The active configuration for the current session.
        /// </summary>
        public async Task<Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.polkadot_runtime_parachains.configuration.HostConfigurationBase> ActiveConfigAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Polkanalysis.Polkadot.NetApiExt.Generated.Model.vbase.polkadot_runtime_parachains.configuration.HostConfigurationBase param = null;
            if (version == 9110U)
            {
                _configurationStorageV9110.blockHash = blockHash;
                param = await _configurationStorageV9110.ActiveConfig(token);
            }

            if (version == 9122U)
            {
                _configurationStorageV9122.blockHash = blockHash;
                param = await _configurationStorageV9122.ActiveConfig(token);
            }

            if (version == 9140U)
            {
                _configurationStorageV9140.blockHash = blockHash;
                param = await _configurationStorageV9140.ActiveConfig(token);
            }

            if (version == 9151U)
            {
                _configurationStorageV9151.blockHash = blockHash;
                param = await _configurationStorageV9151.ActiveConfig(token);
            }

            if (version == 9170U)
            {
                _configurationStorageV9170.blockHash = blockHash;
                param = await _configurationStorageV9170.ActiveConfig(token);
            }

            if (version == 9180U)
            {
                _configurationStorageV9180.blockHash = blockHash;
                param = await _configurationStorageV9180.ActiveConfig(token);
            }

            if (version == 9190U)
            {
                _configurationStorageV9190.blockHash = blockHash;
                param = await _configurationStorageV9190.ActiveConfig(token);
            }

            if (version == 9200U)
            {
                _configurationStorageV9200.blockHash = blockHash;
                param = await _configurationStorageV9200.ActiveConfig(token);
            }

            if (version == 9220U)
            {
                _configurationStorageV9220.blockHash = blockHash;
                param = await _configurationStorageV9220.ActiveConfig(token);
            }

            if (version == 9230U)
            {
                _configurationStorageV9230.blockHash = blockHash;
                param = await _configurationStorageV9230.ActiveConfig(token);
            }

            if (version == 9250U)
            {
                _configurationStorageV9250.blockHash = blockHash;
                param = await _configurationStorageV9250.ActiveConfig(token);
            }

            if (version == 9260U)
            {
                _configurationStorageV9260.blockHash = blockHash;
                param = await _configurationStorageV9260.ActiveConfig(token);
            }

            if (version == 9270U)
            {
                _configurationStorageV9270.blockHash = blockHash;
                param = await _configurationStorageV9270.ActiveConfig(token);
            }

            if (version == 9280U)
            {
                _configurationStorageV9280.blockHash = blockHash;
                param = await _configurationStorageV9280.ActiveConfig(token);
            }

            if (version == 9281U)
            {
                _configurationStorageV9281.blockHash = blockHash;
                param = await _configurationStorageV9281.ActiveConfig(token);
            }

            if (version == 9291U)
            {
                _configurationStorageV9291.blockHash = blockHash;
                param = await _configurationStorageV9291.ActiveConfig(token);
            }

            if (version == 9300U)
            {
                _configurationStorageV9300.blockHash = blockHash;
                param = await _configurationStorageV9300.ActiveConfig(token);
            }

            if (version == 9340U)
            {
                _configurationStorageV9340.blockHash = blockHash;
                param = await _configurationStorageV9340.ActiveConfig(token);
            }

            if (version == 9360U)
            {
                _configurationStorageV9360.blockHash = blockHash;
                param = await _configurationStorageV9360.ActiveConfig(token);
            }

            if (version == 9370U)
            {
                _configurationStorageV9370.blockHash = blockHash;
                param = await _configurationStorageV9370.ActiveConfig(token);
            }

            if (version == 9420U)
            {
                _configurationStorageV9420.blockHash = blockHash;
                param = await _configurationStorageV9420.ActiveConfig(token);
            }

            if (version == 9430U)
            {
                _configurationStorageV9430.blockHash = blockHash;
                param = await _configurationStorageV9430.ActiveConfig(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> PendingConfigParams
        ///  Pending configuration (if any) for the next session.
        /// </summary>
        public static string PendingConfigParams(Substrate.NetApi.Model.Types.Primitive.U32 key, uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.ConfigurationStorage.PendingConfigParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.ConfigurationStorage.PendingConfigParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.ConfigurationStorage.PendingConfigParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.ConfigurationStorage.PendingConfigParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.ConfigurationStorage.PendingConfigParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.ConfigurationStorage.PendingConfigParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.ConfigurationStorage.PendingConfigParams((Substrate.NetApi.Model.Types.Primitive.U32)key);
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> PendingConfigDefault
        /// Default value as hex string
        /// </summary>
        public static string PendingConfigDefault(uint version)
        {
            string param = null;
            if (version == 9110U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.ConfigurationStorage.PendingConfigDefault();
            if (version == 9122U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.ConfigurationStorage.PendingConfigDefault();
            if (version == 9140U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.ConfigurationStorage.PendingConfigDefault();
            if (version == 9151U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.ConfigurationStorage.PendingConfigDefault();
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.ConfigurationStorage.PendingConfigDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.ConfigurationStorage.PendingConfigDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.ConfigurationStorage.PendingConfigDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> PendingConfig
        ///  Pending configuration (if any) for the next session.
        /// </summary>
        public async Task<IType> PendingConfigAsync(Substrate.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            IType param = null;
            if (version == 9110U)
            {
                _configurationStorageV9110.blockHash = blockHash;
                param = await _configurationStorageV9110.PendingConfig((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9122U)
            {
                _configurationStorageV9122.blockHash = blockHash;
                param = await _configurationStorageV9122.PendingConfig((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9140U)
            {
                _configurationStorageV9140.blockHash = blockHash;
                param = await _configurationStorageV9140.PendingConfig((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9151U)
            {
                _configurationStorageV9151.blockHash = blockHash;
                param = await _configurationStorageV9151.PendingConfig((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9170U)
            {
                _configurationStorageV9170.blockHash = blockHash;
                param = await _configurationStorageV9170.PendingConfig((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9180U)
            {
                _configurationStorageV9180.blockHash = blockHash;
                param = await _configurationStorageV9180.PendingConfig((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (version == 9190U)
            {
                _configurationStorageV9190.blockHash = blockHash;
                param = await _configurationStorageV9190.PendingConfig((Substrate.NetApi.Model.Types.Primitive.U32)key,token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> PendingConfigsParams
        ///  Pending configuration changes.
        /// 
        ///  This is a list of configuration changes, each with a session index at which it should
        ///  be applied.
        /// 
        ///  The list is sorted ascending by session index. Also, this list can only contain at most
        ///  2 items: for the next session and for the `scheduled_session`.
        /// </summary>
        public static string PendingConfigsParams(uint version)
        {
            string param = null;
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.ConfigurationStorage.PendingConfigsParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.ConfigurationStorage.PendingConfigsParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.ConfigurationStorage.PendingConfigsParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.ConfigurationStorage.PendingConfigsParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.ConfigurationStorage.PendingConfigsParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.ConfigurationStorage.PendingConfigsParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.ConfigurationStorage.PendingConfigsParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.ConfigurationStorage.PendingConfigsParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.ConfigurationStorage.PendingConfigsParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.ConfigurationStorage.PendingConfigsParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.ConfigurationStorage.PendingConfigsParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.ConfigurationStorage.PendingConfigsParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.ConfigurationStorage.PendingConfigsParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.ConfigurationStorage.PendingConfigsParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.ConfigurationStorage.PendingConfigsParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.ConfigurationStorage.PendingConfigsParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ConfigurationStorage.PendingConfigsParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ConfigurationStorage.PendingConfigsParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> PendingConfigsDefault
        /// Default value as hex string
        /// </summary>
        public static string PendingConfigsDefault(uint version)
        {
            string param = null;
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ConfigurationStorage.PendingConfigsDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ConfigurationStorage.PendingConfigsDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> PendingConfigs
        ///  Pending configuration changes.
        /// 
        ///  This is a list of configuration changes, each with a session index at which it should
        ///  be applied.
        /// 
        ///  The list is sorted ascending by session index. Also, this list can only contain at most
        ///  2 items: for the next session and for the `scheduled_session`.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable> PendingConfigsAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Base.Abstraction.IBaseEnumerable param = null;
            if (version == 9170U)
            {
                _configurationStorageV9170.blockHash = blockHash;
                param = await _configurationStorageV9170.PendingConfigs(token);
            }

            if (version == 9180U)
            {
                _configurationStorageV9180.blockHash = blockHash;
                param = await _configurationStorageV9180.PendingConfigs(token);
            }

            if (version == 9190U)
            {
                _configurationStorageV9190.blockHash = blockHash;
                param = await _configurationStorageV9190.PendingConfigs(token);
            }

            if (version == 9200U)
            {
                _configurationStorageV9200.blockHash = blockHash;
                param = await _configurationStorageV9200.PendingConfigs(token);
            }

            if (version == 9220U)
            {
                _configurationStorageV9220.blockHash = blockHash;
                param = await _configurationStorageV9220.PendingConfigs(token);
            }

            if (version == 9230U)
            {
                _configurationStorageV9230.blockHash = blockHash;
                param = await _configurationStorageV9230.PendingConfigs(token);
            }

            if (version == 9250U)
            {
                _configurationStorageV9250.blockHash = blockHash;
                param = await _configurationStorageV9250.PendingConfigs(token);
            }

            if (version == 9260U)
            {
                _configurationStorageV9260.blockHash = blockHash;
                param = await _configurationStorageV9260.PendingConfigs(token);
            }

            if (version == 9270U)
            {
                _configurationStorageV9270.blockHash = blockHash;
                param = await _configurationStorageV9270.PendingConfigs(token);
            }

            if (version == 9280U)
            {
                _configurationStorageV9280.blockHash = blockHash;
                param = await _configurationStorageV9280.PendingConfigs(token);
            }

            if (version == 9281U)
            {
                _configurationStorageV9281.blockHash = blockHash;
                param = await _configurationStorageV9281.PendingConfigs(token);
            }

            if (version == 9291U)
            {
                _configurationStorageV9291.blockHash = blockHash;
                param = await _configurationStorageV9291.PendingConfigs(token);
            }

            if (version == 9300U)
            {
                _configurationStorageV9300.blockHash = blockHash;
                param = await _configurationStorageV9300.PendingConfigs(token);
            }

            if (version == 9340U)
            {
                _configurationStorageV9340.blockHash = blockHash;
                param = await _configurationStorageV9340.PendingConfigs(token);
            }

            if (version == 9360U)
            {
                _configurationStorageV9360.blockHash = blockHash;
                param = await _configurationStorageV9360.PendingConfigs(token);
            }

            if (version == 9370U)
            {
                _configurationStorageV9370.blockHash = blockHash;
                param = await _configurationStorageV9370.PendingConfigs(token);
            }

            if (version == 9420U)
            {
                _configurationStorageV9420.blockHash = blockHash;
                param = await _configurationStorageV9420.PendingConfigs(token);
            }

            if (version == 9430U)
            {
                _configurationStorageV9430.blockHash = blockHash;
                param = await _configurationStorageV9430.PendingConfigs(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> BypassConsistencyCheckParams
        ///  If this is set, then the configuration setters will bypass the consistency checks. This
        ///  is meant to be used only as the last resort.
        /// </summary>
        public static string BypassConsistencyCheckParams(uint version)
        {
            string param = null;
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ConfigurationStorage.BypassConsistencyCheckParams();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ConfigurationStorage.BypassConsistencyCheckParams();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> BypassConsistencyCheckDefault
        /// Default value as hex string
        /// </summary>
        public static string BypassConsistencyCheckDefault(uint version)
        {
            string param = null;
            if (version == 9170U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9180U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9190U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9200U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9220U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9230U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9250U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9260U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9270U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9280U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9281U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9291U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9300U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9340U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9360U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9370U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9420U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (version == 9430U)
                param = Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ConfigurationStorage.BypassConsistencyCheckDefault();
            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        /// <summary>
        /// >> BypassConsistencyCheck
        ///  If this is set, then the configuration setters will bypass the consistency checks. This
        ///  is meant to be used only as the last resort.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> BypassConsistencyCheckAsync(CancellationToken token)
        {
            var version = await GetVersionAsync(token);
            Substrate.NetApi.Model.Types.Primitive.Bool param = null;
            if (version == 9170U)
            {
                _configurationStorageV9170.blockHash = blockHash;
                param = await _configurationStorageV9170.BypassConsistencyCheck(token);
            }

            if (version == 9180U)
            {
                _configurationStorageV9180.blockHash = blockHash;
                param = await _configurationStorageV9180.BypassConsistencyCheck(token);
            }

            if (version == 9190U)
            {
                _configurationStorageV9190.blockHash = blockHash;
                param = await _configurationStorageV9190.BypassConsistencyCheck(token);
            }

            if (version == 9200U)
            {
                _configurationStorageV9200.blockHash = blockHash;
                param = await _configurationStorageV9200.BypassConsistencyCheck(token);
            }

            if (version == 9220U)
            {
                _configurationStorageV9220.blockHash = blockHash;
                param = await _configurationStorageV9220.BypassConsistencyCheck(token);
            }

            if (version == 9230U)
            {
                _configurationStorageV9230.blockHash = blockHash;
                param = await _configurationStorageV9230.BypassConsistencyCheck(token);
            }

            if (version == 9250U)
            {
                _configurationStorageV9250.blockHash = blockHash;
                param = await _configurationStorageV9250.BypassConsistencyCheck(token);
            }

            if (version == 9260U)
            {
                _configurationStorageV9260.blockHash = blockHash;
                param = await _configurationStorageV9260.BypassConsistencyCheck(token);
            }

            if (version == 9270U)
            {
                _configurationStorageV9270.blockHash = blockHash;
                param = await _configurationStorageV9270.BypassConsistencyCheck(token);
            }

            if (version == 9280U)
            {
                _configurationStorageV9280.blockHash = blockHash;
                param = await _configurationStorageV9280.BypassConsistencyCheck(token);
            }

            if (version == 9281U)
            {
                _configurationStorageV9281.blockHash = blockHash;
                param = await _configurationStorageV9281.BypassConsistencyCheck(token);
            }

            if (version == 9291U)
            {
                _configurationStorageV9291.blockHash = blockHash;
                param = await _configurationStorageV9291.BypassConsistencyCheck(token);
            }

            if (version == 9300U)
            {
                _configurationStorageV9300.blockHash = blockHash;
                param = await _configurationStorageV9300.BypassConsistencyCheck(token);
            }

            if (version == 9340U)
            {
                _configurationStorageV9340.blockHash = blockHash;
                param = await _configurationStorageV9340.BypassConsistencyCheck(token);
            }

            if (version == 9360U)
            {
                _configurationStorageV9360.blockHash = blockHash;
                param = await _configurationStorageV9360.BypassConsistencyCheck(token);
            }

            if (version == 9370U)
            {
                _configurationStorageV9370.blockHash = blockHash;
                param = await _configurationStorageV9370.BypassConsistencyCheck(token);
            }

            if (version == 9420U)
            {
                _configurationStorageV9420.blockHash = blockHash;
                param = await _configurationStorageV9420.BypassConsistencyCheck(token);
            }

            if (version == 9430U)
            {
                _configurationStorageV9430.blockHash = blockHash;
                param = await _configurationStorageV9430.BypassConsistencyCheck(token);
            }

            if (param == null)
                throw new System.InvalidOperationException("Error while fetching data");
            return param;
        }

        public ConfigurationStorage(SubstrateClientExt client)
        {
            _client = client;
            _configurationStorageV9110 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9110.ConfigurationStorage(_client);
            _configurationStorageV9122 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9122.ConfigurationStorage(_client);
            _configurationStorageV9140 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9140.ConfigurationStorage(_client);
            _configurationStorageV9151 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9151.ConfigurationStorage(_client);
            _configurationStorageV9170 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9170.ConfigurationStorage(_client);
            _configurationStorageV9180 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9180.ConfigurationStorage(_client);
            _configurationStorageV9190 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9190.ConfigurationStorage(_client);
            _configurationStorageV9200 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9200.ConfigurationStorage(_client);
            _configurationStorageV9220 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9220.ConfigurationStorage(_client);
            _configurationStorageV9230 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9230.ConfigurationStorage(_client);
            _configurationStorageV9250 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9250.ConfigurationStorage(_client);
            _configurationStorageV9260 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9260.ConfigurationStorage(_client);
            _configurationStorageV9270 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9270.ConfigurationStorage(_client);
            _configurationStorageV9280 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9280.ConfigurationStorage(_client);
            _configurationStorageV9281 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9281.ConfigurationStorage(_client);
            _configurationStorageV9291 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9291.ConfigurationStorage(_client);
            _configurationStorageV9300 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9300.ConfigurationStorage(_client);
            _configurationStorageV9340 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9340.ConfigurationStorage(_client);
            _configurationStorageV9360 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9360.ConfigurationStorage(_client);
            _configurationStorageV9370 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9370.ConfigurationStorage(_client);
            _configurationStorageV9420 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9420.ConfigurationStorage(_client);
            _configurationStorageV9430 = new Polkanalysis.Polkadot.NetApiExt.Generated.Storage.v9430.ConfigurationStorage(_client);
        }
    }

    public sealed class ConfigurationConstants
    {
    }

    public enum ConfigurationErrors
    {
        /// <summary>
        /// >> InvalidNewValue
        /// The new value for a configuration parameter is invalid.
        /// </summary>
        InvalidNewValue
    }
}