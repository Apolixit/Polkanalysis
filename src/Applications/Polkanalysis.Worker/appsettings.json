{
  "ConnectionStrings": {
    "SubstrateDb": "",
    "Redis": ""
  },
  "SubstrateEndpoints": [
    {
      "Name": "Polkadot",
      "Endpoints": [
        { "Allnodes": "wss://polkadot-rpc.publicnode.com" },
        { "Dwellir": "wss://polkadot-rpc.dwellir.com" },
        { "Stakeworld": "wss://dot-rpc.stakeworld.io" },
        { "Blockops": "wss://polkadot-public-rpc.blockops.network/ws" },
        { "IBP1": "wss://rpc.ibp.network/polkadot" },
        { "IBP2": "wss://polkadot.dotters.network" },
        { "LuckyFriday": "wss://rpc-polkadot.luckyfriday.io" },
        { "OnFinality": "wss://polkadot.api.onfinality.io/public-ws" },
        { "RadiumBlock": "wss://polkadot.public.curie.radiumblock.co/ws" },
        { "RockX": "wss://rockx-dot.w3node.com/polka-public-dot/ws" },
        { "SubQuery": "wss://polkadot.rpc.subquery.network/public/ws" }
      ]
    },
    {
      "Name": "PeopleChain",
      "Endpoints": [
        { "Parity": "wss://polkadot-people-rpc.polkadot.io" },
        { "IBP1": "wss://sys.ibp.network/people-polkadot" },
        { "IBP2": "wss://people-polkadot.dotters.network" },
        { "LuckyFriday": "wss://rpc-people-polkadot.luckyfriday.io" },
        { "RadiumBlock": "wss://people-polkadot.public.curie.radiumblock.co/ws" }
      ]
    },
    {
      "Name": "Coretime",
      "Endpoints": [
        { "Parity": "wss://polkadot-coretime-rpc.polkadot.io" },
        { "IBP2": "wss://coretime-polkadot.dotters.network" }
      ]
    }
  ],
  "Monitoring": {
    "Opentelemetry": {
      "uri": "http://localhost:4317"
      // docker run --rm -it -p 18888:18888 -p 4317:18889 -d --name Polkanalysis_Aspire_Dashboard mcr.microsoft.com/dotnet/aspire-dashboard:8.0.0
    }
  },
  // blockPerimeter is not required, if not set the background worker will just subscribe to new blocks
  "blockPerimeter": {
    /* 
      fromBlock can have following values : 
        * blockNumber
        * genesis
    */
    //"from": "genesis",
    "from": "14000000",
    /*
      toBlock can have following values : 
        * blockNumber
        * now
    */
    "to": "now",
    /* If the data already exists in the database, do we have to overwrite it ? */
    "overrideIfAlreadyExists": false
  },
  "eraPerimeter": {
    /* 
    from can have following values : 
      * Era Id
      * genesis
    */
    "from": 1420,
    /* 
    from can have following values : 
      * Era Id
      * now
    */
    "to": "now",
    "overrideIfAlreadyExists": false
  },
  "tokenPricePerimeter": {
    /* 
    from can have following values : 
      * From Date (format : YYYY.MM.DD)
    */
    "from": "2023.05.01",
    /* 
    from can have following values : 
      * From Date (format : YYYY.MM.DD)
      * now
    */
    "to": "now",
    "overrideIfAlreadyExists": false
  },
  "Serilog": {
    "Using": [ "Serilog.Sinks.Console", "Serilog.Sinks.File", "Serilog.Sinks.OpenTelemetry" ], // "Serilog.Sinks.Seq", "Serilog.Sinks.Elasticsearch"
    "MinimumLevel": "Information",
    // Targets where we want to write our log (list here : https://github.com/serilog/serilog/wiki/Provided-Sinks)
    "WriteTo": [
      // https://github.com/serilog/serilog-sinks-console
      {
        "Name": "Console",
        "Args": {
          "restrictedToMinimumLevel": "Information" // Information inside the console to avoid log spamming
        }
      },
      // https://github.com/serilog/serilog-sinks-file
      {
        "Name": "File",
        "Args": {
          "path": "Logs/worker.txt",
          "rollOnFileSizeLimit": true,
          "restrictedToMinimumLevel": "Warning",
          "rollingInterval": "Day"
        }
      },
      {
        "Name": "OpenTelemetry",
        "Args": {
          "endpoint": "http://localhost:4317"
        }
      }
    ],
    "Enrich": [ "FromLogContext", "WithMachineName" ],
    "Properties": {
      "Application": "Polkanalysis.Worker"
    }
  }
}