@page "/blocks"

@using Polkanalysis.Domain.Contracts.Dto.Block;
@using Polkanalysis.Domain.Contracts.Primary.Explorer.Block
@using Polkanalysis.Domain.Contracts.Secondary.Repository;
@using Polkanalysis.Components.Substrate.Explorer.Block.Views;

@inject IMediator _mediator;

<DataCall MediatorReq="mediatorRequest" Context="Blocks">
    <div class="card">
        <div class="card-body">
            <ComponentListView Elems="Blocks">
                <CardView>
                    <BlockItemCard Block="context" />
                </CardView>
                <TableView>
                    <BlockTable Blocks="context" />
                </TableView>
            </ComponentListView>
        </div>
    </div>
</DataCall>

@code {
    private Task<Result<IEnumerable<BlockLightDto>, ErrorResult>>? mediatorRequest;

    protected async override Task OnInitializedAsync()
    {
        mediatorRequest = _mediator.Send(new BlocksQuery() { NbLastBlocksToFetch = 10000 }, CancellationToken.None);
    }
}
