@using Polkanalysis.Domain.Contracts.Common.Search
@using Polkanalysis.Domain.Contracts.Dto.Block
@using Polkanalysis.Infrastructure.Database.Repository
@inject NavigationManager _navigationManager;

<FluentDataGrid Items="@FilteredBlocks()"
                ResizableColumns=true
                Pagination="@pagination"
                TGridItem="BlockLightDto"
                ShowHover="true"
                GridTemplateColumns="10% 30% 20% 5% 5% 5% auto auto">
    <PropertyColumn Property="@(c => c.Number)" Title="Num" Sortable="true" Align="Align.Start">
        <ColumnOptions>
            <div class="search-box">
                <Polkanalysis.Components.Components.Search.NumberCriteriaFilterUint @bind-Value="BlockNumberCriteria" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <TemplateColumn Title="Hash" Sortable="true" Align="Align.Center">
        <ChildContent>
            <Hash Value="@context.Hash.Value" />
        </ChildContent>
        <ColumnOptions>
            <div class="search-box">
                <Polkanalysis.Components.Components.Search.TextCriteriaFilter @bind-Value="BlockHashCriteria" />
            </div>
        </ColumnOptions>
    </TemplateColumn>
    @* <PropertyColumn Property="@(c => c.Hash)" >
        <ColumnOptions>
            <div class="search-box">
                <Polkanalysis.Components.Components.Search.TextCriteriaFilter @bind-Value="BlockHashCriteria" />
            </div>
        </ColumnOptions>
    </PropertyColumn> *@
    <PropertyColumn Property="@(c => c.ValidatorAddress)" Title="Validator" Sortable="true" Align="Align.Center" Style="text-overflow:ellipsis;">
        <ColumnOptions>
            <div class="search-box">
                <Polkanalysis.Components.Components.Search.TextCriteriaFilter @bind-Value="BlockValidatorCriteria" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(c => c.NbEvents)" Title="Events" Sortable="true" Align="Align.End">
        <ColumnOptions>
            <div class="search-box">
                <Polkanalysis.Components.Components.Search.NumberCriteriaFilterUint @bind-Value="BlockNbEventsCriteria" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(c => c.NbExtrinsics)" Title="Extrinsics" Sortable="true" Align="Align.End">
        <ColumnOptions>
            <div class="search-box">
                <Polkanalysis.Components.Components.Search.NumberCriteriaFilterUint @bind-Value="BlockNbExtrinsicsCriteria" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(c => c.NbLogs)" Title="Logs" Sortable="true" Align="Align.End">
        <ColumnOptions>
            <div class="search-box">
                <Polkanalysis.Components.Components.Search.NumberCriteriaFilterUint @bind-Value="BlockNbLogsCriteria" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(c => c.When)" Title="When" Sortable="true" Align="Align.End" />
    <TemplateColumn>
        <FluentButton IconStart="new Icons.Regular.Size16.Eye()" Appearance="Appearance.Accent" OnClick="(() => GoToBlockDetails(context.Number))">
        </FluentButton>
    </TemplateColumn> 
</FluentDataGrid>

<FluentPaginator State="@pagination">
    <SummaryTemplate>
        There are <strong>@(pagination.TotalItemCount ?? 0)</strong> rows
    </SummaryTemplate>
    <PaginationTextTemplate>
        This is page <strong>@(pagination.CurrentPageIndex + 1)</strong> out of a total of <strong>@(pagination.LastPageIndex + 1)</strong> pages
    </PaginationTextTemplate>
</FluentPaginator>

@code {
    [Parameter] public IQueryable<BlockLightDto>? Blocks { get; set; }
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    public NumberCriteria<uint>? BlockNumberCriteria = null;
    public NumberCriteria<uint>? BlockNbEventsCriteria = null;
    public NumberCriteria<uint>? BlockNbExtrinsicsCriteria = null;
    public NumberCriteria<uint>? BlockNbLogsCriteria = null;

    public NumberCriteria<string>? BlockHashCriteria = null;
    public NumberCriteria<string>? BlockValidatorCriteria = null;

    protected void GoToBlockDetails(ulong blockId)
    {
        _navigationManager.NavigateTo($"block/{blockId}");
    }

    public IQueryable<BlockLightDto> FilteredBlocks()
    {
        IQueryable<BlockLightDto> queryable = Blocks!.AsQueryable();

        if (BlockNumberCriteria is not null)
            queryable = queryable.WhereCriteria(BlockNumberCriteria, x => x.Number);

        if (BlockHashCriteria is not null)
            queryable = queryable.WhereCriteria(BlockHashCriteria, x => x.Hash.Value);

        if (BlockValidatorCriteria is not null)
            queryable = queryable.WhereCriteria(BlockValidatorCriteria, x => x.ValidatorAddress!);

        if (BlockNbEventsCriteria is not null)
            queryable = queryable.WhereCriteria(BlockNbEventsCriteria, x => x.NbEvents);

        if (BlockNbExtrinsicsCriteria is not null)
            queryable = queryable.WhereCriteria(BlockNbExtrinsicsCriteria, x => x.NbExtrinsics);

        if (BlockNbLogsCriteria is not null)
            queryable = queryable.WhereCriteria(BlockNbLogsCriteria, x => x.NbLogs);

        return queryable;
    }
}
