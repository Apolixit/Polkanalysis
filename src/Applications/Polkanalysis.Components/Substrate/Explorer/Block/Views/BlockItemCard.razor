@using Polkanalysis.Domain.Contracts.Dto.Block;
@using Polkanalysis.Domain.Contracts.Primary.Explorer.Block;
@using Polkanalysis.Domain.Contracts.Secondary.Repository;
@using Polkanalysis.Domain.Contracts.Service;

@inject IExplorerService _explorerService;
@inject IMediator _mediator;
@inject NavigationManager _navigationManager;

<div class="col">
    <div class="card card-hoverable h-100 border @CssBorder()">
        <div class="card-body">
            <div class="row mb-2">
                <div class="col-sm-4">
                    @if (Block.Status == GlobalStatusDto.BlockStatusDto.Finalized)
                    {
                        <FluentIcon id="@BlockStatusTooltipId(Block.Number)" Value="@(new PolkanalysisIcons.BootstrapIcon.HourglassBottom())" Color="Color.Success" />
                    }
                    else if (Block.Status == GlobalStatusDto.BlockStatusDto.Broadcasted)
                    {
                        <FluentIcon id="@BlockStatusTooltipId(Block.Number)" Value="@(new PolkanalysisIcons.BootstrapIcon.HourglassTop())" Color="Color.Warning" />
                    }
                    else
                    {
                        <FluentIcon id="@BlockStatusTooltipId(Block.Number)" Value="@(new PolkanalysisIcons.BootstrapIcon.Hourglass())" Color="Color.Error" />
                    }
                </div>
                <div class="col-sm-8">
                    <FluentLabel Typo="Typography.H5" class="text-end mb-2">
                        @Block.Number
                        <FluentIcon Value="@(new PolkanalysisIcons.PolkadotIcons.BlockNumber())" />
                    </FluentLabel>
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-12">
                    <span class="mr-2">
                        <FluentBadge>
                            <small>
                                <FluentIcon Value="@(new PolkanalysisIcons.PolkadotIcons.Extrinsic())" /> @Block.NbExtrinsics extrinsics
                            </small>
                        </FluentBadge>
                    </span>
                    <span class="mr-2">
                        <FluentBadge>
                            <small>
                                <FluentIcon Value="@(new PolkanalysisIcons.PolkadotIcons.Event())" /> @Block.NbEvents events
                            </small>
                        </FluentBadge>
                    </span>
                    <span>
                        <FluentBadge>
                            <small>
                                <FluentIcon Value="@(new PolkanalysisIcons.BootstrapIcon.Book())" /> @Block.NbLogs logs
                            </small>
                        </FluentBadge>
                    </span>
                </div>
            </div>
            <p class="card-text mb-1 d-flex justify-content-center">
                <AccountSumUp User="@Block.ValidatorIdentity" Limit="15" />
            </p>
        </div>
        <div class="card-footer">
            <div class="row">
                <div class="col-sm-8">
                    <small><FluentIcon Value="@(new Icons.Regular.Size12.Calendar())" /> @Block.When</small>
                </div>
                <div class="col-sm-4 text-end">
                    <FluentAnchor Appearance="@Appearance.Hypertext"
                                  Href="@($"block/{Block.Number}")"
                                  Target="_blank">
                        <FluentButton IconStart="new Icons.Regular.Size16.Eye()" Appearance="Appearance.Accent">
                        </FluentButton>
                    </FluentAnchor>
                </div>
            </div>
        </div>
    </div>
</div>

<FluentTooltip Anchor="@BlockStatusTooltipId(Block.Number)">
    Current block status is @Block.Status.ToString()
</FluentTooltip>

@code {
    // [Parameter] public int NbBlockMax { get; set; } = 10;
    // [Parameter] public int NbPreviousBlockToFetch { get; set; } = 10;
    [Parameter] public BlockLightDto Block { get; set; }

    protected async override Task OnInitializedAsync()
    {
        //var blocks = await _mediator.Send(new BlocksQuery() { NbLastBlocksToFetch = NbBlockMax }, CancellationToken.None);
        //Blocks.AddRange(blocks.Value);

        // var blocks = await _mediator.Send(new BlocksQuery() { NbLastBlocksToFetch = NbBlockMax }, CancellationToken.None);
        // Blocks.Clear();
        // Blocks.AddRange(blocks.Value.OrderByDescending(x => x.Number));
        //await _blockRepository.SubscribeNewBlocksAsync(async (_) =>
        //{
        //    var blocks = await _mediator.Send(new BlocksQuery() { NbLastBlocksToFetch = NbBlockMax }, CancellationToken.None);
        //    Blocks.Clear();
        //    Blocks.AddRange(blocks.Value.OrderByDescending(x => x.Number));

        //    InvokeAsync(() => StateHasChanged());
        //}, CancellationToken.None);
    }

    protected void GoToBlockDetails(ulong blockId)
    {
        _navigationManager.NavigateTo($"block/{blockId}");
    }

    protected string BlockStatusTooltipId(ulong blockId) => $"block-status-{blockId}";

    public (string? cssBorder, string? cssColor, string? cssIcon) CssBorder()
    {
        return Block.Status switch
        {
            GlobalStatusDto.BlockStatusDto.Finalized => ("border-success", "text-success", "bi bi-hourglass-bottom"),
            GlobalStatusDto.BlockStatusDto.Broadcasted => ("border-warning", "text-warning", "bi bi-hourglass-top"),
            _ => ("border-error", "text-error", "bi bi-hourglass")
        };
    }
}
