@page "/validators"

@using OperationResult;
@using Polkanalysis.Components.Dto;
@using Polkanalysis.Domain.Contracts.Dto.Staking.Validator;
@using Polkanalysis.Domain.Contracts.Primary.Staking.Validators;

@inject IMediator _mediator;

<DataCall MediatorReq="mediatorRequest" Context="Validators">
    <Polkanalysis.Components.Shared.Breadcrumb Elements="breadcrumbDtos" />

    <div class="card">
        <div class="card-body">
            <ComponentListView Elems="Validators">
                <CardView>
                    <Polkanalysis.Components.Substrate.Staking.Validator.Views.ValidatorItemCard Validator="context" />
                </CardView>
                <TableView>
                    <Table Elems="Validators" Context="tableValidator">
                        <ThContent>
                            <td scope="col">Stash address</td>
                            <td scope="col">Self bonded</td>
                            <td scope="col">Total bonded</td>
                            <td scope="col">Nb nominators vote</td>
                            <td scope="col"></td>
                        </ThContent>
                        <TbodyContent>
                            <Polkanalysis.Components.Substrate.Staking.Validator.Views.ValidatorItemTable Validator="tableValidator" />
                        </TbodyContent>
                    </Table>
                </TableView>
            </ComponentListView>
        </div>
    </div>
</DataCall>

@code {
    private Task<Result<IEnumerable<ValidatorLightDto>, ErrorResult>>? mediatorRequest;
    private IEnumerable<BreadcrumbDto> breadcrumbDtos = new List<BreadcrumbDto>()
        {
            new BreadcrumbDto("Validators", "/validators")
        };

    protected override void OnInitialized()
    {
        mediatorRequest = _mediator.Send(new ValidatorsQuery(), CancellationToken.None);
    }
}
