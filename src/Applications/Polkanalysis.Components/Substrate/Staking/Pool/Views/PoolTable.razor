@using Polkanalysis.Domain.Contracts.Common.Search
@using Polkanalysis.Domain.Contracts.Dto.Staking.Pool
@using Polkanalysis.Infrastructure.Database.Repository
@using static Polkanalysis.Components.Shared.GlobalSettings
@inject NavigationManager _navigationManager;

<FluentDataGrid Items="FilteredPools()"
                ResizableColumns=true
                Pagination="@pagination"
                TGridItem="PoolLightDto"
                ShowHover="true">
    <PropertyColumn Property="@(c => c.PoolId)" Title="Id" Sortable="true" Align="Align.Start" />
    <PropertyColumn Property="@(c => c.Name)" InitialSortDirection=SortDirection.Descending Sortable="true" IsDefaultSortColumn=true >
        <ColumnOptions>
            <div class="search-box">
                <Polkanalysis.Components.Components.Search.TextCriteriaFilter @bind-Value="poolNameFilter" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(c => c.NbPoolMembers)" Title="Members" Sortable="true" Align="Align.Start" >
        <ColumnOptions>
            <div class="search-box">
                <Polkanalysis.Components.Components.Search.NumberCriteriaFilterUint 
                    @bind-Value="NbPoolMembersCriteria"
                />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    
    @if(TableDisplay != TableDisplayType.Compact)
    {
        <PropertyColumn Property="@(c => c.Commission)" Title="Commission" Sortable="true" Align="Align.Center">
            <ColumnOptions>
                <div class="search-box">
                    <Polkanalysis.Components.Components.Search.NumberCriteriaFilterDouble @bind-Value="CommissionCriteria" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.TotalBonded)" Title="Total bounded" Format="N2" Sortable="true" Align="Align.End">
            <ColumnOptions>
                <div class="search-box">
                    <Polkanalysis.Components.Components.Search.NumberCriteriaFilterDouble @bind-Value="TotalBoundedCriteria" />
                </div>
            </ColumnOptions>
        </PropertyColumn> 
    }

    @if(TableDisplay == TableDisplayType.Full)
    {
        <PropertyColumn Property="@(c => c.CreationDate)" Title="Creation date" Sortable="true" Align="Align.End">
            <ColumnOptions>
                <div class="search-box">
                    <Polkanalysis.Components.Components.Search.DateCriteriaFilter @bind-Value="CreationDateCriteria" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.Depositor.Name)" Title="Creator" Sortable="true" Align="Align.End">
            <ColumnOptions>
                <div class="search-box">
                    <Polkanalysis.Components.Components.Search.TextCriteriaFilter @bind-Value="depositorNameFilter" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
    }
    <TemplateColumn Title="Details">
        <FluentButton IconStart="new Icons.Regular.Size16.Eye()" Appearance="Appearance.Accent" OnClick="(() => GoToDetails(context.PoolId))">
        </FluentButton>
    </TemplateColumn>
</FluentDataGrid>

<FluentPaginator State="@pagination">
    <SummaryTemplate>
        There are <strong>@(pagination.TotalItemCount ?? 0)</strong> rows
    </SummaryTemplate>
    <PaginationTextTemplate>
        This is page <strong>@(pagination.CurrentPageIndex + 1)</strong> out of a total of <strong>@(pagination.LastPageIndex + 1)</strong> pages
    </PaginationTextTemplate>
</FluentPaginator>

@code {
    [Parameter] public IEnumerable<PoolLightDto>? Pools { get; set; }
    [Parameter] public TableDisplayType TableDisplay { get; set; } = TableDisplayType.Normal;

    PaginationState pagination = new PaginationState { ItemsPerPage = Constants.DefaultPageSize };

    NumberCriteria<string> poolNameFilter = new NumberCriteria<string>();
    NumberCriteria<string> depositorNameFilter = new NumberCriteria<string>();

    public NumberCriteria<uint>? NbPoolMembersCriteria = null;
    public NumberCriteria<double>? CommissionCriteria = null;
    public NumberCriteria<double>? TotalBoundedCriteria = null;
    public NumberCriteria<DateTime>? CreationDateCriteria = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected void GoToDetails(uint poolId)
    {
        _navigationManager.NavigateTo($"pool/{poolId}");
    }

    public IQueryable<PoolLightDto> FilteredPools()
    {
        IQueryable<PoolLightDto> queryablePools = Pools!.AsQueryable();

        if (!string.IsNullOrWhiteSpace(poolNameFilter.Value))
            queryablePools = queryablePools.Where(x => x.Name.Contains(poolNameFilter.Value, StringComparison.CurrentCultureIgnoreCase));

        if (!string.IsNullOrWhiteSpace(depositorNameFilter.Value))
            queryablePools = queryablePools.Where(x => x.Depositor != null && x.Depositor.Name.Contains(depositorNameFilter.Value, StringComparison.CurrentCultureIgnoreCase));

        if (NbPoolMembersCriteria is not null)
            queryablePools = queryablePools.WhereCriteria(NbPoolMembersCriteria, x => x.NbPoolMembers);

        if (CommissionCriteria is not null)
            queryablePools = queryablePools.WhereCriteria(CommissionCriteria, x => x.Commission);

        if (TotalBoundedCriteria is not null)
            queryablePools = queryablePools.WhereCriteria(TotalBoundedCriteria, x => x.TotalBonded);

        // if (CreationDateCriteria is not null)
        //     queryablePools = queryablePools.WhereCriteria(CreationDateCriteria, x => x.CreationDate);
        return queryablePools;
    }
}
