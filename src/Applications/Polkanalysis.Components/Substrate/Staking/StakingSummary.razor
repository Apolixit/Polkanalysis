@using Polkanalysis.Domain.Contracts.Dto.Staking.Pool;
@using Polkanalysis.Domain.Contracts.Primary.Staking.Pools;
@using Polkanalysis.Components.Substrate.Staking.Pool;
@using Microsoft.AspNetCore.Components.Routing;

@inject IMediator _mediator;

<div class="card-header">
    <i class="bi bi-hash"></i> Staking
</div>
<div class="card-body">
    <DataCall MediatorReq="mediatorRequest">
        <Table Elems="context
                .Where(x => !string.IsNullOrEmpty(x.Name))
                .OrderByDescending(x => x.NbPoolMembers)
                .Take(10)" Context="tablePool">
            <ThContent>
                <td scope="col">Pool name</td>
                <td scope="col">Nb members</td>
                <td scope="col">Commission</td>
                <td scope="col">Total bonded</td>
                <td scope="col"></td>
            </ThContent>
            <TbodyContent>
                <Polkanalysis.Components.Substrate.Staking.Pool.Views.PoolItemTable Pool="tablePool" />
            </TbodyContent>
        </Table>
    </DataCall>
    <div class="card-footer">
        <NavLink class="nav-link" href="/staking">
            <button class="btn btn-primary btn-sm">
                See all staking
            </button>
        </NavLink>
    </div>
</div>


@code {
    private Task<Result<IEnumerable<PoolLightDto>, ErrorResult>>? mediatorRequest;

    protected async override Task OnInitializedAsync()
    {
        mediatorRequest = _mediator.Send(new PoolsQuery(), CancellationToken.None);
    }
}
