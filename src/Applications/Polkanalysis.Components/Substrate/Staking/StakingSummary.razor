@using Polkanalysis.Domain.Contracts.Dto.Staking.Pool;
@using Polkanalysis.Domain.Contracts.Primary.Staking.Pools;
@using Polkanalysis.Components.Substrate.Staking.Pool;
@using Microsoft.AspNetCore.Components.Routing;

@inject IMediator _mediator;

<div>
    <DataCall MediatorReq="mediatorRequest" Context="poolLightContext">
        <Polkanalysis.Components.Substrate.Staking.Pool.Views.PoolTable Pools="poolLightContext" />
    </DataCall>
    <div class="mt-2">
        <FluentNavLink Href="/staking">
            <FluentButton Appearance="Appearance.Accent">
                See all staking
            </FluentButton>
        </FluentNavLink>
    </div>
</div>


@code {
    private Task<Result<IEnumerable<PoolLightDto>, ErrorResult>>? mediatorRequest;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    string nameFilter = string.Empty;

    protected override void OnInitialized()
    {
        mediatorRequest = _mediator.Send(new PoolsQuery(), CancellationToken.None);
    }
}
