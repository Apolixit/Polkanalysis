@using OperationResult;
@using Polkanalysis.Components.Services.Http;
@using Polkanalysis.Domain.Contracts.Dto.Informations;
@using Polkanalysis.Domain.Contracts.Dto.Price;
@using Polkanalysis.Domain.Contracts.Primary.Informations;
@using Polkanalysis.Domain.Contracts.Primary.Price;
@inject IApiService apiService;
@inject IMediator _mediator;


<div class="row">
    <DataCall MediatorReq="requestMediatorDetails">
        <div class="col-sm-4 col-md-3 text-center my-auto">
            <img src="@context.BlockchainInformationDetail.LogoUrl"
                 class="img-fluid rounded-start" alt="Logo" width="100">
        </div>
        <div class="col-sm-6 col-md-6">
            <div class="">
                <FluentLabel Typo="Typography.H5">
                    @if (context.IsRelayChain)
                    {
                        <FluentIcon Value="@(new PolkanalysisIcons.PolkadotIcons.RelayChain())" />
                    }
                    @context.BlockchainInformationDetail.Name <small><em>(@context.FullName)</em></small>
                </FluentLabel>
                <p class="mt-3">
                    <div>Token : <strong>@context.TokenSymbol</strong></div>
                    <div>Decimal : <strong>@context.TokenDecimal</strong></div>
                    <div>Version : <strong>@context.Version</strong></div>
                </p>
                <p class="mt-3">
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Website))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Website">
                                <FluentIcon Value="@(new PolkanalysisIcons.BootstrapIcon.Chrome())" />
                            </a>
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Whitepaper))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Whitepaper">
                                <FluentIcon Value="@(new PolkanalysisIcons.PolkadotIcons.Whitepaper())" />
                            </a>
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Github))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Github">
                                <FluentIcon Value="@(new PolkanalysisIcons.BootstrapIcon.Github())" />
                            </a>
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Twitter))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Twitter">
                                <FluentIcon Value="@(new PolkanalysisIcons.BootstrapIcon.Twitter())" />
                            </a>
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Twitter))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Discord">
                                <FluentIcon Value="@(new PolkanalysisIcons.BootstrapIcon.Discord())" />
                            </a>
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Medium))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Medium">
                                <FluentIcon Value="@(new PolkanalysisIcons.BootstrapIcon.Medium())" />
                            </a>
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(context.BlockchainInformationDetail.Telegram))
                    {
                        <span class="text-body-secondary fs-4 m-1">
                            <a href="@context.BlockchainInformationDetail.Telegram">
                                <FluentIcon Value="@(new PolkanalysisIcons.BootstrapIcon.Telegram())" />
                            </a>
                        </span>
                    }
                </p>
            </div>
        </div>
    </DataCall>
    <DataCall MediatorReq="requestMediatorPrice">
        <div class="col-sm-12 col-md-3 my-auto">
            <div class="text-center">
                <FluentLabel Typo="Typography.PageTitle">
                    @context.Price.ToString("N2") @context.CompareToCurrency.ToString()
                </FluentLabel>
            </div>
        </div>
    </DataCall>
</div>


@code {
    private Task<Result<BlockchainDetailsDto, ErrorResult>>? requestMediatorDetails;
    private Task<Result<TokenPriceDto, ErrorResult>>? requestMediatorPrice;
    private BlockchainDetailsDto? blockchainDetail;

    protected override void OnInitialized()
    {
        requestMediatorDetails = _mediator.Send(new BlockchainDetailsQuery(), CancellationToken.None);
        requestMediatorPrice = _mediator.Send(new TokenPriceQuery()
            {
                CoinId = "polkadot",
                Date = DateTime.Now
            }, CancellationToken.None);
        //request = new ApiRequest<BlockchainDetailsDto>("/api/polkadot/information");
    }
}
