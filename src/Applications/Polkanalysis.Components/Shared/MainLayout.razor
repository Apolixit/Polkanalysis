@using MediatR;
@using Microsoft.Extensions.Configuration;
@using Microsoft.Extensions.Logging;
@using Polkanalysis.Configuration.Contracts;
@using Polkanalysis.Domain.Contracts.Primary.Notification;
@using Polkanalysis.Domain.Contracts.Secondary;

@inherits LayoutComponentBase
@inject ISubstrateService _substrateService;
@inject IMediator _mediator;
@inject ILogger<MainLayout> logger;
@inject IWebsiteConfiguration _websiteConfiguration;

@if (_websiteConfiguration.Maintenance.IsActivated)
{
    <Maintenance />
}
else
{
    @if (isCurrentlyConnected)
    {
        <div id="wrapper">
            <div id="sidebar-wrapper" data-simplebar="" data-simplebar-auto-hide="true">
                <div class="brand-logo">
                    <a href="index.html">
                        <img src="_content/Polkanalysis.Components/assets/images/logo-icon.png" class="logo-icon" alt="logo icon">
                        <h5 class="logo-text">Polkanalysis</h5>
                    </a>
                </div>
                <SideMenu></SideMenu>
            </div>
            <HeaderMenu></HeaderMenu>

            <div class="clearfix"></div>

            <div class="content-wrapper">
                <div class="container-fluid">
                    @Body
                    <div class="overlay toggle-menu"></div>
                </div>

            </div>
            <a href="javaScript:void();" class="back-to-top"><i class="fa fa-angle-double-up"></i> </a>
            <Footer />
        </div>
    }
    else
    {
        <WaitingBlockchainConnexion BlockchainName="@_substrateService.BlockchainName" />
    }
}

@code {
    protected GlobalSettings? globalSettings { get; set; }
    protected bool isCurrentlyConnected = false;
    private bool _forceRerender;

    protected override bool ShouldRender() => true;

    protected override void OnInitialized()
    {
        globalSettings = new GlobalSettings()
        {
            DisplayType = GlobalSettings.ViewDisplayType.CardElement
        };

        _substrateService.CheckBlockchainStateAsync((bool isConnected) =>
        {
            if (isCurrentlyConnected != isConnected)
            {
                logger.LogInformation($"Is connected : {isConnected}");
                isCurrentlyConnected = isConnected;

                InvokeAsync(() => StateHasChanged());
            }
        }, CancellationToken.None);
    }
}