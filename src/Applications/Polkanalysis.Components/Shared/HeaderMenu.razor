@using Microsoft.FluentUI.AspNetCore.Components.DesignTokens
@using Polkanalysis.Domain.Contracts.Dto.Informations;
@using Polkanalysis.Domain.Contracts.Primary.Informations;
@using Polkanalysis.Infrastructure.Blockchain.Contracts;

@inject ISubstrateService _substrateService;
@inject IMediator _mediator;

<header class="d-flex flex-wrap align-items-center justify-content-center justify-content-md-between py-3 border-bottom main-background">
    <div class="d-flex col-md-2 mb-2 mb-md-0 justify-content-center">
        <a href="/" class="d-flex align-items-center mb-2 mb-lg-0 link-body-emphasis text-decoration-none">
            <img src="_content/Polkanalysis.Components/assets/images/logo-icon.png" class="header-logo-icon" alt="logo icon">
            <span Class="header-title fs-4">Polkanalysis</span>
        </a>
    </div>
    <ul class="nav col-12 col-md-auto mb-2 justify-content-center mb-md-0">
        <li>
            <FluentSearch @bind-Value=searchValue Placeholder="Search" />
        </li>
    </ul>

    <div class="d-flex justify-content-end col-md-2 text-end me-2">
        @if (CurrentMode == DesignThemeModes.Dark)
        {
            <FluentButton OnClick="(() => OnThemeChanged.InvokeAsync(DesignThemeModes.Light))">
                <FluentIcon Value="@(new PolkanalysisIcons.PolkadotIcons.DayMode())" />
            </FluentButton>
        }
        else
        {
            <FluentButton OnClick="(() => OnThemeChanged.InvokeAsync(DesignThemeModes.Dark))">
                <FluentIcon Value="@(new PolkanalysisIcons.PolkadotIcons.DarkMode())" />
            </FluentButton>
        }

        @if (CurrentConnectedBlockchain == null)
        {
            <Loader />
        }
        else
        {
            <FluentButton id="blockchainPopover"
                        Class="me-2"
                          IconStart="@(Icon.FromImageUrl(CurrentConnectedBlockchain.BlockchainInformationDetail.LogoUrl))"
                          Appearance="Appearance.Accent"
                          @onclick="(() => dropdownBlockchain = !dropdownBlockchain)">
                <small>@CurrentConnectedBlockchain.BlockchainInformationDetail.Name</small>
            </FluentButton>

            <FluentPopover Style="width: 300px;" VerticalThreshold="170" AnchorId="blockchainPopover" @bind-Open="dropdownBlockchain">
                <Header>Blockchains</Header>
                <Body>
                    <FluentStack Orientation="Orientation.Vertical">
                        @foreach (var current in SupportedBlockchain)
                        {
                            <li class="dropdown-item">
                                <FluentIcon Value="@(Icon.FromImageUrl(current.BlockchainInformationDetail.LogoUrl))" />
                                <small>@current.BlockchainInformationDetail.Name</small>
                            </li>
                        }
                    </FluentStack>
                </Body>
            </FluentPopover>
        }
    </div>
    </header>

@code {
    [Parameter] public EventCallback<DesignThemeModes> OnThemeChanged { get; set; }
    [Parameter] public DesignThemeModes CurrentMode { get; set; }

    public bool IsCurrentlyConnected { get; set; } = false;
    public string BlockchainName { get; set; } = string.Empty;

    public string? searchValue { get; set; } = string.Empty;

    private BlockchainDetailsDto CurrentConnectedBlockchain;
    public IEnumerable<BlockchainDetailsDto> SupportedBlockchain = Enumerable.Empty<BlockchainDetailsDto>();

    private bool dropdownBlockchain = false;

    protected override bool ShouldRender() => true;

    protected override async Task OnInitializedAsync()
    {
        _substrateService.CheckBlockchainStateAsync((bool isConnected) =>
        {
            IsCurrentlyConnected = isConnected;
            BlockchainName = _substrateService.BlockchainName;

            InvokeAsync(() => StateHasChanged());
        }, CancellationToken.None);

        var polkadotInfo = await _mediator.Send(new BlockchainDetailsQuery() { BlockchainName = "Polkadot" }, CancellationToken.None);
        var kusamaInfo = await _mediator.Send(new BlockchainDetailsQuery() { BlockchainName = "Kusama" }, CancellationToken.None);
        var bajunInfo = await _mediator.Send(new BlockchainDetailsQuery() { BlockchainName = "Bajun" }, CancellationToken.None);

        SupportedBlockchain = new List<BlockchainDetailsDto>() { polkadotInfo.Value, kusamaInfo.Value, bajunInfo.Value };
        CurrentConnectedBlockchain = SupportedBlockchain.FirstOrDefault(x => x.BlockchainInformationDetail.Name.ToLower() == BlockchainName.ToLower());

        InvokeAsync(() => StateHasChanged());
    }
}
