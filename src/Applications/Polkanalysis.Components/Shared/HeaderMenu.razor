@using Polkanalysis.Domain.Contracts.Dto.Informations;
@using Polkanalysis.Domain.Contracts.Primary.Informations;
@using Polkanalysis.Infrastructure.Blockchain.Contracts;
@inject ISubstrateService _substrateService;
@inject IMediator _mediator;

<!--Start topbar header-->
<header class="topbar-nav">
    <nav class="navbar navbar-expand fixed-top">
        <ul class="navbar-nav me-auto align-items-center">
            <li class="nav-item">
                <a class="nav-link toggle-menu" href="javascript:void();">
                    <i class="icon-menu menu-icon"></i>
                </a>
            </li>
            <li class="nav-item">
                <form class="search-bar">
                    <input type="text" class="form-control" placeholder="Enter keywords">
                    <a href="javascript:void();"><i class="icon-magnifier"></i></a>
                </form>
            </li>
        </ul>

        <ul class="navbar-nav align-items-center right-nav-link">
            @*<li class="nav-item dropdown-lg">
                <a class="nav-link dropdown-toggle dropdown-toggle-nocaret waves-effect" data-toggle="dropdown" href="javascript:void();">
                    <i class="fa fa-envelope-open-o"></i>
                </a>
            </li>
            <li class="nav-item dropdown-lg">
                <a class="nav-link dropdown-toggle dropdown-toggle-nocaret waves-effect" data-toggle="dropdown" href="javascript:void();">
                    <i class="fa fa-bell-o"></i>
                </a>
            </li>*@
            @if (CurrentConnectedBlockchain == null)
            {
                @*<Loader />*@
            } else
            {
                <li class="nav-item blockchains">
                    <a class="nav-link dropdown-toggle dropdown-toggle-nocaret waves-effect"
                       data-toggle="dropdown" href="javascript:void();" @onclick="(() => dropdownBlockchain = !dropdownBlockchain)">
                        <img src="@CurrentConnectedBlockchain.BlockchainInformationDetail.LogoUrl" 
                        class="img-fluid rounded-start" alt="Logo" width="30">
                        <small>@CurrentConnectedBlockchain.BlockchainInformationDetail.Name</small>
                    </a>

                    @if (SupportedBlockchain.Count() > 0)
                    {
                        <ul class="dropdown-menu dropdown-menu-left @(dropdownBlockchain ? "show" : string.Empty)">
                            @foreach (var current in SupportedBlockchain)
                            {
                                <li class="dropdown-item">
                                    <img src="@CurrentConnectedBlockchain.BlockchainInformationDetail.LogoUrl"
                                         class="img-fluid rounded-start" alt="Logo" width="30">
                                    <small>@current.BlockchainInformationDetail.Name</small>
                                </li>
                            }
                        </ul>
                    }

                </li>
            }
            
            @*<li class="nav-item">
                <a class="nav-link dropdown-toggle dropdown-toggle-nocaret" data-toggle="dropdown" href="#">
                    <span class="user-profile"><img src="https://via.placeholder.com/110x110" class="img-circle" alt="user avatar"></span>
                </a>
                <ul class="dropdown-menu dropdown-menu-right">
                    <li class="dropdown-item user-details">
                        <a href="javaScript:void();">
                            <div class="media">
                                <div class="avatar"><img class="align-self-start mr-3" src="https://via.placeholder.com/110x110" alt="user avatar"></div>
                                <div class="media-body">
                                    <h6 class="mt-2 user-title">Sarajhon Mccoy</h6>
                                    <p class="user-subtitle">mccoy@example.com</p>
                                </div>
                            </div>
                        </a>
                    </li>
                    <li class="dropdown-divider"></li>
                    <li class="dropdown-item"><i class="icon-envelope mr-2"></i> Inbox</li>
                    <li class="dropdown-divider"></li>
                    <li class="dropdown-item"><i class="icon-wallet mr-2"></i> Account</li>
                    <li class="dropdown-divider"></li>
                    <li class="dropdown-item"><i class="icon-settings mr-2"></i> Setting</li>
                    <li class="dropdown-divider"></li>
                    <li class="dropdown-item"><i class="icon-power mr-2"></i> Logout</li>
                </ul>
            </li>*@
        </ul>
    </nav>
</header>
<!--End topbar header-->

@code {
    public bool IsCurrentlyConnected { get; set; } = false;
    public string BlockchainName { get; set; } = string.Empty;

    private BlockchainDetailsDto CurrentConnectedBlockchain;
    public IEnumerable<BlockchainDetailsDto> SupportedBlockchain = Enumerable.Empty<BlockchainDetailsDto>();

    private bool dropdownBlockchain = false;

    protected override bool ShouldRender() => true;

    protected override async Task OnInitializedAsync()
    {
        _substrateService.CheckBlockchainStateAsync((bool isConnected) =>
        {
            IsCurrentlyConnected = isConnected;
            BlockchainName = _substrateService.BlockchainName;

            InvokeAsync(() => StateHasChanged());
        }, CancellationToken.None);

        var polkadotInfo = await _mediator.Send(new BlockchainDetailsQuery() { BlockchainName = "Polkadot" }, CancellationToken.None);
        var kusamaInfo = await _mediator.Send(new BlockchainDetailsQuery() { BlockchainName = "Kusama" }, CancellationToken.None);
        var bajunInfo = await _mediator.Send(new BlockchainDetailsQuery() { BlockchainName = "Bajun" }, CancellationToken.None);

        SupportedBlockchain = new List<BlockchainDetailsDto>() { polkadotInfo.Value, kusamaInfo.Value, bajunInfo.Value };
        CurrentConnectedBlockchain = SupportedBlockchain.FirstOrDefault(x => x.BlockchainInformationDetail.Name.ToLower() == BlockchainName.ToLower());

        InvokeAsync(() => StateHasChanged());
    }
}
