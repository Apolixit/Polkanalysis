// <auto-generated />
using System;
using System.Numerics;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Polkanalysis.Infrastructure.Database;

#nullable disable

namespace Polkanalysis.Infrastructure.Common.Migrations
{
    [DbContext(typeof(SubstrateDbContext))]
    [Migration("20241024160133_ChangeEventsInformationPrimaryKey")]
    partial class ChangeEventsInformationPrimaryKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Blocks.BlockInformationModel", b =>
                {
                    b.Property<long>("BlockNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BlockNumber"));

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BlockHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BlockchainName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EventsCount")
                        .HasColumnType("bigint");

                    b.Property<long>("ExtrinsicsCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Justification")
                        .HasColumnType("text");

                    b.Property<long>("LogsCount")
                        .HasColumnType("bigint");

                    b.Property<string>("ValidatorAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BlockNumber");

                    b.ToTable("BlockInformation");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Errors.SubstrateErrorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("BlockNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("BlockchainName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ElementId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeError")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SubstrateErrors");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Auctions.AuctionsAuctionClosedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<long>("AuctionIndex")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "AuctionIndex");

                    b.ToTable("EventAuctionsAuctionClosed");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Auctions.AuctionsAuctionStartedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<long>("AuctionIndex")
                        .HasColumnType("bigint");

                    b.Property<long>("LeasePeriod")
                        .HasColumnType("bigint");

                    b.Property<long>("Ending")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "AuctionIndex", "LeasePeriod", "Ending");

                    b.ToTable("EventAuctionsAuctionStarted");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Balances.BalancesBalanceSetModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("RootAccount")
                        .HasColumnType("text");

                    b.Property<double>("Amount1")
                        .HasColumnType("double precision");

                    b.Property<double>("Amount2")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "RootAccount", "Amount1", "Amount2");

                    b.ToTable("EventBalancesBalanceSet");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Balances.BalancesDustLostModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("AccountAddress")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "AccountAddress", "Amount");

                    b.ToTable("EventBalancesDustLost");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Balances.BalancesEndowedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("AccountAddress")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "AccountAddress", "Amount");

                    b.ToTable("EventBalancesEndowed");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Balances.BalancesReservedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("AccountAddress")
                        .HasColumnType("text");

                    b.Property<double>("ReservedAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "AccountAddress", "ReservedAmount");

                    b.ToTable("EventBalancesReserved");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Balances.BalancesSlashedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("AccountAddess")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "AccountAddess", "Amount");

                    b.ToTable("EventBalancesSlashed");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Balances.BalancesTransferModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "From", "To", "Amount");

                    b.ToTable("EventBalancesTransfer");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Balances.BalancesUnreservedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("AccountAddess")
                        .HasColumnType("text");

                    b.Property<double>("UnreservedAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "AccountAddess", "UnreservedAmount");

                    b.ToTable("EventBalancesUnreserved");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Crowdloan.CrowdloanContributedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("AccountAddess")
                        .HasColumnType("text");

                    b.Property<long>("CrowdloanId")
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "AccountAddess", "CrowdloanId", "Amount");

                    b.ToTable("EventCrowdloanContributed");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Crowdloan.CrowdloanCreatedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<long>("CrowdloanId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "CrowdloanId");

                    b.ToTable("EventCrowdloanCreated");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.EventManagerModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("LastOccurenceScannedBlockId")
                        .HasColumnType("integer");

                    b.Property<int>("LastScanBlockId")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "ModuleName", "ModuleEvent");

                    b.ToTable("EventManager");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.EventsInformationModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("JsonParameters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BlockchainName", "BlockId", "EventId");

                    b.ToTable("EventsInformation");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Identity.IdentityIdentityClearedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("AccountAddress")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "AccountAddress", "Amount");

                    b.ToTable("EventIdentityIdentityCleared");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Identity.IdentityIdentityKilledModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("AccountAddress")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "AccountAddress", "Amount");

                    b.ToTable("EventIdentityIdentityKilled");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Identity.IdentityIdentitySetModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("AccountAddress")
                        .HasColumnType("text");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "AccountAddress");

                    b.ToTable("EventIdentityIdentitySet");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.NominationPools.NominationPoolsBondedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("Member")
                        .HasColumnType("text");

                    b.Property<long>("Pool_id")
                        .HasColumnType("bigint");

                    b.Property<double>("Bonded")
                        .HasColumnType("double precision");

                    b.Property<bool>("Joined")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "Member", "Pool_id", "Bonded", "Joined");

                    b.ToTable("EventNominationPoolsBonded");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.NominationPools.NominationPoolsCreatedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("Depositor")
                        .HasColumnType("text");

                    b.Property<long>("Pool_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "Depositor", "Pool_id");

                    b.ToTable("EventNominationPoolsCreated");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.NominationPools.NominationPoolsDestroyedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<long>("Pool_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "Pool_id");

                    b.ToTable("EventNominationPoolsDestroyed");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.NominationPools.NominationPoolsMemberRemovedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<long>("Pool_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Member")
                        .HasColumnType("text");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "Pool_id", "Member");

                    b.ToTable("EventNominationPoolsMemberRemoved");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.NominationPools.NominationPoolsMinBalanceDeficitAdjustedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<long>("Pool_id")
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "Pool_id", "Amount");

                    b.ToTable("EventNominationPoolsMinBalanceDeficitAdjusted");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.NominationPools.NominationPoolsMinBalanceExcessAdjustedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<long>("Pool_id")
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "Pool_id", "Amount");

                    b.ToTable("EventNominationPoolsMinBalanceExcessAdjusted");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.NominationPools.NominationPoolsPaidOutModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("Member")
                        .HasColumnType("text");

                    b.Property<long>("Pool_id")
                        .HasColumnType("bigint");

                    b.Property<double>("Payout")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "Member", "Pool_id", "Payout");

                    b.ToTable("EventNominationPoolsPaidOut");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.NominationPools.NominationPoolsPoolCommissionClaimedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<long>("Pool_id")
                        .HasColumnType("bigint");

                    b.Property<double>("Commission")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "Pool_id", "Commission");

                    b.ToTable("EventNominationPoolsPoolCommissionClaimed");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.NominationPools.NominationPoolsUnbondedModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("Member")
                        .HasColumnType("text");

                    b.Property<long>("Pool_id")
                        .HasColumnType("bigint");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<double>("Points")
                        .HasColumnType("double precision");

                    b.Property<long>("Era")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "Member", "Pool_id", "Balance", "Points", "Era");

                    b.ToTable("EventNominationPoolsUnbonded");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.NominationPools.NominationPoolsWithdrawnModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("Member")
                        .HasColumnType("text");

                    b.Property<long>("Pool_id")
                        .HasColumnType("bigint");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<double>("Points")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "Member", "Pool_id", "Balance", "Points");

                    b.ToTable("EventNominationPoolsWithdrawn");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.Staking.StakingEraPaidModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<long>("Era_index")
                        .HasColumnType("bigint");

                    b.Property<double>("Validator_payout")
                        .HasColumnType("double precision");

                    b.Property<double>("Remainder")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "Era_index", "Validator_payout", "Remainder");

                    b.ToTable("EventStakingEraPaid");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.System.SystemKilledAccountModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("AccountAddress")
                        .HasColumnType("text");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "AccountAddress");

                    b.ToTable("EventSystemKilledAccount");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Events.System.SystemNewAccountModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("ModuleEvent")
                        .HasColumnType("text");

                    b.Property<string>("AccountAddress")
                        .HasColumnType("text");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainName", "BlockId", "EventId", "ModuleName", "ModuleEvent", "AccountAddress");

                    b.ToTable("EventSystemNewAccount");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Extrinsics.ExtrinsicsInformationModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountAddress")
                        .HasColumnType("text");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("BlockNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("BlockchainName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Charge")
                        .HasColumnType("double precision");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ExtrinsicIndex")
                        .HasColumnType("bigint");

                    b.Property<double?>("Fees")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("boolean");

                    b.Property<string>("JsonParameters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("LifetimeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Signature")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TransactionVersion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LifetimeId");

                    b.ToTable("ExtrinsicsInformation");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Price.TokenPriceModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("BlockchainName", "Date");

                    b.ToTable("TokenPrices");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Staking.EraLifetimeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BlockchainName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("EndBlock")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsImmortal")
                        .HasColumnType("boolean");

                    b.Property<long?>("StartBlock")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EraLifetime");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Staking.EraStakersModel", b =>
                {
                    b.Property<int>("EraStakersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EraStakersId"));

                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<int>("EraId")
                        .HasColumnType("integer");

                    b.Property<string>("ValidatorAddress")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<BigInteger>("OwnStake")
                        .HasColumnType("numeric");

                    b.Property<BigInteger>("TotalStake")
                        .HasColumnType("numeric");

                    b.HasKey("EraStakersId", "BlockchainName", "EraId", "ValidatorAddress");

                    b.ToTable("EraStakersModels");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Staking.EraStakersNominatorsModel", b =>
                {
                    b.Property<int>("EraStakersId")
                        .HasColumnType("integer");

                    b.Property<string>("NominatorAddress")
                        .HasColumnType("text");

                    b.Property<BigInteger>("ValueStake")
                        .HasColumnType("numeric");

                    b.HasKey("EraStakersId", "NominatorAddress");

                    b.ToTable("EraStakersNominatorsModel");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Version.PalletVersionModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<string>("PalletName")
                        .HasColumnType("text");

                    b.Property<int>("PalletVersion")
                        .HasColumnType("integer");

                    b.Property<long?>("BlockEnd")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockStart")
                        .HasColumnType("bigint");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<long>("SpecVersion")
                        .HasColumnType("bigint");

                    b.HasKey("BlockchainName", "PalletName", "PalletVersion");

                    b.ToTable("PalletVersionModels");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Version.SpecVersionModel", b =>
                {
                    b.Property<string>("BlockchainName")
                        .HasColumnType("text");

                    b.Property<long>("SpecVersion")
                        .HasColumnType("bigint");

                    b.Property<long?>("BlockEnd")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BlockEndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("BlockStart")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BlockStartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("MetadataVersion")
                        .HasColumnType("bigint");

                    b.HasKey("BlockchainName", "SpecVersion");

                    b.ToTable("SpecVersionModels");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Extrinsics.ExtrinsicsInformationModel", b =>
                {
                    b.HasOne("Polkanalysis.Infrastructure.Database.Contracts.Model.Staking.EraLifetimeModel", "Lifetime")
                        .WithMany()
                        .HasForeignKey("LifetimeId");

                    b.Navigation("Lifetime");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Staking.EraStakersNominatorsModel", b =>
                {
                    b.HasOne("Polkanalysis.Infrastructure.Database.Contracts.Model.Staking.EraStakersModel", "EraStakers")
                        .WithMany("EraNominatorsVote")
                        .HasForeignKey("EraStakersId")
                        .HasPrincipalKey("EraStakersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EraStakers");
                });

            modelBuilder.Entity("Polkanalysis.Infrastructure.Database.Contracts.Model.Staking.EraStakersModel", b =>
                {
                    b.Navigation("EraNominatorsVote");
                });
#pragma warning restore 612, 618
        }
    }
}
